- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-09-08 18:45:53'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '日期: 2024-09-08 18:45:53'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'AutoManual: Generating Instruction Manuals by LLM Agents via Interactive Environmental
    Learning'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'AutoManual: 通过互动环境学习生成 LLM 代理的说明手册'
- en: 来源：[https://ar5iv.labs.arxiv.org/html/2405.16247](https://ar5iv.labs.arxiv.org/html/2405.16247)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://ar5iv.labs.arxiv.org/html/2405.16247](https://ar5iv.labs.arxiv.org/html/2405.16247)
- en: Minghao Chen¹,    Yihang Li²,    Yanting Yang³,    Shiyu Yu⁴,    Binbin Lin^(3$*$),    Xiaofei
    He²
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Minghao Chen¹，Yihang Li²，Yanting Yang³，Shiyu Yu⁴，Binbin Lin^(3$*$)，Xiaofei He²
- en: ¹School of Computer Science, Hangzhou Dianzi University
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: ¹杭州电子科技大学计算机科学学院
- en: ²State Key Lab of CAD&CG, Zhejiang University
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: ²浙江大学 CAD&CG 国家重点实验室
- en: ³School of Software Technology, Zhejiang University    ⁴NingBo Port Group
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: ³浙江大学软件学院    ⁴宁波港集团
- en: minghaochen01@gmail.com
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: minghaochen01@gmail.com
- en: Abstract
  id: totrans-11
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Large Language Models (LLM) based agents have shown promise in autonomously
    completing tasks across various domains, e.g., robotics, games, and web navigation.
    However, these agents typically require elaborate design and expert prompts to
    solve tasks in specific domains, which limits their adaptability. We introduce
    AutoManual, a framework enabling LLM agents to autonomously build their understanding
    through interaction and adapt to new environments. AutoManual categorizes environmental
    knowledge into diverse rules and optimizes them in an online fashion by two agents:
    1) The Planner codes actionable plans based on current rules for interacting with
    the environment. 2) The Builder updates the rules through a well-structured rule
    system that facilitates online rule management and essential detail retention.
    To mitigate hallucinations in managing rules, we introduce case-conditioned prompting
    strategy for the Builder. Finally, the Formulator agent compiles these rules into
    a comprehensive manual. The self-generated manual can not only improve the adaptability
    but also guide the planning of smaller LLMs while being human-readable. Given
    only one simple demonstration, AutoManual significantly improves task success
    rates, achieving 97.4% with GPT-4-turbo and 86.2% with GPT-3.5-turbo on ALFWorld
    benchmark tasks. The source code will be available soon.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 基于大型语言模型（LLM）的代理在自主完成各种领域的任务中表现出了前景，例如机器人技术、游戏和网络导航。然而，这些代理通常需要精心设计和专家提示才能在特定领域解决任务，这限制了它们的适应性。我们介绍了
    AutoManual，一个使 LLM 代理能够通过互动自主构建理解并适应新环境的框架。AutoManual 将环境知识分类为多样的规则，并通过两个代理以在线方式优化这些规则：1)
    计划者基于当前规则编码可操作的计划以与环境互动。2) 构建者通过一个结构良好的规则系统更新规则，该系统促进了在线规则管理和必要细节保留。为了减少在管理规则时的虚假信息，我们为构建者引入了基于案例的提示策略。最后，制定者代理将这些规则编撰成综合手册。自生成的手册不仅可以提高适应性，还可以指导较小
    LLM 的规划，同时易于人类阅读。仅凭一个简单的演示，AutoManual 显著提高了任务成功率，在 ALFWorld 基准任务中，GPT-4-turbo
    的成功率达到 97.4%，GPT-3.5-turbo 的成功率达到 86.2%。源代码将很快发布。
- en: 1 Introduction
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1 介绍
- en: Recently, autonomous agents based on Large Language Models (LLM), e.g., ReAct [ReAct](#bib.bib30)
    , Reflexion [Reflexion](#bib.bib16) , SayCan [SayCan](#bib.bib1) , WebGPT [WebGPT](#bib.bib10)
    , and Voyager [Voyager](#bib.bib23) , have demonstrated their potential to complete
    long-horizon tasks in grounded environments. These LLM agents operate by generating
    thoughts and actions that are executable in the environment. For customized environments,
    such as robotics [SayCan](#bib.bib1) ; [CodeAP](#bib.bib7) ; [ProgPrompt](#bib.bib18)
    ; [ChatGPTEL](#bib.bib22) and games [GenerativeAI](#bib.bib14) ; [Voyager](#bib.bib23)
    ; [GITM](#bib.bib34) , prior methods provide detailed instructions and in-context
    examples to familiarize LLM with action functions (API) and the target environment.
    However, unlike these agents, humans can autonomously build and update their understanding
    of an unfamiliar environment through dynamic interaction.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，基于大型语言模型（LLM）的自主代理，例如 ReAct [ReAct](#bib.bib30)，Reflexion [Reflexion](#bib.bib16)，SayCan [SayCan](#bib.bib1)，WebGPT [WebGPT](#bib.bib10)
    和 Voyager [Voyager](#bib.bib23)，展示了它们在实际环境中完成长期任务的潜力。这些 LLM 代理通过生成可在环境中执行的思想和行动来操作。对于定制环境，例如机器人技术 [SayCan](#bib.bib1)；[CodeAP](#bib.bib7)；[ProgPrompt](#bib.bib18)；[ChatGPTEL](#bib.bib22)
    和游戏 [GenerativeAI](#bib.bib14)；[Voyager](#bib.bib23)；[GITM](#bib.bib34)，以往的方法提供详细的指令和上下文示例，以使
    LLM 熟悉行动功能（API）和目标环境。然而，与这些代理不同，人类能够通过动态互动自主构建和更新对陌生环境的理解。
- en: Several existing methods enable LLM agents to reflect on feedback [Reflexion](#bib.bib16)
    ; [AdaPlanner](#bib.bib20) or save successful experiences as skills [AdaPlanner](#bib.bib20)
    ; [Voyager](#bib.bib23) ; [ExpeL](#bib.bib32) to enhance the performance and reduce
    the reliance on human-provided examples. However, these reflections and skills
    have not been well exploited to foster a deeper understanding of the environment.
    As a result, directly using saved skills as in-context examples can lead to the
    Path Dependence problem, i.e., the agent blindly replicates the paths of previous
    successes, failing to appropriately adapt to new scenarios. Such problems are
    more severe in real-world situations characterized by high variability.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一些现有方法使LLM代理能够反思反馈 [Reflexion](#bib.bib16) ; [AdaPlanner](#bib.bib20) 或将成功经验保存为技能 [AdaPlanner](#bib.bib20)
    ; [Voyager](#bib.bib23) ; [ExpeL](#bib.bib32) 以增强性能并减少对人工提供示例的依赖。然而，这些反思和技能尚未被充分利用，以促进对环境的更深入理解。因此，直接使用保存的技能作为上下文示例可能会导致路径依赖问题，即代理盲目复制之前成功的路径，未能适当地适应新情境。这种问题在特征高度变异的真实世界情况下尤为严重。
- en: A previous work, ExpeL [ExpeL](#bib.bib32) , gathers the trajectories of LLM
    agents and extracts cross-task rules from them. However, these rules are extracted
    offline, making ExpeL suffer from the same distributional shift problem as Offline
    RL [OfflineRL](#bib.bib6) . Meanwhile, due to the simplicity of rule management,
    its rules are always armchair general and unhelpful for the Path Dependency problem.
    In this paper, we propose a novel framework called AutoManual to build a well-organized
    understanding of the environment that can guide multi-task planning effectively.
    AutoManual leverages a dynamic rule system that not only extracts valuable experience,
    including skills and reflections, into different types of rules but also allows
    for continuously updating these rules in response to new situations. Additionally,
    error-prone details are explicitly described in the rules to improve the robustness
    of planning.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的工作ExpeL [ExpeL](#bib.bib32) 收集了LLM代理的轨迹并从中提取跨任务规则。然而，这些规则是离线提取的，使得ExpeL面临与Offline
    RL [OfflineRL](#bib.bib6) 相同的分布转移问题。同时，由于规则管理的简单性，其规则总是**纸上谈兵**，对于路径依赖问题帮助不大。在本文中，我们提出了一种名为AutoManual的新框架，旨在构建对环境的**有序理解**，以有效指导多任务规划。AutoManual利用动态规则系统，不仅提取包括技能和反思在内的宝贵经验为不同类型的规则，还允许根据新情况持续更新这些规则。此外，规则中明确描述了易出错的细节，以提高规划的鲁棒性。
- en: AutoManual follows two alternating iterative processes to optimize the rules.
    First, given the observation and task of an episode, the Planner agent utilizes
    currently discovered rules to write free-form code as an actionable plan. The
    interaction between the environment and the Planner will loop until the episode
    ends. Second, based on this trajectory, the Builder agent will update relevant
    rules through the rule system. This online updating mechanism can timely verify
    whether the rules have deviations and are applicable to the Planner. After rules
    optimization, the Formulator agent categorizes these rules according to their
    application scenarios and compiles a comprehensive manual in Markdown format.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: AutoManual遵循两个交替的迭代过程来优化规则。首先，给定一个回合的观察和任务，规划者代理利用当前发现的规则编写自由形式的代码作为可操作的计划。环境与规划者之间的交互将循环直到回合结束。其次，基于这个轨迹，构建器代理将通过规则系统更新相关规则。这种在线更新机制可以及时验证规则是否存在偏差以及是否适用于规划者。在规则优化之后，制定者代理将根据规则的应用场景对这些规则进行分类，并编制成Markdown格式的综合手册。
- en: 'The challenge lies in enabling the Builder to accurately extract applicable
    rules from a long trajectory, as LLM are prone to generating hallucinations. To
    address this, we employ a case-conditioned prompting strategy, which directs the
    Builder to focus on specific rules according to the case of the trajectory. For
    example, if errors occurred in a trajectory, the Builder is first asked to determine
    which caused the error: an unrecorded situation occurred, or the Planner failed
    to follow existing rules. Based on this answer, the Builder will be given corresponding
    prompts to update relevant rules.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 挑战在于使构建器能够从长轨迹中准确提取适用的规则，因为LLM容易产生虚假信息。为了解决这个问题，我们采用了**案例条件提示策略**，该策略指引构建器根据轨迹的案例专注于特定规则。例如，如果轨迹中出现错误，构建器首先被要求确定错误的原因：是否发生了未记录的情况，或者规划者未能遵循现有规则。根据这个答案，构建器将获得相应的提示，以更新相关规则。
- en: 'To summarize, our contributions are the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，我们的贡献如下：
- en: •
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: We adopt free-form code as the way for the Planner agent to interact with the
    environment. We introduce a structured rule system that allows the Builder agent
    to manage multiple types of knowledge from these code-based interactions.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们采用自由形式代码作为Planner代理与环境交互的方式。我们引入了一个结构化的规则系统，使Builder代理能够管理这些基于代码的交互中的多种知识。
- en: •
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: We propose an alternating process between the Planner and Builder agents to
    optimize rules in an online manner and resolve the Path Dependency problem. To
    improve readability, the Formulator agent is introduced to reorganize and formalize
    the rules into a Markdown manual.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们提出了一种Planner与Builder代理之间交替过程，以在线方式优化规则并解决路径依赖问题。为了提高可读性，引入了Formulator代理，将规则重新组织并正式化为Markdown手册。
- en: •
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: To facilitate rule management, we employ a case-conditioned prompting strategy,
    which guides the Builder to manage specific types of rules for different trajectory
    cases.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了便于规则管理，我们采用了基于案例的提示策略，该策略引导Builder管理不同轨迹案例的特定规则。
- en: •
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: Starting from a single demonstration, AutoManual can generate detailed instruction
    manuals for complex environments like ALFWorld and MiniWoB++. These manuals allow
    LLM agents to achieve remarkable success rates of 97.4% with GPT-4-turbo and 86.2%
    with GPT-3.5-turbo on ALFWorld, 98.3% with GPT-4-turbo and 92.7% with GPT-3.5-turbo
    on MiniWoB++.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从单一演示开始，AutoManual可以为复杂环境如ALFWorld和MiniWoB++生成详细的操作手册。这些手册允许LLM代理在ALFWorld中使用GPT-4-turbo取得97.4%的成功率，使用GPT-3.5-turbo取得86.2%的成功率，在MiniWoB++中使用GPT-4-turbo取得98.3%的成功率，使用GPT-3.5-turbo取得92.7%的成功率。
- en: 2 Related Works
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2 相关工作
- en: 2.1 LLM for Agents Planning
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.1 LLM用于代理规划
- en: Large Language Models (LLM) exhibit powerful reasoning and planning capabilities [GPT4](#bib.bib11)
    ; [ChatGPT](#bib.bib12) ; [CoT](#bib.bib26) ; [ReAct](#bib.bib30) ; [GITM](#bib.bib34)
    while requiring much fewer demonstrations than traditional learning methods. With
    this planning capability as the core, LLM agents are being developed for use in
    robotics [SayCan](#bib.bib1) ; [CodeAP](#bib.bib7) ; [ProgPrompt](#bib.bib18)
    ; [LLM-Planner](#bib.bib19) ; [ChatGPTEL](#bib.bib22) , game-playing [GenerativeAI](#bib.bib14)
    ; [Voyager](#bib.bib23) ; [DEPS](#bib.bib25) ; [GITM](#bib.bib34) , software development [MetaGPT](#bib.bib3)
    ; [ChatDev](#bib.bib15) , and other fields [Survey](#bib.bib28) . Prior studies [Reflexion](#bib.bib16)
    ; [AdaPlanner](#bib.bib20) ; [ReAct](#bib.bib30) allow agents to adjust actions
    or plans based on environmental feedback to improve planning performance. Given
    the powerful programming capability of LLM, several works, e.g., CodeAsPolicy [CodeAP](#bib.bib7)
    , ProgPrompt [ProgPrompt](#bib.bib18) and AdaPlanner [AdaPlanner](#bib.bib20)
    , propose to use Python code as the plan of LLM agents. This form of output can
    automatically respond to in-plan feedback and achieve better performance than
    the action and JSON format [AdaPlanner](#bib.bib20) ; [CodeAct](#bib.bib24) .
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 大型语言模型（LLM）展现了强大的推理和规划能力 [GPT4](#bib.bib11) ; [ChatGPT](#bib.bib12) ; [CoT](#bib.bib26)
    ; [ReAct](#bib.bib30) ; [GITM](#bib.bib34)，同时需要的演示远少于传统学习方法。以这种规划能力为核心，LLM代理正在被开发用于机器人技术
    [SayCan](#bib.bib1) ; [CodeAP](#bib.bib7) ; [ProgPrompt](#bib.bib18) ; [LLM-Planner](#bib.bib19)
    ; [ChatGPTEL](#bib.bib22)，游戏 [GenerativeAI](#bib.bib14) ; [Voyager](#bib.bib23)
    ; [DEPS](#bib.bib25) ; [GITM](#bib.bib34)，软件开发 [MetaGPT](#bib.bib3) ; [ChatDev](#bib.bib15)
    ，以及其他领域 [Survey](#bib.bib28)。之前的研究 [Reflexion](#bib.bib16) ; [AdaPlanner](#bib.bib20)
    ; [ReAct](#bib.bib30) 允许代理基于环境反馈调整行动或计划，以提高规划表现。鉴于LLM强大的编程能力，一些工作，例如CodeAsPolicy
    [CodeAP](#bib.bib7)，ProgPrompt [ProgPrompt](#bib.bib18) 和AdaPlanner [AdaPlanner](#bib.bib20)，提议使用Python代码作为LLM代理的计划。这种形式的输出可以自动响应计划中的反馈，并实现比动作和JSON格式
    [AdaPlanner](#bib.bib20) ; [CodeAct](#bib.bib24) 更好的表现。
- en: 2.2 Self-improvement of LLM Agents
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.2 LLM代理的自我提升
- en: Embodied agent research has long sought to enable agents to self-improve through
    interactive experiences. Unlike traditional learning-based agents that require
    extensive iterations for optimization, Reflexion [Reflexion](#bib.bib16) allows
    LLM agents to reflect on previous failures and quickly improve their plans. Some
    works [ToT](#bib.bib29) ; [AgentPro](#bib.bib31) ; [LATS](#bib.bib33) combine
    tree search with reflection to deliberately seek a better solution. Apart from
    failure experiences, prior studies [AdaPlanner](#bib.bib20) ; [Voyager](#bib.bib23)
    ; [GITM](#bib.bib34) utilize successful experiences as skills to assist future
    planning. Voyager [Voyager](#bib.bib23) stores generated and verified programs
    into the skill library as a new skill for more complex tasks. AdaPlanner [AdaPlanner](#bib.bib20)
    also discovers and archives successful programs into skill memory for future similar
    tasks. However, these methods stop updating skills after storing them, which inevitably
    leads to the Path Dependency problem.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 具身代理研究长期以来致力于通过互动体验使代理自我改进。与传统的基于学习的代理需要大量迭代进行优化不同，Reflexion [Reflexion](#bib.bib16)
    允许 LLM 代理反思之前的失败，并迅速改进其计划。一些工作 [ToT](#bib.bib29)；[AgentPro](#bib.bib31)；[LATS](#bib.bib33)
    将树搜索与反思结合，刻意寻找更好的解决方案。除了失败经验，先前的研究 [AdaPlanner](#bib.bib20)；[Voyager](#bib.bib23)；[GITM](#bib.bib34)
    还利用成功经验作为技能来辅助未来的规划。Voyager [Voyager](#bib.bib23) 将生成和验证的程序存储到技能库中，作为处理更复杂任务的新技能。AdaPlanner [AdaPlanner](#bib.bib20)
    也发现并将成功程序归档到技能记忆中，用于未来类似的任务。然而，这些方法在存储技能后停止更新，这不可避免地导致了路径依赖问题。
- en: 2.3 Memory Management of LLM Agents
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.3 LLM 代理的内存管理
- en: For LLM agents, learning from past experiences can also be viewed as managing
    the episodic memory [Reflexion](#bib.bib16) . CLIN [CLIN](#bib.bib9) proposes
    to keep updating a memory centered on causal abstractions for new trials. Retrieval-Augmented
    Planning (RAP) [RAP](#bib.bib4) retrieves past experiences corresponding to the
    current situation. MemGPT [MemGPT](#bib.bib13) allows LLM to select content to
    retain in working memory and to search for information in long-term memory. Generative
    Agents [GenerativeAI](#bib.bib14) retrieve memories based on recency, importance,
    and relevance to the current situation. Generative Agents also generate tree-structured
    reflections, but they focus on a continuous scenario rather than task-oriented
    rules.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 LLM 代理来说，从过去的经验中学习也可以被视为管理情节记忆 [Reflexion](#bib.bib16)。CLIN [CLIN](#bib.bib9)
    提议保持一个以因果抽象为中心的内存，用于新的尝试。检索增强规划（RAP） [RAP](#bib.bib4) 检索与当前情况相对应的过去经验。MemGPT [MemGPT](#bib.bib13)
    允许 LLM 选择要保留在工作记忆中的内容，并在长期记忆中搜索信息。生成代理 [GenerativeAI](#bib.bib14) 根据近期性、重要性和与当前情况的相关性来检索记忆。生成代理还生成树状结构的反思，但它们关注的是连续场景，而不是以任务为导向的规则。
- en: 2.4 LLM for Rule Discovery
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.4 LLM 用于规则发现
- en: Several recent works also investigate the rule discovery capabilities of LLM.
    Zhu et al. [LLMLR](#bib.bib35) propose Hypotheses-to-Theories (HtT), enabling
    LLM to induce and deduce rules for basic reasoning tasks. For LLM agents, ExpeL [ExpeL](#bib.bib32)
    gathers the trajectories of Reflexion agents and extracts cross-task rules from
    them. Furthermore, AutoGuide [AutoGuide](#bib.bib2) generates state-aware rules
    and retrieves rules relevant to the test-time state. Unlike ExpeL and AutoGuide,
    which extract rules from offline experiences, we update rules in an online manner,
    verifying their reliability and applicability. For more discussion of differences,
    refer to Appendix C.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一些近期的工作也调查了 LLM 的规则发现能力。Zhu 等人 [LLMLR](#bib.bib35) 提出了假设到理论（HtT），使 LLM 能够诱导和推导基本推理任务的规则。对于
    LLM 代理，ExpeL [ExpeL](#bib.bib32) 收集 Reflexion 代理的轨迹并从中提取跨任务规则。此外，AutoGuide [AutoGuide](#bib.bib2)
    生成状态感知规则，并检索与测试时状态相关的规则。与 ExpeL 和 AutoGuide 提取离线经验中的规则不同，我们以在线方式更新规则，验证其可靠性和适用性。有关差异的更多讨论，请参见附录
    C。
- en: 3 Methods
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3 方法
- en: 3.1 AutoManual Overview
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.1 AutoManual 概述
- en: 'Our AutoManual framework, shown in Fig [1](#S3.F1 "Figure 1 ‣ 3.1 AutoManual
    Overview ‣ 3 Methods ‣ AutoManual: Generating Instruction Manuals by LLM Agents
    via Interactive Environmental Learning"), consists of three main stages. Building
    stage: The Planner agent and Builder agent collaborate to build rules from the
    interactive environment. The Consolidator agent merges or deletes redundant rules
    when the rules exceed the maximum rule number. Formulating stage: The Formulator
    agent categorizes the rules, summarizes the key points, and formulates them into
    a manual in Markdown form. Testing stage: Based on the generated manual, a test-time
    Planner agent will be evaluated through test tasks and scenarios.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 AutoManual 框架，如图 [1](#S3.F1 "图 1 ‣ 3.1 AutoManual 概述 ‣ 3 方法 ‣ AutoManual：通过互动环境学习生成说明手册的
    LLM 代理") 所示，包含三个主要阶段。构建阶段：规划者代理和构建者代理协作从互动环境中构建规则。当规则超过最大规则数时，合并者代理合并或删除冗余规则。制定阶段：制定者代理对规则进行分类，总结要点，并将其编制成
    Markdown 形式的手册。测试阶段：根据生成的手册，测试时的规划者代理将通过测试任务和场景进行评估。
- en: 'Formally, an Interactive Environment can be modeled as a Partially Observable
    Markov Decision Process (POMDP): $(\mathcal{S},\mathcal{A},\mathcal{T},\mathcal{G},\mathcal{O})$
    indicating the failure or success of the task will be returned.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 从形式上讲，互动环境可以建模为一个部分可观测马尔可夫决策过程（POMDP）：$(\mathcal{S},\mathcal{A},\mathcal{T},\mathcal{G},\mathcal{O})$
    表示任务的失败或成功将被返回。
- en: '![Refer to caption](img/b136eb22941f2725a043ce2930084e59.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![参考标题](img/b136eb22941f2725a043ce2930084e59.png)'
- en: 'Figure 1: AutoMaual Overview. AutoMaual operates in three stages: (1) Building
    Stage: The Planner agent interacts with the environment by coding actionable plans.
    After receiving the current trajectory of the Planner, the Builder agent manages
    rules through the online rule system. (2) Formulating Stage: The Formulator agent
    formulates the resulting rules into a Markdown manual. (3) Testing Stage: A test-time
    Planner agent utilizes the manual to complete testing tasks.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：AutoMaual 概述。AutoMaual 运营分为三个阶段：（1）构建阶段：规划者代理通过编码可操作计划与环境互动。在接收到规划者的当前轨迹后，构建者代理通过在线规则系统管理规则。（2）制定阶段：制定者代理将结果规则编制成
    Markdown 手册。（3）测试阶段：测试时的规划者代理利用手册完成测试任务。
- en: 'We approach the learning of environmental rules as an optimization problem:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将环境规则的学习视为一个优化问题：
- en: '|  | $\max_{\Theta}E_{s_{0},g}E_{\rho(\cdot&#124;\Theta)}r(\tau_{\rho})$ |  |
    (1) |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '|  | $\max_{\Theta}E_{s_{0},g}E_{\rho(\cdot&#124;\Theta)}r(\tau_{\rho})$ |  |
    (1) |'
- en: where $\Theta$. Classic policy gradient methods [REINFORCE](#bib.bib27) solve
    such problems through stochastic gradient ascent, i.e., executing the current
    policy to obtain the episodic reward and back-propagating gradients to update
    the parameters.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 $\Theta$。经典的策略梯度方法 [REINFORCE](#bib.bib27) 通过随机梯度上升解决这类问题，即执行当前策略以获得情景奖励，并通过反向传播梯度来更新参数。
- en: 'Inspired by this online reinforcement learning paradigm, we follow two alternative
    processes to optimize the rules $\Theta$ based on this trajectory. Compared to
    traditional parameter optimization, sample-inefficient gradient ascent is replaced
    by text-based rule management. We design a well-structured rule system described
    in Section [3.3](#S3.SS3 "3.3 Builder and Consolidator Agents for Rule Management
    ‣ 3 Methods ‣ AutoManual: Generating Instruction Manuals by LLM Agents via Interactive
    Environmental Learning") to ensure the rule updating contributes to rewards. Additionally,
    to limit the role of human expertise, we only provide a simple example demonstrating
    the output format to agents. We derive initial rules from this example as the
    starting point of the optimization.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 受到这种在线强化学习范式的启发，我们遵循两种替代过程来优化基于这一轨迹的规则 $\Theta$。与传统的参数优化相比，样本低效的梯度上升被基于文本的规则管理所取代。我们设计了一个结构良好的规则系统，详见第
    [3.3](#S3.SS3 "3.3 构建者和合并者代理的规则管理 ‣ 3 方法 ‣ AutoManual：通过互动环境学习生成说明手册的 LLM 代理")
    节，以确保规则更新对奖励的贡献。此外，为了限制人类专业知识的角色，我们仅提供一个简单的示例来展示输出格式给代理。我们从该示例中得出初步规则，作为优化的起点。
- en: 3.2 Planner Agent for Interactive Planning
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.2 互动规划的规划者代理
- en: As demonstrated by the success of Voyager [Voyager](#bib.bib23) and AdaPlanner [AdaPlanner](#bib.bib20)
    , code-based planning can leverage the powerful programming capability of LLM
    and automatically react to in-plan feedback. Voyager and AdaPlanner output and
    refine a complete solution function for the task, which is potentially reusable.
    However, this function-form output is difficult to adjust in response to environmental
    feedback, as it requires maintaining the integrity of the plan throughout.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 正如[Voyager](#bib.bib23)和[AdaPlanner](#bib.bib20)的成功所示，基于代码的规划可以利用LLM的强大编程能力，并自动响应计划内的反馈。Voyager和AdaPlanner输出并优化任务的完整解决方案函数，这些函数可能是可重用的。然而，这种函数形式的输出在响应环境反馈时难以调整，因为它需要在整个过程中保持计划的完整性。
- en: 'Our Planner Agent outputs free-form code as its plan, which aligns more with
    the natural programming capabilities of LLM [CodeAP](#bib.bib7) ; [ChatGPTFR](#bib.bib21)
    . This form simplifies planning by only generating code necessary for the current
    environmental situation and feedback without the overhead of integrating previously
    executed code. As shown in Fig [2](#S3.F2 "Figure 2 ‣ 3.2 Planner Agent for Interactive
    Planning ‣ 3 Methods ‣ AutoManual: Generating Instruction Manuals by LLM Agents
    via Interactive Environmental Learning"), at the start of a new episode, the Planner
    receives system prompts, current rules $\Theta$, response guidelines, and a simple
    example (detailed in Appendix H). The output of the Planner is structured into
    four segments during each cycle:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '我们的规划者代理输出自由形式的代码作为其计划，这更符合LLM的自然编程能力[CodeAP](#bib.bib7)；[ChatGPTFR](#bib.bib21)。这种形式通过仅生成当前环境情况和反馈所需的代码，简化了规划，而不必整合先前执行的代码。正如图[2](#S3.F2
    "Figure 2 ‣ 3.2 Planner Agent for Interactive Planning ‣ 3 Methods ‣ AutoManual:
    Generating Instruction Manuals by LLM Agents via Interactive Environmental Learning")所示，在新集数开始时，规划者接收到系统提示、当前规则$\Theta$、响应指南和一个简单的示例（详见附录H）。规划者的输出在每个周期中结构化为四个部分：'
- en: '1.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: 'Analysis: The understanding of the current situation and reflection on previous
    errors if exist.'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 分析：对当前情况的理解以及对可能存在的以前错误的反思。
- en: '2.'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: 'Related Rules: Rules (along with their IDs) that need to be considered in this
    situation.'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 相关规则：在这种情况下需要考虑的规则（以及它们的ID）。
- en: '3.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: 'Overall Plan: The general plan to complete the task.'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 总体计划：完成任务的总体计划。
- en: '4.'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: 'Free-Form Code: A block of Python code divided into steps. The Planner is encouraged
    to define helpful functions in the code, which might be reusable in similar scenarios.'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自由形式代码：一个分步骤的Python代码块。规划者被鼓励在代码中定义有用的函数，这些函数可能在类似场景中可重用。
- en: We denote this response of the Planner as $[\textit{thought}_{t},\textit{code}_{t}]$,
    which informs the subsequent output cycle. This process iterates until the episode
    ends or a response limit is reached.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将规划者的响应表示为$[\textit{thought}_{t},\textit{code}_{t}]$，这会通知后续的输出周期。这个过程会迭代，直到集数结束或达到响应限制。
- en: 'As shown in Fig [2](#S3.F2 "Figure 2 ‣ 3.2 Planner Agent for Interactive Planning
    ‣ 3 Methods ‣ AutoManual: Generating Instruction Manuals by LLM Agents via Interactive
    Environmental Learning"), according to the episodic reward, we categorize the
    result into Direct Success, Indirect Success (errors occurred but were solved
    later), and Failure. In the case of Direct or Indirect Success, the Planner will
    be prompted to organize its previous code into a code block. For Indirect Success,
    it additionally summarizes the mistakes and misunderstandings that cause errors.
    For the Failure case, the Planner will be prompted to reflect on the reason for
    the failure carefully, suggest reasonable corrections, and specify the code segment
    that caused the error. We denote this response of the Planner as conclusion. Finally,
    we obtain a trajectory of the Planner:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '如图[2](#S3.F2 "Figure 2 ‣ 3.2 Planner Agent for Interactive Planning ‣ 3 Methods
    ‣ AutoManual: Generating Instruction Manuals by LLM Agents via Interactive Environmental
    Learning")所示，根据集数奖励，我们将结果分为直接成功、间接成功（发生错误但后来解决）和失败。在直接或间接成功的情况下，规划者将被提示将之前的代码整理成代码块。对于间接成功，它还总结了导致错误的错误和误解。对于失败情况，规划者将被提示仔细反思失败的原因，提出合理的修正建议，并指定导致错误的代码段。我们将规划者的这一响应称为结论。最终，我们获得规划者的轨迹：'
- en: '|  | $\tau_{\rho}=(o_{0},g,[\textit{thought}_{1},\textit{code}_{1}],c_{1},...,[\textit{thought}_{T},\textit{code}_{T}],c_{T},\textit{conclusion})$
    |  | (2) |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '|  | $\tau_{\rho}=(o_{0},g,[\textit{thought}_{1},\textit{code}_{1}],c_{1},...,[\textit{thought}_{T},\textit{code}_{T}],c_{T},\textit{conclusion})$
    |  | (2) |'
- en: '![Refer to caption](img/1d3beef8f16f6e6880e658fc3eb3264c.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![参见标题](img/1d3beef8f16f6e6880e658fc3eb3264c.png)'
- en: 'Figure 2: The Planner Trajectory. Given the current task and rules, the Planner
    will interact with the environment through free-form code. Based on the trajectory
    result, the Planner will generate a corresponding conclusion, which will be saved
    in the skill or reflection library.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2：规划器轨迹。给定当前任务和规则，规划器将通过自由形式的代码与环境进行交互。根据轨迹结果，规划器将生成相应的结论，并将其保存在技能库或反思库中。
- en: 'Skill Library and Reflection Library: Apart from rules, we also manage and
    transmit conclusions from previous episodes, which provide essential details for
    generating planning code. In the case of Direct or Indirect Success, we save the
    code block in conclusion as a skill for that task type ¹¹1All tasks in ALFWorld
    are divided into 6 task types, e.g., pick_heat_then_place, look_at_obj_in_light.
    We only store one skill for each task type, which will be replaced with a new
    skill. into the skill library [AdaPlanner](#bib.bib20) ; [Voyager](#bib.bib23)
    . In the Failure case, we save its conclusion as a reflection for that task type
    into the reflection library. When a new task comes, the code block of the most
    similar task is retrieved from the skill library. If there is no existing skill
    for the new task type, the reflection for that task type will be returned. As
    mentioned in the Introduction, compared with rules, these skills and reflections
    contain more programming details but are less generalizable to new scenarios.
    Considering this Path Dependence problem, we prompt the Planner that the rules
    should be prioritized.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 技能库和反思库：除了规则之外，我们还管理和传递之前阶段的结论，这些结论为生成规划代码提供了重要细节。在直接或间接成功的情况下，我们将结论中的代码块作为该任务类型的技能保存到技能库中 ¹¹1ALFWorld中的所有任务被分为6种任务类型，例如pick_heat_then_place，look_at_obj_in_light。我们仅为每种任务类型存储一个技能，该技能会被新的技能替换。 [AdaPlanner](#bib.bib20)
    ; [Voyager](#bib.bib23) 。在失败的情况下，我们将其结论作为该任务类型的反思保存到反思库中。当新任务出现时，将从技能库中检索与之最相似的任务的代码块。如果没有现有的技能用于新任务类型，则返回该任务类型的反思。如引言中所述，相比规则，这些技能和反思包含更多的编程细节，但对新场景的适应性较差。考虑到这个路径依赖问题，我们提示规划器规则应优先考虑。
- en: 'Cooperation between Agents: In our framework, rule management is not solely
    the responsibility of the Builder; the Planner also plays a critical role by explicitly
    identifying the rules it engages in its response. This cooperation is facilitated
    by including the Planner’s thoughts within the trajectory $\tau$, which is provided
    to the Builder. This synergy enhances the identification and adjustment of problematic
    rules. In addition, conclusion from the Planner contains the detailed success
    process or reflections on errors, which further assist the Builder in managing
    corresponding types of rules.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 代理之间的合作：在我们的框架中，规则管理不仅仅是构建者的责任；规划器也通过明确识别其响应中所涉及的规则发挥关键作用。这种合作通过将规划器的思考包含在提供给构建者的轨迹
    $\tau$ 中得以实现。这种协同作用增强了问题规则的识别和调整。此外，规划器的结论包含详细的成功过程或错误反思，这进一步帮助构建者管理相应类型的规则。
- en: 3.3 Builder and Consolidator Agents for Rule Management
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.3 构建者和整合者代理的规则管理
- en: Upon receiving the trajectory $\tau_{\rho}$, the Builder has to manage the rules
    through the rule system.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在接收到轨迹 $\tau_{\rho}$ 后，构建者必须通过规则系统进行规则管理。
- en: '![Refer to caption](img/5fa79f403c8e1604eda8608b2a3bff29.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![参见标题](img/5fa79f403c8e1604eda8608b2a3bff29.png)'
- en: 'Figure 3: Case-Conditioned Prompts. Given the current trajectory, the Builder
    classifies the cause of the major error as "Imperfect Rules" or "Imperfect Agents".
    Then, the Builder will get the base prompt and corresponding prompt to guide its
    rule management.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3：案例条件提示。根据当前轨迹，构建者将主要错误的原因分类为“规则不完善”或“代理不完善”。然后，构建者将获取基础提示和相应的提示，以指导其规则管理。
- en: 'Rule System: We intuitively identify rules as the kinds of knowledge that help
    task completion, including the analyses of the observed phenomenon $T(o^{\prime}|o,a)$,
    i.e., the success process or the occurred error. Therefore, unlike ExpeL [ExpeL](#bib.bib32)
    and AutoGuide [AutoGuide](#bib.bib2) , which derive general insight from the trajectory,
    our system categorizes six specific rule types to extract environmental knowledge
    that targets different aspects of the trajectory. Furthermore, each rule in our
    system is enhanced with an "Example" attribute to illustrate its application and
    important details, making it grounded and well-understood. Specifically, each
    rule in the rule system has these four attributes:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 规则系统：我们直观地将规则识别为帮助任务完成的知识，包括对观察到的现象$T(o^{\prime}|o,a)$的分析，即成功过程或发生的错误。因此，与ExpeL[ExpeL](#bib.bib32)和AutoGuide[AutoGuide](#bib.bib2)不同，我们的系统将六种具体的规则类型分类，以提取针对轨迹不同方面的环境知识。此外，我们系统中的每个规则都通过“示例”属性进行增强，以说明其应用和重要细节，使其具体且易于理解。具体而言，规则系统中的每个规则具有以下四个属性：
- en: '1.'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: 'Rule Type: The type of the rule, options include “Special Phenomenon”, “Special
    Mechanism”, “Success Process”, “Useful Helper Method”, “Corrected Error” and “Unsolved
    Error”;'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 规则类型：规则的类型，选项包括“特殊现象”、“特殊机制”、“成功过程”、“有用的辅助方法”、“更正错误”和“未解决的错误”；
- en: '2.'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: 'Rule Content: A description of the rule, beginning with the scope of its applicable
    scenarios;'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 规则内容：对规则的描述，从适用场景的范围开始；
- en: '3.'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: 'Example: An example or code from the trajectory demonstrates this rule, where
    additional remarks, e.g. error-prone details, can also be added to it;'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例：来自轨迹的示例或代码展示了此规则，可以添加额外的备注，例如易出错的细节；
- en: '4.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: 'Validation Logs: Logs that track the rule’s application and updates, including
    episode and rule IDs that trace the rule’s evolution, serving as a reference for
    the Builder and Consolidator.'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 验证日志：跟踪规则应用和更新的日志，包括追踪规则演变的剧集和规则ID，为构建器和整合者提供参考。
- en: 'The Builder manages the rules through the following functions of the rule system:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 构建器通过规则系统的以下功能管理规则：
- en: •
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'write_rule(**rule_attributes): Write down a new rule with its four attributes.'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'write_rule(**rule_attributes): 记录一个新规则及其四个属性。'
- en: •
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'update_rule(rule_id, **rule_attributes): Rewrite the attributes of a existing
    rule.'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'update_rule(rule_id, **rule_attributes): 重写现有规则的属性。'
- en: •
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'stop_generating(): When the trajectory is not needed or insufficient to derive
    any more new rules, the function should be called.'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'stop_generating(): 当轨迹不再需要或不足以推导出更多新规则时，应调用此函数。'
- en: Similar to hierarchical reflections in Generative Agents [GenerativeAI](#bib.bib14)
    , we allow the Builder to utilize existing rules to induce more general or deeper
    rules and record their dependence in Rule Content or Validation Logs, more discussed
    in Appendix D.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于生成代理中的分层反射[GenerativeAI](#bib.bib14)，我们允许构建器利用现有规则诱导出更一般或更深层的规则，并记录它们在规则内容或验证日志中的依赖关系，更多内容请参见附录D。
- en: 'Case-Conditioned Prompting: To mitigate the risk of erroneous rule creation,
    such as deriving rules of success from a failed trajectory, we employ case-conditioned
    prompts. As illustrated in Fig [3](#S3.F3 "Figure 3 ‣ 3.3 Builder and Consolidator
    Agents for Rule Management ‣ 3 Methods ‣ AutoManual: Generating Instruction Manuals
    by LLM Agents via Interactive Environmental Learning"), the Builder first analyzes
    and determines if the major errors stem from “Imperfect Rules” or “Imperfect Agent”.
    Based on this analysis and the trajectory results, targeted prompts guide the
    Builder in rule management ²²2Notice: These prompts for the Builder are environment-independent
    and shared across all environments.. For example, in a case of indirect success
    due to imperfect rules (Case $2$), the prompts will guide the Builder to extract
    or update the success process, helper methods, and error reflections in corresponding
    rule types. Finally, the Builder responds with the potential rules detailing their
    relation with existing rules and uses the functions of the rule system to manage
    rules.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '案例条件提示：为了减少如从失败轨迹中推导成功规则的错误规则创建的风险，我们采用案例条件提示。如图 [3](#S3.F3 "Figure 3 ‣ 3.3
    Builder and Consolidator Agents for Rule Management ‣ 3 Methods ‣ AutoManual:
    Generating Instruction Manuals by LLM Agents via Interactive Environmental Learning")
    所示，Builder 首先分析并确定主要错误是否源于“规则不完善”或“代理不完善”。基于这种分析和轨迹结果，目标提示指导 Builder 进行规则管理²²2Notice:
    这些针对 Builder 的提示与环境无关，并在所有环境中共享。例如，在由于规则不完善导致的间接成功的案例（案例 $2$）中，提示将引导 Builder 提取或更新成功过程、辅助方法和相应规则类型中的错误反思。最后，Builder
    回应潜在规则，详细说明它们与现有规则的关系，并使用规则系统的功能来管理规则。'
- en: 'Rule Consolidation: When the number of rules in the rule system exceeds $N_{max}$,
    the Consolidator agent steps in to consolidate related rules and delete redundant
    rules. It uses three functions of the rule system: get_trajectory(episode_id),
    update_rule(rule_id, **rule_attributes) and delete_rule(rule_id). Given the current
    rules, the Consolidator identifies potentially relevant or overlapped rules, uses
    get_trajectory function to investigate the trajectories they depend on, and finally
    calls the remaining functions to manage the rules. During the management, the
    Consolidator ensures that consolidation retains details of rules and examples.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 规则整合：当规则系统中的规则数量超过 $N_{max}$ 时，Consolidator 代理介入以整合相关规则并删除冗余规则。它使用规则系统的三个功能：get_trajectory(episode_id)、update_rule(rule_id,
    **rule_attributes**) 和 delete_rule(rule_id)。根据当前规则，Consolidator 识别潜在的相关或重叠规则，使用
    get_trajectory 函数调查它们依赖的轨迹，最后调用其余函数来管理规则。在管理过程中，Consolidator 确保整合保留规则和示例的细节。
- en: 3.4 Manual Formulation
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.4 手动制定
- en: 'Once the building stage is complete, we can obtain a set of rules targeted
    to different situations. Although these rules have been validated through online
    optimization to ensure their applicability, our next goal is to enhance their
    readability and global understanding. To achieve this, we introduce the Formulator
    agent, designed to transform these rules into a user-friendly manual, like a teacher
    conveys complex subjects through easily digestible lessons. As depicted in Fig [1](#S3.F1
    "Figure 1 ‣ 3.1 AutoManual Overview ‣ 3 Methods ‣ AutoManual: Generating Instruction
    Manuals by LLM Agents via Interactive Environmental Learning"), the Formulator
    begins by categorizing all rules based on their target scenarios. This categorization
    aids in structuring the manual and ensures that related rules are discussed together,
    which enhances the logical flow and accessibility of the information. For each
    category, the Formulator drafts an introduction, summarizing the rules it contains
    and highlighting the key points and overall principles that govern the specific
    scenarios. Finally, the Formulator compiles the rules and their introductions
    into a comprehensive manual formatted in Markdown.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '一旦构建阶段完成，我们可以获得一组针对不同情况的规则。虽然这些规则已经通过在线优化进行了验证，以确保其适用性，我们的下一个目标是提高其可读性和全球理解。为此，我们引入了
    Formulator 代理，旨在将这些规则转换为用户友好的手册，就像教师通过易于理解的课程传达复杂的主题一样。如图 [1](#S3.F1 "Figure 1
    ‣ 3.1 AutoManual Overview ‣ 3 Methods ‣ AutoManual: Generating Instruction Manuals
    by LLM Agents via Interactive Environmental Learning") 所示，Formulator 首先根据目标场景对所有规则进行分类。这种分类有助于结构化手册，并确保相关规则一起讨论，从而增强信息的逻辑流畅性和可访问性。对于每个类别，Formulator
    起草一个介绍，总结包含的规则，并突出特定场景的关键点和总体原则。最后，Formulator 将规则及其介绍编纂成一个综合手册，并以 Markdown 格式进行排版。'
- en: 4 Experiments
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4 实验
- en: 'In line with AdaPlanner [AdaPlanner](#bib.bib20) , we conduct the experiments
    on two interactive environments: (1) ALFWorld [ALFWorld](#bib.bib17) is a text-based
    virtual household environment containing six distinct task types. We run the building
    stage on 36 tasks (6 tasks for each task type) sampled from the training set of
    ALFWorld, and each task is run only once. Following previous works [Reflexion](#bib.bib16)
    ; [AdaPlanner](#bib.bib20) ; [ReAct](#bib.bib30) , we run the testing stage on
    the validation unseen set containing 134 tasks across these six types. (2) MiniWoB++ [MiniWoB](#bib.bib8)
    is a simulated web environment where agents complete diverse tasks on the Internet
    by performing keyboard and mouse actions. Prior works [RCI](#bib.bib5) ; [AdaPlanner](#bib.bib20)
    selects 9 task types with environmental feedback and 44 task types without feedback
    from MiniWoB++ tasks. We perform experiments on 9 task types with feedback and
    all 53 task types. At each stage, we randomly sample 6 tasks for each task type.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 AdaPlanner [AdaPlanner](#bib.bib20) 的方法，我们在两个互动环境中进行实验：（1）ALFWorld [ALFWorld](#bib.bib17)
    是一个基于文本的虚拟家庭环境，包含六种不同的任务类型。我们在 ALFWorld 的训练集上从 36 个任务（每种任务类型 6 个任务）中抽取任务进行构建阶段的实验，每个任务只运行一次。按照之前的工作 [Reflexion](#bib.bib16)
    ; [AdaPlanner](#bib.bib20) ; [ReAct](#bib.bib30) ，我们在包含这六种任务类型的 134 个任务的验证集上进行测试阶段的实验。（2）MiniWoB++ [MiniWoB](#bib.bib8)
    是一个模拟的网络环境，代理通过执行键盘和鼠标操作来完成互联网上的多样任务。之前的工作 [RCI](#bib.bib5) ; [AdaPlanner](#bib.bib20)
    从 MiniWoB++ 任务中选择了 9 种带有环境反馈的任务类型和 44 种没有反馈的任务类型。我们对 9 种有反馈的任务类型和所有 53 种任务类型进行了实验。在每个阶段，我们随机抽取每种任务类型的
    6 个任务。
- en: During building and formulating stages, we use GPT-4-turbo (gpt-4-1106-preview)
    as the LLM for all agents. At the testing stage, we equip the Planner agent with
    GPT-4-turbo or GPT-3.5-turbo (gpt-3.5-turbo-1106), which can evaluate the effect
    of the generated manual on relatively smaller LLM. More details of the implementation
    and prompts for AutoManual can be found in the Appendix.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建和制定阶段，我们使用 GPT-4-turbo (gpt-4-1106-preview) 作为所有代理的 LLM。在测试阶段，我们为 Planner
    代理配备了 GPT-4-turbo 或 GPT-3.5-turbo (gpt-3.5-turbo-1106)，这可以评估生成的手册在相对较小的 LLM 上的效果。有关
    AutoManual 的实施和提示的更多细节，请参见附录。
- en: 'Compared Methods: In the experiments, we compare AutoManual with the following
    methods of LLM Agent: (1) ReAct [ReAct](#bib.bib30) prompts LLM to generate the
    reasoning trace using CoT [CoT](#bib.bib26) and next-step action; (2) Reflexion [Reflexion](#bib.bib16)
    agents generate reflection on task feedback signals, which is saved in the memory
    for subsequent trials; (3) ExpeL [ExpeL](#bib.bib32) extract insights and skills
    from the offline trajectories of Reflexion agents; (4) RCI [RCI](#bib.bib5) agent
    recursively criticizes and improves its output for solving computer tasks; (5)
    AdaPlanner [AdaPlanner](#bib.bib20) allows the LLM agent to generate and adaptively
    refine a code-style plan; (6) Planner+Lib. represents our Planner agent equipped
    with skill and reflection libraries (§[3.2](#S3.SS2 "3.2 Planner Agent for Interactive
    Planning ‣ 3 Methods ‣ AutoManual: Generating Instruction Manuals by LLM Agents
    via Interactive Environmental Learning")) during building and testing stages without
    any rules. We re-implement prior methods with GPT-3.5 and GPT-4 versions the same
    as ours for fair comparisons.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '比较方法：在实验中，我们将 AutoManual 与以下 LLM 代理的方法进行比较：（1）ReAct [ReAct](#bib.bib30) 提示
    LLM 生成基于 CoT [CoT](#bib.bib26) 的推理过程和下一步行动；（2）Reflexion [Reflexion](#bib.bib16)
    代理生成对任务反馈信号的反思，这些反思被保存在内存中以备后续试验使用；（3）ExpeL [ExpeL](#bib.bib32) 从 Reflexion 代理的离线轨迹中提取见解和技能；（4）RCI [RCI](#bib.bib5)
    代理递归地批评和改进其输出以解决计算机任务；（5）AdaPlanner [AdaPlanner](#bib.bib20) 允许 LLM 代理生成并自适应地优化代码风格计划；（6）Planner+Lib.
    代表我们配备了技能和反思库 (§[3.2](#S3.SS2 "3.2 Planner Agent for Interactive Planning ‣ 3
    Methods ‣ AutoManual: Generating Instruction Manuals by LLM Agents via Interactive
    Environmental Learning")) 的 Planner 代理，在构建和测试阶段没有任何规则。我们用 GPT-3.5 和 GPT-4 版本重新实现了之前的方法，以便进行公平比较。'
- en: ReAct, Reflexion, and ExpeL provide LLM agents with $12$ times in response to
    the environmental feedback. To reduce randomness, we performed each experiment
    three times and reported the average.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: ReAct、Reflexion 和 ExpeL 提供了 $12$ 次对环境反馈的响应。为了减少随机性，我们每次实验进行了三次，并报告了平均值。
- en: 4.1 Main Results
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.1 主要结果
- en: 'Main Results on ALFWorld: As shown in Tab. [1](#S4.T1 "Table 1 ‣ 4.1 Main Results
    ‣ 4 Experiments ‣ AutoManual: Generating Instruction Manuals by LLM Agents via
    Interactive Environmental Learning"), AutoManual significantly outperforms the
    existing methods, evidenced by overall success rates of 86.2% when using GPT-3.5-turbo
    for the testing stage and 97.4% when using GPT-4-turbo. Noticeably, AutoManual
    requires little expert prior knowledge about the environment and is only provided
    with one human example to achieve excellent results. In comparison, the rules
    induced by ExpeL hardly improve performance, as its offline trajectories are composed
    of individual actions rather than code. We find the performance of AdaPlanner
    is lower than reported. One reason is that AdaPlanner requires LLM to output specific
    formats to complete its function-form code, which is difficult for creative LLM,
    e.g., GPT-4-turbo. In addition, AdaPlanner and Planner+Lib. are inferior to AutoManual
    because they only store successful paths as skills and inevitably face the Path
    Dependence problem. Especially, tasks in Put Two have various scenarios, such
    as “two objects can occur at the same receptacle or different receptacles”, that
    require different processes to solve (Appendix G shows an example). Furthermore,
    Planner+Lib. often does not mark error-prone points in its skills, such as “target
    objects may appear in unconventional locations”.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 'ALFWorld 的主要结果: 如表 [1](#S4.T1 "表 1 ‣ 4.1 主要结果 ‣ 4 实验 ‣ AutoManual: 通过交互式环境学习生成指令手册")所示，AutoManual
    显著优于现有方法，使用 GPT-3.5-turbo 进行测试阶段的整体成功率为 86.2%，使用 GPT-4-turbo 为 97.4%。值得注意的是，AutoManual
    对环境的专家先验知识要求很少，仅提供一个人类示例就能取得优异的结果。相比之下，ExpeL 引发的规则几乎未能提升性能，因为其离线轨迹由个别动作组成，而非代码。我们发现
    AdaPlanner 的表现低于报告的水平。一个原因是 AdaPlanner 需要 LLM 输出特定格式来完成其功能形式代码，这对创造性 LLM（例如 GPT-4-turbo）而言是困难的。此外，AdaPlanner
    和 Planner+Lib. 不如 AutoManual，因为它们仅将成功路径存储为技能，并不可避免地面临路径依赖问题。特别是，Put Two 任务有各种场景，例如“两个物体可以出现在同一个容器或不同的容器中”，这要求采用不同的过程解决（附录
    G 显示了一个示例）。此外，Planner+Lib. 常常不会标记技能中的易错点，例如“目标物体可能出现在非常规位置”。'
- en: 'Table 1: Success rate (%) of LLM agent methods on ALFWorld test tasks. For
    each method, the number of all human examples used is listed. “Planner+Lib.” represents
    only using skill&reflection library during the building and testing stages. We
    run all experiments 3 times and show the average.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '表 1: LLM 代理方法在 ALFWorld 测试任务上的成功率（%）。每种方法使用的所有人类示例数量列出。“Planner+Lib.” 表示在构建和测试阶段仅使用技能和反思库。我们运行所有实验
    3 次，并显示平均值。'
- en: '| Methods | Examples | Put | Clean | Heat | Cool | Examine | Put two | ALL
    |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 示例 | 放置 | 清理 | 加热 | 冷却 | 检查 | 放置两个 | 全部 |'
- en: '| Testing LLM: GPT-3.5-turbo |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| 测试 LLM: GPT-3.5-turbo |'
- en: '| ReAct [ReAct](#bib.bib30) | 12 | 75.0 | 24.7 | 37.7 | 36.4 | 44.4 | 11.8
    | 41.9 |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| ReAct [ReAct](#bib.bib30) | 12 | 75.0 | 24.7 | 37.7 | 36.4 | 44.4 | 11.8
    | 41.9 |'
- en: '| Reflexion [Reflexion](#bib.bib16) | 12 | 87.5 | 44.1 | 73.9 | 50.0 | 61.1
    | 35.3 | 59.8 |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| Reflexion [Reflexion](#bib.bib16) | 12 | 87.5 | 44.1 | 73.9 | 50.0 | 61.1
    | 35.3 | 59.8 |'
- en: '| ExpeL [ExpeL](#bib.bib32) | 12 | 62.5 | 61.3 | 30.4 | 61.9 | 55.5 | 35.3
    | 52.2 |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| ExpeL [ExpeL](#bib.bib32) | 12 | 62.5 | 61.3 | 30.4 | 61.9 | 55.5 | 35.3
    | 52.2 |'
- en: '| AdaPlanner [AdaPlanner](#bib.bib20) | 6 | 83.3 | 46.2 | 65.2 | 74.2 | 68.5
    | 52.9 | 63.3 |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| AdaPlanner [AdaPlanner](#bib.bib20) | 6 | 83.3 | 46.2 | 65.2 | 74.2 | 68.5
    | 52.9 | 63.3 |'
- en: '| Planner+Lib. | 1 | 77.8 | 88.2 | 82.6 | 72.7 | 37.0 | 27.5 | 66.5 |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| Planner+Lib. | 1 | 77.8 | 88.2 | 82.6 | 72.7 | 37.0 | 27.5 | 66.5 |'
- en: '| AutoManual | 1 | 95.8 | 79.6 | 87.0 | 78.8 | 100.0 | 66.7 | 86.2 |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| AutoManual | 1 | 95.8 | 79.6 | 87.0 | 78.8 | 100.0 | 66.7 | 86.2 |'
- en: '| Testing LLM: GPT-4-turbo |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 测试 LLM: GPT-4-turbo |'
- en: '| ReAct [ReAct](#bib.bib30) | 12 | 95.8 | 76.3 | 69.6 | 86.4 | 72.2 | 52.9
    | 76.8 |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| ReAct [ReAct](#bib.bib30) | 12 | 95.8 | 76.3 | 69.6 | 86.4 | 72.2 | 52.9
    | 76.8 |'
- en: '| Reflexion [Reflexion](#bib.bib16) | 12 | 100.0 | 95.7 | 78.3 | 86.4 | 77.8
    | 70.6 | 85.9 |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| Reflexion [Reflexion](#bib.bib16) | 12 | 100.0 | 95.7 | 78.3 | 86.4 | 77.8
    | 70.6 | 85.9 |'
- en: '| ExpeL [ExpeL](#bib.bib32) | 12 | 94.4 | 82.8 | 72.4 | 81.8 | 72.2 | 58.8
    | 79.2 |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| ExpeL [ExpeL](#bib.bib32) | 12 | 94.4 | 82.8 | 72.4 | 81.8 | 72.2 | 58.8
    | 79.2 |'
- en: '| AdaPlanner [AdaPlanner](#bib.bib20) | 6 | 88.9 | 90.3 | 85.5 | 75.8 | 64.8
    | 41.2 | 76.4 |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| AdaPlanner [AdaPlanner](#bib.bib20) | 6 | 88.9 | 90.3 | 85.5 | 75.8 | 64.8
    | 41.2 | 76.4 |'
- en: '| Planner+Lib. | 1 | 100.0 | 93.5 | 100.0 | 93.9 | 88.9 | 39.2 | 88.1 |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| Planner+Lib. | 1 | 100.0 | 93.5 | 100.0 | 93.9 | 88.9 | 39.2 | 88.1 |'
- en: '| AutoManual | 1 | 100.0 | 98.9 | 100.0 | 95.4 | 100.0 | 90.2 | 97.4 | ![Refer
    to caption](img/ad8eb78426f2932a854b6ba2b63be37e.png)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '| AutoManual | 1 | 100.0 | 98.9 | 100.0 | 95.4 | 100.0 | 90.2 | 97.4 | ![参见标题](img/ad8eb78426f2932a854b6ba2b63be37e.png)'
- en: (a) Cross-Task v.s. Single-Task Type.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: (a) 跨任务与单任务类型对比。
- en: '![Refer to caption](img/d6011f0147ecc24721741bfafd7c1dbd.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明文字](img/d6011f0147ecc24721741bfafd7c1dbd.png)'
- en: (b) AutoManual v.s. Skill Library.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: (b) AutoManual 与技能库对比。
- en: 'Figure 4: (a) The success rate curve with standard deviation when testing GPT-4-turbo
    or GPT-3.5-turbo on ALFWorld. Building is performed cross-task or single-task
    type. (b) The success rate curve with standard deviation using AutoManual or Planner+Lib.
    when testing with GPT-4-turbo or GPT-3.5-turbo on 9 task types with feedback in
    MiniWob++.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4：（a）在 ALFWorld 上测试 GPT-4-turbo 或 GPT-3.5-turbo 时的成功率曲线及标准差。建筑物在跨任务或单任务类型上进行。
    （b）使用 AutoManual 或 Planner+Lib. 在 MiniWob++ 中测试 GPT-4-turbo 或 GPT-3.5-turbo 时的成功率曲线及标准差。
- en: 'Main Results on MiniWoB++: As shown in Tab. [2](#S4.T2 "Table 2 ‣ 4.1 Main
    Results ‣ 4 Experiments ‣ AutoManual: Generating Instruction Manuals by LLM Agents
    via Interactive Environmental Learning"), the performance of AutoManual exceeds
    the previous methods and Planner+Lib. by a large margin. Especially in 9 task
    types with feedback, these tasks have higher diversity and require LLM agents
    to cope with various situations. For example, the tasks in login-user-popup type
    will interrupt the agent’s plan at any time, requiring the agent to cope with
    unexpected situations. Therefore, solely imitating previous successful experiences
    without extracting targeted rules will lead to task failure. Additionally, due
    to the flexibility of free-form codes, our method shows better adaptability while
    requiring fewer expert examples than prior methods.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 'MiniWoB++上的主要结果：如表[2](#S4.T2 "Table 2 ‣ 4.1 Main Results ‣ 4 Experiments ‣
    AutoManual: Generating Instruction Manuals by LLM Agents via Interactive Environmental
    Learning")所示，AutoManual 的表现显著超越了之前的方法和 Planner+Lib.。特别是在 9 种有反馈的任务类型中，这些任务具有更高的多样性，需要
    LLM 代理应对各种情况。例如，登录用户弹窗类型的任务会随时打断代理的计划，要求代理应对意外情况。因此，仅仅模仿以往的成功经验而不提取针对性的规则将导致任务失败。此外，由于自由形式代码的灵活性，我们的方法在适应性上表现更佳，同时所需的专家示例少于之前的方法。'
- en: 'Table 2: Success rate (%) of LLM agent methods on 9 task types with feedback
    and all 53 task types of MiniWoB++. For each method, the number of human examples
    used is listed.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2：LLM 代理方法在 9 种任务类型的反馈和 MiniWoB++ 所有 53 种任务类型上的成功率（%）。每种方法使用的人类示例数量列出。
- en: '| Methods | Examples | With feedback (9 types) | Examples | ALL (53 types)
    |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 示例 | 有反馈 （9 种类型） | 示例 | 所有 （53 种类型） |'
- en: '| Testing LLM: GPT-3.5-turbo |  |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 测试 LLM：GPT-3.5-turbo |  |'
- en: '| RCI [ReAct](#bib.bib30) | 22 | 45.6 | 104 | 77.3 |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| RCI [ReAct](#bib.bib30) | 22 | 45.6 | 104 | 77.3 |'
- en: '| AdaPlanner [AdaPlanner](#bib.bib20) | 13 | 71.6 | 38 | 89.4 |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| AdaPlanner [AdaPlanner](#bib.bib20) | 13 | 71.6 | 38 | 89.4 |'
- en: '| Planner+Lib. | 1 | 63.6 | 4 | 87.0 |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| Planner+Lib. | 1 | 63.6 | 4 | 87.0 |'
- en: '| AutoManual | 1 | 82.2 | 4 | 92.7 |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| AutoManual | 1 | 82.2 | 4 | 92.7 |'
- en: '| Testing LLM: GPT-4-turbo |  |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 测试 LLM：GPT-4-turbo |  |'
- en: '| RCI [ReAct](#bib.bib30) | 22 | 60.4 | 104 | 88.6 |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| RCI [ReAct](#bib.bib30) | 22 | 60.4 | 104 | 88.6 |'
- en: '| AdaPlanner [AdaPlanner](#bib.bib20) | 13 | 74.1 | 38 | 90.3 |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| AdaPlanner [AdaPlanner](#bib.bib20) | 13 | 74.1 | 38 | 90.3 |'
- en: '| Planner+Lib. | 1 | 80.2 | 4 | 94.4 |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| Planner+Lib. | 1 | 80.2 | 4 | 94.4 |'
- en: '| AutoManual | 1 | 94.5 | 4 | 98.3 |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| AutoManual | 1 | 94.5 | 4 | 98.3 |'
- en: 'Learning Curves. We show the success rate curves (testing with GPT-4-turbo
    or GPT-3.5-turbo) when gradually increasing the tasks of the building stage in
    Fig [4](#S4.F4 "Figure 4 ‣ 4.1 Main Results ‣ 4 Experiments ‣ AutoManual: Generating
    Instruction Manuals by LLM Agents via Interactive Environmental Learning"). In
    the left image, we share rules across all task types (Cross-task Type), as in
    AutoManual, or each task type builds a separate set of rules (Single-task Type)
    during the building stage. Fig [4](#S4.F4 "Figure 4 ‣ 4.1 Main Results ‣ 4 Experiments
    ‣ AutoManual: Generating Instruction Manuals by LLM Agents via Interactive Environmental
    Learning") (a) demonstrates that sharing rules across task types can facilitate
    rule optimization. The rules for each task type deepen understanding of the environment,
    thereby boosting the planning of other tasks. In Fig [4](#S4.F4 "Figure 4 ‣ 4.1
    Main Results ‣ 4 Experiments ‣ AutoManual: Generating Instruction Manuals by LLM
    Agents via Interactive Environmental Learning") (b), we compare AutoManual and
    Planner+Lib. on 9 tasks with feedback in MiniWob++. We find that Planner+Lib.
    tends to get stuck with a lower success rate. In the face of highly diverse scenarios,
    Skill Library cannot express the rules behind the environment, thus falling into
    the Path Dependency problem.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '学习曲线。我们展示了成功率曲线（使用 GPT-4-turbo 或 GPT-3.5-turbo 测试），当逐渐增加构建阶段的任务时，如图 [4](#S4.F4
    "Figure 4 ‣ 4.1 Main Results ‣ 4 Experiments ‣ AutoManual: Generating Instruction
    Manuals by LLM Agents via Interactive Environmental Learning") 所示。在左侧的图像中，我们在构建阶段跨所有任务类型共享规则（跨任务类型），如
    AutoManual 所示，或者每种任务类型在构建阶段建立一组独立的规则（单任务类型）。图 [4](#S4.F4 "Figure 4 ‣ 4.1 Main
    Results ‣ 4 Experiments ‣ AutoManual: Generating Instruction Manuals by LLM Agents
    via Interactive Environmental Learning") (a) 说明了跨任务类型共享规则可以促进规则优化。每个任务类型的规则加深了对环境的理解，从而提升了其他任务的规划能力。在图
    [4](#S4.F4 "Figure 4 ‣ 4.1 Main Results ‣ 4 Experiments ‣ AutoManual: Generating
    Instruction Manuals by LLM Agents via Interactive Environmental Learning") (b)
    中，我们比较了 AutoManual 和 Planner+Lib. 在 MiniWob++ 上的 9 个任务的反馈。我们发现 Planner+Lib. 往往会遇到较低的成功率。在面对高度多样化的场景时，技能库无法表达环境背后的规则，从而陷入路径依赖问题。'
- en: 'Table 3: Ablation study of AutoManual on ALFWorld when testing with GPT-4-turbo.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 表 3：在使用 GPT-4-turbo 测试时，AutoManual 在 ALFWorld 上的消融研究。
- en: '| Online | Skill&Reflect Lib. | Case Prompt | Formulation | Avg. Error Steps
    ($\downarrow$) | Success Rate (%) |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 在线 | 技能与反射库 | 案例提示 | 公式 | 平均错误步骤 ($\downarrow$) | 成功率 (%) |'
- en: '|  |  |  |  | 2.3 | 77.6 |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '|  |  |  |  | 2.3 | 77.6 |'
- en: '|  | ✓ |  |  | 1.5 | 88.1 |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '|  | ✓ |  |  | 1.5 | 88.1 |'
- en: '|  | ✓ | ✓ | ✓ | 1.3 | 90.7 |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '|  | ✓ | ✓ | ✓ | 1.3 | 90.7 |'
- en: '| ✓ |  | ✓ | ✓ | 1.6 | 89.5 |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| ✓ |  | ✓ | ✓ | 1.6 | 89.5 |'
- en: '| ✓ | ✓ |  | ✓ | 1.0 | 93.8 |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| ✓ | ✓ |  | ✓ | 1.0 | 93.8 |'
- en: '| ✓ | ✓ | ✓ |  | 0.5 | 96.5 |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| ✓ | ✓ | ✓ |  | 0.5 | 96.5 |'
- en: '| ✓ | ✓ | ✓ | ✓ | 0.3 | 97.4 |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| ✓ | ✓ | ✓ | ✓ | 0.3 | 97.4 |'
- en: 4.2 Ablation Study
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.2 消融研究
- en: In this ablation study, we quantify the impact of each core component of the
    AutoManual framework on performance, specifically focusing on success rates and
    error reduction during task execution. Since we allowed the Planner to replan
    up to 3 times, each task could have up to 4 error steps.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这项消融研究中，我们量化了 AutoManual 框架中每个核心组件对性能的影响，特别关注任务执行中的成功率和错误减少。由于我们允许 Planner
    重新规划最多 3 次，每个任务最多可能有 4 步错误。
- en: 'Online v.s. Offline Rule Management: We perform offline AutoManual by collecting
    all trajectories and then managing rules from them. As Tab [3](#S4.T3 "Table 3
    ‣ 4.1 Main Results ‣ 4 Experiments ‣ AutoManual: Generating Instruction Manuals
    by LLM Agents via Interactive Environmental Learning") shows, without online rule
    management, the generated manual can only slightly improve planning (from 88.1%
    to 90.7%). This is because more mundane mistakes and fewer direct successes will
    occur in the trajectories (the distributional shift problem), and the rules cannot
    be verified by feedback from the environment.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '在线与离线规则管理：我们通过收集所有轨迹来执行离线 AutoManual，然后从中管理规则。如表 [3](#S4.T3 "Table 3 ‣ 4.1
    Main Results ‣ 4 Experiments ‣ AutoManual: Generating Instruction Manuals by LLM
    Agents via Interactive Environmental Learning") 所示，在没有在线规则管理的情况下，生成的手册仅能稍微改善规划（从
    88.1% 提升到 90.7%）。这是因为轨迹中会发生更多平凡的错误和更少的直接成功（分布偏移问题），而规则不能通过环境的反馈来验证。'
- en: 'Skill&Reflection Libraries: Retrieving historical conclusions is essential
    for correct planning, as they record massive interacting details that can complement
    the rules. Without them, there will be more errors in the details, and the success
    rate drops from 97.4% to 89.5%. However, as discussed previously, using plain
    experiences without inducing rules will lead to Path Dependency.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 技能与反思库：检索历史结论对于正确规划至关重要，因为它们记录了大量的交互细节，可以补充规则。没有它们，细节错误将增加，成功率从97.4%降至89.5%。然而，如前所述，使用纯粹的经验而不引导规则将导致路径依赖。
- en: 'Case-Conditional Prompts: This strategy further improves the rule management
    process by reducing the hallucination, as evidenced by an increase in success
    rate from 93.8% to 97.4%. These prompts ensure that the Builder updates rules
    reasonably and grounded.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 案例条件提示：这一策略通过减少幻觉现象进一步改进了规则管理过程，如成功率从93.8%提高到97.4%所示。这些提示确保构建者合理且有依据地更新规则。
- en: 'Effect of Manual Formulation: The final formulation of rules into a comprehensive
    manual contributed to the success rate of 97.4% and decreased average error steps,
    demonstrating the effectiveness of presenting rule-based knowledge in an organized
    and accessible format. It not only aids the Planner in mastering multiple rules
    but is also friendly for human reading.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 手册制定的效果：规则最终制定为全面手册的形式有助于实现97.4%的成功率，并减少了平均错误步骤，展示了以组织和易读的格式呈现基于规则的知识的有效性。它不仅帮助规划者掌握多个规则，也对人类阅读友好。
- en: 5 Conclusion
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5 结论
- en: In this paper, we introduce AutoManual, a framework significantly advancing
    LLM agents by enabling adaptability and continual learning through online rule
    optimization. Utilizing the structured rule system, AutoManual autonomously generates
    comprehensive manuals, achieving high success rates in benchmarks like ALFWorld
    and MiniWoB++. This approach reduces reliance on human-provided examples and expert
    interventions, illustrating a robust method for enhancing agent generalization
    and addressing the Path Dependency problem in diverse environments.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们介绍了AutoManual，一个通过在线规则优化显著提升LLM代理的框架。利用结构化的规则系统，AutoManual自动生成全面的手册，在ALFWorld和MiniWoB++等基准测试中取得了高成功率。这种方法减少了对人工示例和专家干预的依赖，展示了一种增强代理泛化能力并解决多样环境中的路径依赖问题的稳健方法。
- en: References
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献
- en: '(1) Michael Ahn, Anthony Brohan, Noah Brown, Yevgen Chebotar, Omar Cortes,
    Byron David, Chelsea Finn, Keerthana Gopalakrishnan, Karol Hausman, Alexander
    Herzog, Daniel Ho, Jasmine Hsu, Julian Ibarz, Brian Ichter, Alex Irpan, Eric Jang,
    Rosario Jauregui Ruano, Kyle Jeffrey, Sally Jesmonth, Nikhil Jayant Joshi, Ryan C.
    Julian, Dmitry Kalashnikov, Yuheng Kuang, Kuang-Huei Lee, Sergey Levine, Yao Lu,
    Linda Luu, Carolina Parada, Peter Pastor, Jornell Quiambao, Kanishka Rao, Jarek
    Rettinghouse, Diego M Reyes, Pierre Sermanet, Nicolas Sievers, Clayton Tan, Alexander
    Toshev, Vincent Vanhoucke, F. Xia, Ted Xiao, Peng Xu, Sichun Xu, and Mengyuan
    Yan. Do as i can, not as i say: Grounding language in robotic affordances. In
    Conference on Robot Learning, 2022.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '(1) Michael Ahn, Anthony Brohan, Noah Brown, Yevgen Chebotar, Omar Cortes,
    Byron David, Chelsea Finn, Keerthana Gopalakrishnan, Karol Hausman, Alexander
    Herzog, Daniel Ho, Jasmine Hsu, Julian Ibarz, Brian Ichter, Alex Irpan, Eric Jang,
    Rosario Jauregui Ruano, Kyle Jeffrey, Sally Jesmonth, Nikhil Jayant Joshi, Ryan
    C. Julian, Dmitry Kalashnikov, Yuheng Kuang, Kuang-Huei Lee, Sergey Levine, Yao
    Lu, Linda Luu, Carolina Parada, Peter Pastor, Jornell Quiambao, Kanishka Rao,
    Jarek Rettinghouse, Diego M Reyes, Pierre Sermanet, Nicolas Sievers, Clayton Tan,
    Alexander Toshev, Vincent Vanhoucke, F. Xia, Ted Xiao, Peng Xu, Sichun Xu, 和 Mengyuan
    Yan. Do as i can, not as i say: 将语言与机器人能力相结合. 在机器人学习会议上, 2022.'
- en: '(2) Yao Fu, Dong-Ki Kim, Jaekyeom Kim, Sungryull Sohn, Lajanugen Logeswaran,
    Kyunghoon Bae, and Honglak Lee. Autoguide: Automated generation and selection
    of state-aware guidelines for large language model agents. ArXiv, abs/2403.08978,
    2024.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '(2) Yao Fu, Dong-Ki Kim, Jaekyeom Kim, Sungryull Sohn, Lajanugen Logeswaran,
    Kyunghoon Bae, 和 Honglak Lee. Autoguide: 自动生成和选择状态感知的指南用于大型语言模型代理. ArXiv, abs/2403.08978,
    2024.'
- en: '(3) Sirui Hong, Xiawu Zheng, Jonathan P. Chen, Yuheng Cheng, Ceyao Zhang, Zili
    Wang, Steven Ka Shing Yau, Zi Hen Lin, Liyang Zhou, Chenyu Ran, Lingfeng Xiao,
    and Chenglin Wu. Metagpt: Meta programming for multi-agent collaborative framework.
    ArXiv, abs/2308.00352, 2023.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '(3) Sirui Hong, Xiawu Zheng, Jonathan P. Chen, Yuheng Cheng, Ceyao Zhang, Zili
    Wang, Steven Ka Shing Yau, Zi Hen Lin, Liyang Zhou, Chenyu Ran, Lingfeng Xiao,
    和 Chenglin Wu. Metagpt: 多代理协作框架的元编程. ArXiv, abs/2308.00352, 2023.'
- en: '(4) Tomoyuki Kagaya, Thong Jing Yuan, Yuxuan Lou, Jayashree Karlekar, Sugiri
    Pranata, Akira Kinose, Koki Oguri, Felix Wick, and Yang You. Rap: Retrieval-augmented
    planning with contextual memory for multimodal llm agents. ArXiv, abs/2402.03610,
    2024.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (4) Tomoyuki Kagaya、Thong Jing Yuan、Yuxuan Lou、Jayashree Karlekar、Sugiri Pranata、Akira
    Kinose、Koki Oguri、Felix Wick 和 Yang You。Rap：基于上下文记忆的检索增强规划，用于多模态 LLM 代理。ArXiv，abs/2402.03610，2024。
- en: (5) Geunwoo Kim, Pierre Baldi, and Stephen Marcus McAleer. Language models can
    solve computer tasks. In Neural Information Processing Systems, 2023.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (5) Geunwoo Kim、Pierre Baldi 和 Stephen Marcus McAleer。语言模型可以解决计算机任务。在神经信息处理系统会议（Neural
    Information Processing Systems），2023。
- en: '(6) Sergey Levine, Aviral Kumar, G. Tucker, and Justin Fu. Offline reinforcement
    learning: Tutorial, review, and perspectives on open problems. ArXiv, abs/2005.01643,
    2020.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (6) Sergey Levine、Aviral Kumar、G. Tucker 和 Justin Fu。离线强化学习：教程、综述及开放问题的展望。ArXiv，abs/2005.01643，2020。
- en: '(7) Jacky Liang, Wenlong Huang, F. Xia, Peng Xu, Karol Hausman, Brian Ichter,
    Peter R. Florence, and Andy Zeng. Code as policies: Language model programs for
    embodied control. 2023 IEEE International Conference on Robotics and Automation
    (ICRA), pages 9493–9500, 2022.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (7) Jacky Liang、Wenlong Huang、F. Xia、Peng Xu、Karol Hausman、Brian Ichter、Peter
    R. Florence 和 Andy Zeng。代码作为策略：用于体现控制的语言模型程序。2023 IEEE 国际机器人与自动化大会（ICRA），页9493–9500，2022。
- en: (8) Evan Zheran Liu, Kelvin Guu, Panupong Pasupat, Tianlin Shi, and Percy Liang.
    Reinforcement learning on web interfaces using workflow-guided exploration. In
    International Conference on Learning Representations (ICLR), 2018.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (8) Evan Zheran Liu、Kelvin Guu、Panupong Pasupat、Tianlin Shi 和 Percy Liang。使用工作流引导探索的网页界面上的强化学习。在国际学习表示大会（ICLR），2018。
- en: '(9) Bodhisattwa Prasad Majumder, Bhavana Dalvi, Peter Alexander Jansen, Oyvind
    Tafjord, Niket Tandon, Li Zhang, Chris Callison-Burch, and Peter Clark. Clin:
    A continually learning language agent for rapid task adaptation and generalization.
    ArXiv, abs/2310.10134, 2023.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (9) Bodhisattwa Prasad Majumder、Bhavana Dalvi、Peter Alexander Jansen、Oyvind
    Tafjord、Niket Tandon、Li Zhang、Chris Callison-Burch 和 Peter Clark。CLIN：一种持续学习的语言代理，用于快速任务适应和泛化。ArXiv，abs/2310.10134，2023。
- en: '(10) Reiichiro Nakano, Jacob Hilton, Suchir Balaji, Jeff Wu, Ouyang Long, Christina
    Kim, Christopher Hesse, Shantanu Jain, Vineet Kosaraju, William Saunders, Xu Jiang,
    Karl Cobbe, Tyna Eloundou, Gretchen Krueger, Kevin Button, Matthew Knight, Benjamin
    Chess, and John Schulman. Webgpt: Browser-assisted question-answering with human
    feedback. ArXiv, abs/2112.09332, 2021.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (10) Reiichiro Nakano、Jacob Hilton、Suchir Balaji、Jeff Wu、Ouyang Long、Christina
    Kim、Christopher Hesse、Shantanu Jain、Vineet Kosaraju、William Saunders、Xu Jiang、Karl
    Cobbe、Tyna Eloundou、Gretchen Krueger、Kevin Button、Matthew Knight、Benjamin Chess
    和 John Schulman。WebGPT：浏览器辅助的问答与人类反馈。ArXiv，abs/2112.09332，2021。
- en: (11) OpenAI. Gpt-4 technical report. ArXiv, abs/2303.08774, 2023.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (11) OpenAI。GPT-4 技术报告。ArXiv，abs/2303.08774，2023。
- en: (12) Long Ouyang, Jeff Wu, Xu Jiang, Diogo Almeida, Carroll L. Wainwright, Pamela
    Mishkin, Chong Zhang, Sandhini Agarwal, Katarina Slama, Alex Ray, John Schulman,
    Jacob Hilton, Fraser Kelton, Luke E. Miller, Maddie Simens, Amanda Askell, Peter
    Welinder, Paul Francis Christiano, Jan Leike, and Ryan J. Lowe. Training language
    models to follow instructions with human feedback. In Neural Information Processing
    Systems, 2022.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (12) Long Ouyang、Jeff Wu、Xu Jiang、Diogo Almeida、Carroll L. Wainwright、Pamela
    Mishkin、Chong Zhang、Sandhini Agarwal、Katarina Slama、Alex Ray、John Schulman、Jacob
    Hilton、Fraser Kelton、Luke E. Miller、Maddie Simens、Amanda Askell、Peter Welinder、Paul
    Francis Christiano、Jan Leike 和 Ryan J. Lowe。训练语言模型以遵循人类反馈的指令。在神经信息处理系统会议（Neural
    Information Processing Systems），2022。
- en: '(13) Charles Packer, Vivian Fang, Shishir G. Patil, Kevin Lin, Sarah Wooders,
    and Joseph E. Gonzalez. Memgpt: Towards llms as operating systems. ArXiv, abs/2310.08560,
    2023.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (13) Charles Packer、Vivian Fang、Shishir G. Patil、Kevin Lin、Sarah Wooders 和 Joseph
    E. Gonzalez。Memgpt：迈向操作系统的 LLM。ArXiv，abs/2310.08560，2023。
- en: '(14) Joon Sung Park, Joseph C. O’Brien, Carrie J. Cai, Meredith Ringel Morris,
    Percy Liang, and Michael S. Bernstein. Generative agents: Interactive simulacra
    of human behavior. Proceedings of the 36th Annual ACM Symposium on User Interface
    Software and Technology, 2023.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (14) Joon Sung Park、Joseph C. O’Brien、Carrie J. Cai、Meredith Ringel Morris、Percy
    Liang 和 Michael S. Bernstein。生成代理：人类行为的交互式模拟。第36届年度 ACM 用户界面软件与技术研讨会论文集，2023。
- en: (15) Chen Qian, Xin Cong, Cheng Yang, Weize Chen, Yusheng Su, Juyuan Xu, Zhiyuan
    Liu, Maosong Sun, and Wei Liu. Communicative agents for software development.
    ArXiv, abs/2307.07924, 2023.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (15) Chen Qian、Xin Cong、Cheng Yang、Weize Chen、Yusheng Su、Juyuan Xu、Zhiyuan Liu、Maosong
    Sun 和 Wei Liu。用于软件开发的交流代理。ArXiv，abs/2307.07924，2023。
- en: '(16) Noah Shinn, Federico Cassano, Beck Labash, Ashwin Gopinath, Karthik Narasimhan,
    and Shunyu Yao. Reflexion: language agents with verbal reinforcement learning.
    In Neural Information Processing Systems, 2023.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (16) Noah Shinn、Federico Cassano、Beck Labash、Ashwin Gopinath、Karthik Narasimhan
    和 Shunyu Yao. Reflexion：具有语言强化学习的语言代理。发表于《神经信息处理系统》，2023年。
- en: '(17) Mohit Shridhar, Xingdi Yuan, Marc-Alexandre Côté, Yonatan Bisk, Adam Trischler,
    and Matthew Hausknecht. Alfworld: Aligning text and embodied environments for
    interactive learning. In Proceedings of the International Conference on Learning
    Representations (ICLR), 2021.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (17) Mohit Shridhar、Xingdi Yuan、Marc-Alexandre Côté、Yonatan Bisk、Adam Trischler
    和 Matthew Hausknecht. Alfworld：为交互式学习对齐文本和具身环境。发表于国际学习表征会议（ICLR），2021年。
- en: '(18) Ishika Singh, Valts Blukis, Arsalan Mousavian, Ankit Goyal, Danfei Xu,
    Jonathan Tremblay, Dieter Fox, Jesse Thomason, and Animesh Garg. Progprompt: Generating
    situated robot task plans using large language models. 2023 IEEE International
    Conference on Robotics and Automation (ICRA), pages 11523–11530, 2022.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (18) Ishika Singh、Valts Blukis、Arsalan Mousavian、Ankit Goyal、Danfei Xu、Jonathan
    Tremblay、Dieter Fox、Jesse Thomason 和 Animesh Garg. Progprompt：利用大型语言模型生成具备情境的机器人任务计划。2023
    IEEE 国际机器人与自动化大会（ICRA），页11523–11530，2022年。
- en: '(19) Chan Hee Song, Jiaman Wu, Clay Washington, Brian M. Sadler, Wei-Lun Chao,
    and Yu Su. Llm-planner: Few-shot grounded planning for embodied agents with large
    language models. 2023 IEEE/CVF International Conference on Computer Vision (ICCV),
    pages 2986–2997, 2022.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (19) Chan Hee Song、Jiaman Wu、Clay Washington、Brian M. Sadler、Wei-Lun Chao 和
    Yu Su. LLM-planner：少样本基础的具身代理规划，结合大型语言模型。2023 IEEE/CVF 国际计算机视觉大会（ICCV），页2986–2997，2022年。
- en: '(20) Haotian Sun, Yuchen Zhuang, Lingkai Kong, Bo Dai, and Chao Zhang. Adaplanner:
    Adaptive planning from feedback with language models. In Neural Information Processing
    Systems, 2023.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (20) Haotian Sun、Yuchen Zhuang、Lingkai Kong、Bo Dai 和 Chao Zhang. Adaplanner：基于语言模型的反馈适应性规划。发表于《神经信息处理系统》，2023年。
- en: '(21) Sai Vemprala, Rogerio Bonatti, Arthur Fender C. Bucker, and Ashish Kapoor.
    Chatgpt for robotics: Design principles and model abilities. IEEE Access, 12:55682–55696,
    2023.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (21) Sai Vemprala、Rogerio Bonatti、Arthur Fender C. Bucker 和 Ashish Kapoor. ChatGPT
    在机器人技术中的应用：设计原则和模型能力。IEEE Access, 12:55682–55696, 2023年。
- en: '(22) Naoki Wake, Atsushi Kanehira, Kazuhiro Sasabuchi, Jun Takamatsu, and Katsushi
    Ikeuchi. Chatgpt empowered long-step robot control in various environments: A
    case application. IEEE Access, 11:95060–95078, 2023.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (22) Naoki Wake、Atsushi Kanehira、Kazuhiro Sasabuchi、Jun Takamatsu 和 Katsushi
    Ikeuchi. ChatGPT 赋能的长步机器人控制在各种环境中的应用：案例研究。IEEE Access, 11:95060–95078, 2023年。
- en: '(23) Guanzhi Wang, Yuqi Xie, Yunfan Jiang, Ajay Mandlekar, Chaowei Xiao, Yuke
    Zhu, Linxi (Jim) Fan, and Anima Anandkumar. Voyager: An open-ended embodied agent
    with large language models. ArXiv, abs/2305.16291, 2023.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (23) Guanzhi Wang、Yuqi Xie、Yunfan Jiang、Ajay Mandlekar、Chaowei Xiao、Yuke Zhu、Linxi
    (Jim) Fan 和 Anima Anandkumar. Voyager：一个开放式的具身代理，结合大型语言模型。ArXiv, abs/2305.16291,
    2023年。
- en: (24) Xingyao Wang, Yangyi Chen, Lifan Yuan, Yizhe Zhang, Yunzhu Li, Hao Peng,
    and Heng Ji. Executable code actions elicit better llm agents. ArXiv, abs/2402.01030,
    2024.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (24) Xingyao Wang、Yangyi Chen、Lifan Yuan、Yizhe Zhang、Yunzhu Li、Hao Peng 和 Heng
    Ji. 可执行代码动作引发更好的 LLM 代理。ArXiv, abs/2402.01030, 2024年。
- en: '(25) Zihao Wang, Shaofei Cai, Anji Liu, Xiaojian Ma, and Yitao Liang. Describe,
    explain, plan and select: Interactive planning with large language models enables
    open-world multi-task agents. In Neural Information Processing Systems, 2023.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (25) Zihao Wang、Shaofei Cai、Anji Liu、Xiaojian Ma 和 Yitao Liang. 描述、解释、计划和选择：大型语言模型的互动规划启用开放世界的多任务代理。发表于《神经信息处理系统》，2023年。
- en: (26) Jason Wei, Xuezhi Wang, Dale Schuurmans, Maarten Bosma, Ed Huai hsin Chi,
    F. Xia, Quoc Le, and Denny Zhou. Chain of thought prompting elicits reasoning
    in large language models. In Neural Information Processing Systems, 2022.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (26) Jason Wei、Xuezhi Wang、Dale Schuurmans、Maarten Bosma、Ed Huai hsin Chi、F.
    Xia、Quoc Le 和 Denny Zhou. 思维链提示在大型语言模型中引发推理。发表于《神经信息处理系统》，2022年。
- en: (27) Ronald J Williams. Simple statistical gradient-following algorithms for
    connectionist reinforcement learning. Machine learning, 8:229–256, 1992.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (27) Ronald J Williams. 简单的统计梯度跟随算法用于连接主义强化学习。Machine learning, 8:229–256, 1992年。
- en: '(28) Zhiheng Xi, Wenxiang Chen, Xin Guo, Wei He, Yiwen Ding, Boyang Hong, Ming
    Zhang, Junzhe Wang, Senjie Jin, Enyu Zhou, Rui Zheng, Xiaoran Fan, Xiao Wang,
    Limao Xiong, Qin Liu, Yuhao Zhou, Weiran Wang, Changhao Jiang, Yicheng Zou, Xiangyang
    Liu, Zhangyue Yin, Shihan Dou, Rongxiang Weng, Wensen Cheng, Qi Zhang, Wenjuan
    Qin, Yongyan Zheng, Xipeng Qiu, Xuanjing Huan, and Tao Gui. The rise and potential
    of large language model based agents: A survey. ArXiv, abs/2309.07864, 2023.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (28) Zhiheng Xi, Wenxiang Chen, Xin Guo, Wei He, Yiwen Ding, Boyang Hong, Ming
    Zhang, Junzhe Wang, Senjie Jin, Enyu Zhou, Rui Zheng, Xiaoran Fan, Xiao Wang,
    Limao Xiong, Qin Liu, Yuhao Zhou, Weiran Wang, Changhao Jiang, Yicheng Zou, Xiangyang
    Liu, Zhangyue Yin, Shihan Dou, Rongxiang Weng, Wensen Cheng, Qi Zhang, Wenjuan
    Qin, Yongyan Zheng, Xipeng Qiu, Xuanjing Huan, 和 Tao Gui. 基于大型语言模型的代理的崛起与潜力：一项调查。ArXiv,
    abs/2309.07864, 2023。
- en: '(29) Shunyu Yao, Dian Yu, Jeffrey Zhao, Izhak Shafran, Thomas L. Griffiths,
    Yuan Cao, and Karthik Narasimhan. Tree of thoughts: Deliberate problem solving
    with large language models. In Neural Information Processing Systems, 2023.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (29) Shunyu Yao, Dian Yu, Jeffrey Zhao, Izhak Shafran, Thomas L. Griffiths,
    Yuan Cao, 和 Karthik Narasimhan. 思维树：通过大型语言模型进行深思熟虑的问题解决。在神经信息处理系统会议，2023。
- en: '(30) Shunyu Yao, Jeffrey Zhao, Dian Yu, Nan Du, Izhak Shafran, Karthik Narasimhan,
    and Yuan Cao. ReAct: Synergizing reasoning and acting in language models. In International
    Conference on Learning Representations (ICLR), 2023.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (30) Shunyu Yao, Jeffrey Zhao, Dian Yu, Nan Du, Izhak Shafran, Karthik Narasimhan,
    和 Yuan Cao. ReAct：在语言模型中协同推理和行动。在国际学习表征会议（ICLR），2023。
- en: '(31) Wenqi Zhang, Ke Tang, Hai Wu, Mengna Wang, Yongliang Shen, Guiyang Hou,
    Zeqi Tan, Peng Li, Yue Ting Zhuang, and Weiming Lu. Agent-pro: Learning to evolve
    via policy-level reflection and optimization. ArXiv, abs/2402.17574, 2024.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (31) Wenqi Zhang, Ke Tang, Hai Wu, Mengna Wang, Yongliang Shen, Guiyang Hou,
    Zeqi Tan, Peng Li, Yue Ting Zhuang, 和 Weiming Lu. Agent-pro：通过政策级反思和优化学习进化。ArXiv,
    abs/2402.17574, 2024。
- en: '(32) Andrew Zhao, Daniel Huang, Quentin Xu, Matthieu Lin, Y. Liu, and Gao Huang.
    Expel: Llm agents are experiential learners. In AAAI Conference on Artificial
    Intelligence (AAAI), 2024.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (32) Andrew Zhao, Daniel Huang, Quentin Xu, Matthieu Lin, Y. Liu, 和 Gao Huang.
    Expel：LLM 代理是经验型学习者。在人工智能 AAAI 会议（AAAI），2024。
- en: (33) Andy Zhou, Kai Yan, Michal Shlapentokh-Rothman, Haohan Wang, and Yu-Xiong
    Wang. Language agent tree search unifies reasoning acting and planning in language
    models. ArXiv, abs/2310.04406, 2023.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (33) Andy Zhou, Kai Yan, Michal Shlapentokh-Rothman, Haohan Wang, 和 Yu-Xiong
    Wang. 语言代理树搜索统一了语言模型中的推理、行动和计划。ArXiv, abs/2310.04406, 2023。
- en: '(34) Xizhou Zhu, Yuntao Chen, Hao Tian, Chenxin Tao, Weijie Su, Chenyu Yang,
    Gao Huang, Bin Li, Lewei Lu, Xiaogang Wang, Y. Qiao, Zhaoxiang Zhang, and Jifeng
    Dai. Ghost in the minecraft: Generally capable agents for open-world environments
    via large language models with text-based knowledge and memory. ArXiv, abs/2305.17144,
    2023.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (34) Xizhou Zhu, Yuntao Chen, Hao Tian, Chenxin Tao, Weijie Su, Chenyu Yang,
    Gao Huang, Bin Li, Lewei Lu, Xiaogang Wang, Y. Qiao, Zhaoxiang Zhang, 和 Jifeng
    Dai. Minecraft 中的幽灵：通过具有文本知识和记忆的大型语言模型实现的开放世界环境中通用的能力代理。ArXiv, abs/2305.17144,
    2023。
- en: (35) Zhaocheng Zhu, Yuan Xue, Xinyun Chen, Denny Zhou, Jian Tang, Dale Schuurmans,
    and Hanjun Dai. Large language models can learn rules. ArXiv, abs/2310.07064,
    2023.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (35) Zhaocheng Zhu, Yuan Xue, Xinyun Chen, Denny Zhou, Jian Tang, Dale Schuurmans,
    和 Hanjun Dai. 大型语言模型可以学习规则。ArXiv, abs/2310.07064, 2023。
- en: Appendix
  id: totrans-184
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 附录
- en: '[A Limitations](#A1 "In AutoManual: Generating Instruction Manuals by LLM Agents
    via Interactive Environmental Learning")'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[A 限制](#A1 "在 AutoManual：通过互动环境学习生成指令手册的 LLM 代理")'
- en: '[B Broader Impacts](#A2 "In AutoManual: Generating Instruction Manuals by LLM
    Agents via Interactive Environmental Learning")'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[B 更广泛的影响](#A2 "在 AutoManual：通过互动环境学习生成指令手册的 LLM 代理")'
- en: '[C Difference with Prior Methods](#A3 "In AutoManual: Generating Instruction
    Manuals by LLM Agents via Interactive Environmental Learning")'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[C 与先前方法的区别](#A3 "在 AutoManual：通过互动环境学习生成指令手册的 LLM 代理")'
- en: '[D Implementation Details](#A4 "In AutoManual: Generating Instruction Manuals
    by LLM Agents via Interactive Environmental Learning")'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[D 实现细节](#A4 "在 AutoManual：通过互动环境学习生成指令手册的 LLM 代理")'
- en: '[E Presentation of Generated Manuals](#A5 "In AutoManual: Generating Instruction
    Manuals by LLM Agents via Interactive Environmental Learning")'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[E 生成手册的展示](#A5 "在 AutoManual：通过互动环境学习生成指令手册的 LLM 代理")'
- en: '[F More Experiments](#A6 "In AutoManual: Generating Instruction Manuals by
    LLM Agents via Interactive Environmental Learning")'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[F 更多实验](#A6 "在 AutoManual：通过互动环境学习生成指令手册的 LLM 代理")'
- en: '[G Case Study](#A7 "In AutoManual: Generating Instruction Manuals by LLM Agents
    via Interactive Environmental Learning")'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[G 案例研究](#A7 "在 AutoManual：通过互动环境学习生成指令手册的 LLM 代理")'
- en: '[H Prompts and Examples](#A8 "In AutoManual: Generating Instruction Manuals
    by LLM Agents via Interactive Environmental Learning")'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[H 提示和示例](#A8 "在 AutoManual 中：通过互动环境学习生成由 LLM 代理编写的说明手册")'
- en: Appendix A Limitations
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录 A 局限性
- en: Despite the significant contributions of the AutoManual framework, several limitations
    warrant further discussion. First, our method heavily relies on the capabilities
    of GPT-4-turbo to generate reliable rules, which may limit the framework’s applicability
    with less advanced language models.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 AutoManual 框架有显著贡献，但仍有几个局限性值得进一步讨论。首先，我们的方法在很大程度上依赖于 GPT-4-turbo 生成可靠规则的能力，这可能限制了该框架在较不先进的语言模型中的适用性。
- en: Secondly, the current implementation places all rules directly within the context
    of LLM, which, while effective in smaller or moderately complex environments,
    may not scale well to larger, more dynamic settings. For such expansive environments,
    integrating the rule system with Retrieval-Augmented Generation (RAG) techniques,
    similar to the approach taken by AutoGuide, could enhance performance by dynamically
    selecting relevant rules based on the context, thereby managing the cognitive
    load on the LLM more efficiently.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，目前的实现将所有规则直接置于 LLM 的上下文中，这在较小或适度复杂的环境中有效，但可能不适用于更大、更动态的设置。对于这样的广泛环境，将规则系统与检索增强生成（RAG）技术集成，类似于
    AutoGuide 采取的方法，可以通过根据上下文动态选择相关规则来提高性能，从而更有效地管理 LLM 的认知负荷。
- en: Lastly, there remains a challenge in ensuring that the Planner agent consistently
    adheres to the rules outlined in the manual. In practice, the Planner may sometimes
    ignore these rules and cannot generate the ideal solution code that can be applied
    to different situations. This indicates a need for additional mechanisms to enforce
    or verify rule compliance during operations. This issue underscores the potential
    necessity for developing more sophisticated methods to ensure rule adherence or
    to introduce more robust validation steps within the planning process.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，确保 Planner 代理始终遵守手册中概述的规则仍然是一个挑战。在实践中，Planner 有时可能忽略这些规则，无法生成适用于不同情况的理想解决方案代码。这表明需要额外的机制来强制执行或验证操作中的规则遵守情况。这个问题突显了开发更复杂方法以确保规则遵守或在规划过程中引入更强大验证步骤的潜在必要性。
- en: Appendix B Broader Impacts
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录 B 更广泛的影响
- en: The AutoManual framework, leveraging LLM agents, presents positive and negative
    impacts on safety. On the positive side, by autonomously generating reliable manuals,
    our method enhances the predictability and reliability of LLM behaviors in dynamic
    environments, potentially reducing errors and increasing operational safety. However,
    relying on LLMs also introduces risks of unpredictable behaviors when agents encounter
    unanticipated scenarios or when rule adherence is not fully ensured.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: AutoManual 框架利用 LLM 代理，对安全性产生了正面和负面影响。从积极方面来看，通过自动生成可靠的手册，我们的方法增强了 LLM 在动态环境中的可预测性和可靠性，有可能减少错误并提高操作安全性。然而，依赖
    LLM 也带来了在代理遇到未预见场景或规则遵守未完全保证时的不可预测行为风险。
- en: Furthermore, the manuals generated by our method can be invaluable tools for
    human workers. They encapsulate a distilled form of interaction-based learning
    that can aid in training, provide decision support, and improve task efficiency
    in various domains. This can not only enhance productivity but also ensure that
    human workers are better informed and prepared to manage the complex systems with
    which they interact.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们的方法生成的手册对人类工作者来说可能是宝贵的工具。它们浓缩了基于互动的学习形式，可以帮助培训、提供决策支持，并提高各个领域的任务效率。这不仅可以提高生产力，还可以确保人类工作者更好地了解和准备管理他们互动的复杂系统。
- en: Lastly, AutoManual’s ability to generate structured, context-aware manuals from
    interactive experiences suggests a promising avenue for constructing comprehensive
    knowledge bases for AI. These manuals can contribute to a global knowledge base
    shared by LLMs of different sizes, promoting broader AI research and development.
    It offers a method to systematically organize and retrieve complex interaction
    data in a way that is accessible and useful for both machines and humans.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，AutoManual 从互动体验中生成结构化、上下文感知的手册的能力表明了构建全面知识库的有希望的途径。这些手册可以为不同规模的 LLM 共享的全球知识库做出贡献，促进更广泛的
    AI 研究和开发。它提供了一种系统化组织和检索复杂互动数据的方法，对机器和人类都很有用。
- en: Appendix C Difference with Prior Methods
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录 C 与以往方法的区别
- en: 'We compare AutoManual with prior methods that extract rules from experiences,
    i.e., ExpeL [ExpeL](#bib.bib32) and AutoGuide [AutoGuide](#bib.bib2) , and discuss
    all differences here:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 AutoManual 与从经验中提取规则的先前方法进行了比较，即 ExpeL [ExpeL](#bib.bib32) 和 AutoGuide [AutoGuide](#bib.bib2)
    ，并在此讨论所有差异：
- en: 1) Interactive Form. ExpeL and AutoGuide, following Reflexion [Reflexion](#bib.bib16)
    , each time output the thought and next-step action to interact with the environment.
    Our Planner agent interacts using free-form code. As evidenced by previous works [CodeAP](#bib.bib7)
    ; [CodeAct](#bib.bib24) , using code as the plan is more efficient because the
    code will automatically perform the in-plan actions and require LLM responses
    far fewer times. Additionally, planning with code can enjoy the powerful programming
    capability of GPT. More importantly, compared with action sequences, code is easier
    to generalize to similar scenarios, facilitating the management.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 1) 交互式表单。ExpeL 和 AutoGuide 跟随 Reflexion [Reflexion](#bib.bib16) ，每次输出思想和下一步行动以与环境互动。我们的
    Planner 代理使用自由形式的代码进行交互。正如之前的工作所证明的 [CodeAP](#bib.bib7) ; [CodeAct](#bib.bib24)
    ，使用代码作为计划更高效，因为代码会自动执行计划中的行动，并且需要的 LLM 响应次数更少。此外，使用代码进行规划可以享受 GPT 强大的编程能力。更重要的是，与行动序列相比，代码更容易推广到类似场景，从而有利于管理。
- en: 2) Online v.s. Offline. ExpeL and AutoGuide extract rules from offline experiences
    of Reflexion agent. We update rules online by alternating rule practice and rule
    management. This online rule management can verify the reliability and applicability
    of the rules in a timely manner, forbidding rules to be armchair general. Additionally,
    online updated rules can help planners continuously improve their trajectories,
    making it easier for higher-quality success processes to emerge.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 2) 在线与离线。ExpeL 和 AutoGuide 从 Reflexion 代理的离线经验中提取规则。我们通过交替规则实践和规则管理来在线更新规则。这种在线规则管理可以及时验证规则的可靠性和适用性，防止规则变成坐享其成的将军。此外，在线更新的规则可以帮助规划者持续改进他们的轨迹，使得更高质量的成功过程更容易出现。
- en: 3) Collaboration Between Agents. Building rules online also enables collaboration
    between the Planner and Builder agents. In our AutoManual, the Planner is prompted
    to describe the rules considered and analyze special phenomena, which ease the
    management of the Builder. In contrast, the builder in ExpeL and AutoGuide can
    only receive action sequences from the Planner.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 3) 代理之间的协作。在线建立规则还使 Planner 和 Builder 代理之间能够协作。在我们的 AutoManual 中，Planner 被提示描述所考虑的规则并分析特殊现象，这简化了
    Builder 的管理。相比之下，ExpeL 和 AutoGuide 中的 Builder 只能接收来自 Planner 的行动序列。
- en: '4) Rule System. In ExpeL and AutoGuide, each rule has only two attributes:
    the content and score. In our rule system, each rule has four attributes: "Type",
    "Content", "Example", and "Logs". These attributes provide a comprehensive representation
    of rules and facilitate the management and usage of rules. Moreover, we allow
    rules to build on top of other rules.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 4) 规则系统。在 ExpeL 和 AutoGuide 中，每条规则只有两个属性：内容和分数。在我们的规则系统中，每条规则有四个属性：“类型”，“内容”，“示例”和“日志”。这些属性提供了规则的全面表示，并有助于规则的管理和使用。此外，我们允许规则在其他规则的基础上构建。
- en: 5) Handling excessive rules. ExpeL and AutoGuide utilize the rule scores to
    delete the low-score rules. However, we found that rule scores are unreliable
    in the experiments because the Builder tends to give overconfident scores to all
    rules. Instead, our AutoManual employs a Consolidator agent to merge and delete
    redundant rules.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 5) 处理过多规则。ExpeL 和 AutoGuide 利用规则分数删除低分规则。然而，我们发现规则分数在实验中不可靠，因为 Builder 倾向于给所有规则过高的分数。相反，我们的
    AutoManual 使用 Consolidator 代理来合并和删除冗余规则。
- en: Appendix D Implementation Details
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录 D 实施细节
- en: In the building stage of all experiments, the maximum number of rules was set
    to 12 to balance the context length and rule diversity. We use OpenAI’s Assistant
    API for all agents to save their history and prevent duplicate inputs. We set
    all LLMs’ temperatures to 0 and maximum context length to 16000\. For AdaPlanner
    and AutoManual, we allow the Planner agent to replan at most $3$ times on MiniWob++.
    In the Building stage on ALFWorld, we use 6 tasks for each task type, a total
    of 36 tasks, by default. We shuffle all tasks, and when tasks in a task type succeed
    three times in a row during building, we consider that this task type has been
    solved and will no longer run it. The API call cost for building and formulating
    stages is about $14 in total.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有实验的构建阶段，最大规则数量设置为 12 以平衡上下文长度和规则多样性。我们使用 OpenAI 的 Assistant API 为所有代理保存历史记录并防止重复输入。我们将所有
    LLM 的温度设置为 0，最大上下文长度设置为 16000。对于 AdaPlanner 和 AutoManual，我们允许 Planner 代理在 MiniWob++
    上最多重新规划 $3$ 次。在 ALFWorld 的构建阶段，我们默认使用每种任务类型 6 个任务，总计 36 个任务。我们打乱所有任务，当某任务类型的任务在构建过程中连续三次成功时，我们认为该任务类型已解决，并将不再运行该任务类型。构建和制定阶段的
    API 调用费用总计约为 $14。
- en: 'We made a slight modification to the text format of ALFWorld to make it more
    suitable for code: for each object, "object id" was changed to "object_id", and
    all preceding articles were removed. The maximum action step for a task is set
    to $50$.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对 ALFWorld 的文本格式进行了轻微修改，以更适合代码：对于每个对象，“object id” 被更改为 “object_id”，并且删除了所有前置冠词。任务的最大动作步骤设置为
    $50$。
- en: For the 9 tasks with feedback on Miniwob++, we find that "email-inbox-nl-turk"
    and "email-inbox-forward-nl-turk" are repetitions of "email-inbox" and "email-inbox-forward-nl".
    Therefore, we only used 7 task types in the building stage, while in the testing
    stage, all 9 types were evaluated. In the building stage, we run a total of 42
    tasks (6 tasks for each type).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Miniwob++ 的 9 个反馈任务，我们发现“email-inbox-nl-turk”和“email-inbox-forward-nl-turk”是“email-inbox”和“email-inbox-forward-nl”的重复。因此，我们在构建阶段只使用了
    7 种任务类型，而在测试阶段评估了所有 9 种类型。在构建阶段，我们总共运行了 42 个任务（每种类型 6 个任务）。
- en: 'For all 53 tasks on Miniwob++, since running the building directly will lead
    to a large number of rules, and tasks without feedback have low variability, we
    adopt a two-step building strategy: we first run our building stage on 9 task
    types with feedback and then only update the skill and reflection libraries on
    44 task types without feedback. The 4 examples for experiments on all task types
    are from the following task types: ‘click-menu’, ‘enter-date’, ‘social-media-some’.
    We chose these tasks mainly because they are difficult for GPT-4-turbo to try
    out due to the lack of HTML feedback. For example, the HTML in ‘enter-date’ will
    not display the cursor but requires the cursor at the correct position to enter.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Miniwob++ 上的所有 53 个任务，由于直接运行构建会导致大量规则，而没有反馈的任务变异性低，我们采用了两步构建策略：我们首先在 9 种有反馈的任务类型上运行构建阶段，然后仅更新
    44 种没有反馈的任务类型的技能和反射库。所有任务类型的 4 个实验示例来自以下任务类型：‘click-menu’，‘enter-date’，‘social-media-some’。我们选择这些任务主要是因为它们对
    GPT-4-turbo 来说很难尝试，因为缺乏 HTML 反馈。例如，‘enter-date’ 中的 HTML 不会显示光标，但要求光标位于正确位置以输入。
- en: 'Environmental feedback on executing code in MiniWob++ is as follows: Whenever
    one of the actions is executed, we will log whether the action was executed successfully
    or failed. Finally, the results of these actions are concatenated together, and
    used as feedback of the code along with the HTML text.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 MiniWob++ 中代码的环境反馈如下：每当执行一个动作时，我们会记录该动作是成功执行还是失败。最后，这些动作的结果会被串联在一起，并与 HTML
    文本一起作为代码的反馈。
- en: For AdaPlanner [AdaPlanner](#bib.bib20) and RCI [RCI](#bib.bib5) , we use their
    official code on GitHub to implement their methods. We fix their bugs on matching
    text patterns but still find their performance is much lower than they reported.
    This may be because they have not released the code used in their papers, or their
    methods are greatly affected by the GPT version (newer versions of GPT will be
    more creative).
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 AdaPlanner [AdaPlanner](#bib.bib20) 和 RCI [RCI](#bib.bib5)，我们使用它们在 GitHub
    上的官方代码来实现它们的方法。我们修复了它们在匹配文本模式中的错误，但仍发现它们的性能远低于报告的水平。这可能是因为它们没有发布论文中使用的代码，或者它们的方法受到
    GPT 版本的极大影响（更新版本的 GPT 会更具创造性）。
- en: 'Table 4: The GPT models used for each method in our implementation when using
    GPT-3.5-turbo or GPT-4-turbo as test-time LLM. Here GPT-3.5-turbo denotes gpt-3.5-turbo-1106
    and GPT-4-turbo denotes gpt-4-1106-preview.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 表4：在使用GPT-3.5-turbo或GPT-4-turbo作为测试时LLM的实现中使用的GPT模型。这里GPT-3.5-turbo表示gpt-3.5-turbo-1106，GPT-4-turbo表示gpt-4-1106-preview。
- en: '| Method | Test-Time LLM |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 测试时LLM |'
- en: '| GPT-3.5-turbo | GPT-4-turbo |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| GPT-3.5-turbo | GPT-4-turbo |'
- en: '| ReAct [ReAct](#bib.bib30) | Actor: GPT-3.5-turbo | Actor: GPT-4-turbo |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| ReAct [ReAct](#bib.bib30) | 执行者：GPT-3.5-turbo | 执行者：GPT-4-turbo |'
- en: '| Reflexion [Reflexion](#bib.bib16) | Actor: GPT-3.5-turbo | Actor: GPT-4-turbo
    |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| Reflexion [Reflexion](#bib.bib16) | 执行者：GPT-3.5-turbo | 执行者：GPT-4-turbo |'
- en: '| Self-reflection: GPT-3.5-turbo | Self-reflection: GPT-4-turbo |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| 自我反思：GPT-3.5-turbo | 自我反思：GPT-4-turbo |'
- en: '| ExpeL [ExpeL](#bib.bib32) | Offline Trajectory: | Offline Trajectory: |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| ExpeL [ExpeL](#bib.bib32) | 离线轨迹： | 离线轨迹： |'
- en: '|        Actor: GPT-3.5-turbo |        Actor: GPT-4-turbo |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '|        执行者：GPT-3.5-turbo |        执行者：GPT-4-turbo |'
- en: '|        Self-reflection: GPT-3.5-turbo |        Self-reflection: GPT-4-turbo
    |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '|        自我反思：GPT-3.5-turbo |        自我反思：GPT-4-turbo |'
- en: '| Insight Extraction: | Insight Extraction: |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| 见解提取： | 见解提取： |'
- en: '|        Builder: GPT-4-turbo |        Builder: GPT-4-turbo |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '|        构建者：GPT-4-turbo |        构建者：GPT-4-turbo |'
- en: '| Task Inference: | Task Inference: |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| 任务推断： | 任务推断： |'
- en: '|        Actor: GPT-3.5-turbo |        Actor: GPT-4-turbo |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '|        执行者：GPT-3.5-turbo |        执行者：GPT-4-turbo |'
- en: '| RCI [RCI](#bib.bib5) | Task/State/Agent grounding: | Task/State/Agent grounding:
    |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| RCI [RCI](#bib.bib5) | 任务/状态/代理基础： | 任务/状态/代理基础： |'
- en: '|        GPT-3.5-turbo |        GPT-4-turbo |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '|        GPT-3.5-turbo |        GPT-4-turbo |'
- en: '| Adaplanner [AdaPlanner](#bib.bib20) | Planner/Refiner: GPT-3.5-turbo | Planner/Refiner:
    GPT-4-turbo |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| Adaplanner [AdaPlanner](#bib.bib20) | 计划者/修正者：GPT-3.5-turbo | 计划者/修正者：GPT-4-turbo
    |'
- en: '|         ask_LLM(): GPT-3.5-turbo-instruct |         ask_LLM(): GPT-3.5-turbo-instruct
    |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '|         ask_LLM(): GPT-3.5-turbo-instruct |         ask_LLM(): GPT-3.5-turbo-instruct
    |'
- en: '| AutoManual | Building Stage: | Building Stage: |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| AutoManual | 建造阶段： | 建造阶段： |'
- en: '|         Planner: GPT-4-turbo |        Planner: GPT-4-turbo |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '|         计划者：GPT-4-turbo |        计划者：GPT-4-turbo |'
- en: '|         Builder: GPT-4-turbo |        Builder: GPT-4-turbo |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '|         构建者：GPT-4-turbo |        构建者：GPT-4-turbo |'
- en: '| Formulator: GPT-4-turbo | Formulator: GPT-4-turbo |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| 公式化者：GPT-4-turbo | 公式化者：GPT-4-turbo |'
- en: '| Testing Stage: | Testing Stage: |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| 测试阶段： | 测试阶段： |'
- en: '|        Planner: GPT-3.5-turbo |        Planner: GPT-4-turbo |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '|        计划者：GPT-3.5-turbo |        计划者：GPT-4-turbo |'
- en: Appendix E Presentation of Generated Manuals
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录E 生成手册的展示
- en: 'We present the generated manual³³3The manual doesn’t include Validation Logs
    of the rules, which are not visible for the Planner. on ALFWorld by AutoManual
    in Fig [5](#A5.F5 "Figure 5 ‣ Appendix E Presentation of Generated Manuals ‣ AutoManual:
    Generating Instruction Manuals by LLM Agents via Interactive Environmental Learning").
    As shown in the manual, the Formulator agent categorizes the rules into four categories:
    “Navigation and Search”, “Object Interaction and Location Management”, “Task-Specific
    Processes”, and “Correctness and Validation” with clear introductions. We find
    our agents have found and recorded lots of important rules that directly impact
    task completion. For instance, “the agent should include all possible locations
    in its search” in rule_0, “The agent can only hold one object at a time” in rule_3,
    and “When multiple items of the same type are present at a location, the agent
    may have to choose one to interact with or examine.” in rule_5\. For tasks that
    can be solved by a fixed strategy, such as “Cool”, “Heat”, “Clean” and “Examine”,
    AutoManual provides clear Success Process type rules. For the complex task, “Put
    Two”, AutoManual conducts classified discussions in its Success Process rule.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们展示了由AutoManual生成的手册³³3该手册不包括规则的验证日志，这些日志对于计划者是不可见的。在ALFWorld中，见图 [5](#A5.F5
    "图 5 ‣ 附录E 生成手册的展示 ‣ AutoManual：通过交互环境学习生成LLM代理的指令手册")。如手册所示，公式化者将规则分类为四类：“导航与搜索”、“对象交互与位置管理”、“任务特定过程”和“正确性与验证”，并进行明确的介绍。我们发现我们的代理发现并记录了大量直接影响任务完成的重要规则。例如，“代理应在搜索中包括所有可能的位置”在规则_0中，“代理一次只能持有一个对象”在规则_3中，以及“当一个位置存在多个相同类型的物品时，代理可能需要选择一个进行交互或检查”在规则_5中。对于可以通过固定策略解决的任务，如“冷却”、“加热”、“清洁”和“检查”，AutoManual提供了明确的成功过程类型规则。对于复杂任务“放置两个”，AutoManual在其成功过程规则中进行了分类讨论。
- en: These demonstrate that AutoManual resolves the Path Dependency problem of skills
    by digging deeper into mechanisms, updating and incorporating success processes,
    and annotating important details.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这些表明，AutoManual 通过深入探讨机制、更新和融入成功流程、注释重要细节来解决技能的路径依赖问题。
- en: 'Moreover, we prompt the Builder to break down large phenomena into specific
    rules and derive deeper rules from them later. In the initial rules [9](#LST9
    "Listing 9 ‣ H.2 Examples for ALFWorld and MiniWob++ ‣ Appendix H Prompts and
    Examples ‣ AutoManual: Generating Instruction Manuals by LLM Agents via Interactive
    Environmental Learning"), we give a simple example of how to build rules upon
    rules. In the manual [5](#A5.F5 "Figure 5 ‣ Appendix E Presentation of Generated
    Manuals ‣ AutoManual: Generating Instruction Manuals by LLM Agents via Interactive
    Environmental Learning"), we find that the Builder can correctly utilize rules
    recording basic mechanisms to build more complex rules. For example, rule_4 uses
    rule_3 to induce a solution: “If all objects are found at the same location, handle
    them sequentially according to rule_3.”'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '此外，我们提示 Builder 将大现象拆分为具体规则，并从中推导出更深层次的规则。在初始规则 [9](#LST9 "Listing 9 ‣ H.2
    Examples for ALFWorld and MiniWob++ ‣ Appendix H Prompts and Examples ‣ AutoManual:
    Generating Instruction Manuals by LLM Agents via Interactive Environmental Learning")
    中，我们给出了如何建立规则的简单示例。在手册 [5](#A5.F5 "Figure 5 ‣ Appendix E Presentation of Generated
    Manuals ‣ AutoManual: Generating Instruction Manuals by LLM Agents via Interactive
    Environmental Learning") 中，我们发现 Builder 能够正确利用记录基本机制的规则来构建更复杂的规则。例如，规则_4 使用规则_3
    引出一个解决方案：“如果所有对象都在同一位置，则按照规则_3 依次处理。”'
- en: However, we find the generated manual is still not perfect. There are some unnecessary
    duplicates between rules, such as rule_7 and rule_8, which are both Success Process
    type rules for "Examine" tasks, but they are divided into two rules.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们发现生成的手册仍不完美。规则之间存在一些不必要的重复，例如规则_7 和规则_8，它们都是“检查”任务的成功流程类型规则，但被分为两条规则。
- en: 'Table 5: The success rate (%) of different methods on 9 task types with feedback
    of MiniWob++.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 表 5：MiniWob++ 上 9 种任务类型的不同方法的成功率（%）。
- en: '| Task Type | RCI [RCI](#bib.bib5) | AdaPlanner [AdaPlanner](#bib.bib20) |
    Planner+Lib. | AutoManual |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| 任务类型 | RCI [RCI](#bib.bib5) | AdaPlanner [AdaPlanner](#bib.bib20) | Planner+Lib.
    | AutoManual |'
- en: '| Examples | 22 | 13 | 1 | 1 |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 22 | 13 | 1 | 1 |'
- en: '|  | Test with GPT-3.5-turbo |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '|  | 与 GPT-3.5-turbo 测试 |'
- en: '| search-engine | 33.3 | 100.0 | 66.7 | 66.7 |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| 搜索引擎 | 33.3 | 100.0 | 66.7 | 66.7 |'
- en: '| tic-tac-toe | 22.2 | 27.8 | 16.7 | 33.3 |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| 井字游戏 | 22.2 | 27.8 | 16.7 | 33.3 |'
- en: '| terminal | 55.6 | 100.0 | 100.0 | 100.0 |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| 终端 | 55.6 | 100.0 | 100.0 | 100.0 |'
- en: '| login-user-popup | 33.3 | 33.3 | 33.3 | 66.7 |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| 登录用户弹窗 | 33.3 | 33.3 | 33.3 | 66.7 |'
- en: '| guess-number | 11.1 | 22.2 | 11.1 | 94.4 |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| 猜数字 | 11.1 | 22.2 | 11.1 | 94.4 |'
- en: '| email-inbox | 77.8 | 88.9 | 83.3 | 100.0 |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| email-inbox | 77.8 | 88.9 | 83.3 | 100.0 |'
- en: '| email-inbox-nl-turk | 61.1 | 94.4 | 77.8 | 100.0 |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| email-inbox-nl-turk | 61.1 | 94.4 | 77.8 | 100.0 |'
- en: '| email-inbox-forward-nl | 61.1 | 83.3 | 94.4 | 100.0 |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| email-inbox-forward-nl | 61.1 | 83.3 | 94.4 | 100.0 |'
- en: '| email-inbox-forward-nl-turk | 55.6 | 94.4 | 88.9 | 77.8 |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| email-inbox-forward-nl-turk | 55.6 | 94.4 | 88.9 | 77.8 |'
- en: '| Average | 45.6 | 71.6 | 63.6 | 82.2 |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| 平均值 | 45.6 | 71.6 | 63.6 | 82.2 |'
- en: '|  | Test with GPT-4-turbo |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '|  | 与 GPT-4-turbo 测试 |'
- en: '| search-engine | 44.4 | 100.0 | 100.0 | 100.0 |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| 搜索引擎 | 44.4 | 100.0 | 100.0 | 100.0 |'
- en: '| tic-tac-toe | 33.3 | 22.2 | 22.2 | 66.7 |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| 井字游戏 | 33.3 | 22.2 | 22.2 | 66.7 |'
- en: '| terminal | 88.9 | 100.0 | 100.0 | 100.0 |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| 终端 | 88.9 | 100.0 | 100.0 | 100.0 |'
- en: '| login-user-popup | 38.9 | 33.3 | 72.2 | 100.0 |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| 登录用户弹窗 | 38.9 | 33.3 | 72.2 | 100.0 |'
- en: '| guess-number | 22.2 | 44.1 | 33.3 | 88.9 |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| 猜数字 | 22.2 | 44.1 | 33.3 | 88.9 |'
- en: '| email-inbox | 77.8 | 100.0 | 100.0 | 94.4 |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| email-inbox | 77.8 | 100.0 | 100.0 | 94.4 |'
- en: '| email-inbox-nl-turk | 72.2 | 100.0 | 100.0 | 100.0 |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| email-inbox-nl-turk | 72.2 | 100.0 | 100.0 | 100.0 |'
- en: '| email-inbox-forward-nl | 88.9 | 100.0 | 100.0 | 100.0 |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| email-inbox-forward-nl | 88.9 | 100.0 | 100.0 | 100.0 |'
- en: '| email-inbox-forward-nl-turk | 77.8 | 66.7 | 94.4 | 100.0 |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| email-inbox-forward-nl-turk | 77.8 | 66.7 | 94.4 | 100.0 |'
- en: '| Average | 60.4 | 74.1 | 80.2 | 94.5 |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| 平均值 | 60.4 | 74.1 | 80.2 | 94.5 |'
- en: '![Refer to caption](img/2976dd39c0d34635a4346cad951ce8d2.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![参见标题](img/2976dd39c0d34635a4346cad951ce8d2.png)'
- en: 'Figure 5: The Generated Manual for ALFWorld: Part 1.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5：ALFWorld 的生成手册：第 1 部分。
- en: '![Refer to caption](img/e12bb7dff7282317402433dd91d25a28.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![参见标题](img/e12bb7dff7282317402433dd91d25a28.png)'
- en: 'Figure 6: The Generated Manual for ALFWorld: Part 2.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6：ALFWorld 的生成手册：第 2 部分。
- en: Appendix F More Experiments
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录 F 更多实验
- en: 'Table 6: Ablation study of Rule System on ALFWorld.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6：ALFWorld 上规则系统的消融研究。
- en: '| Method | Success Rate (%) Testing with |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 成功率（%） 测试 |'
- en: '| GPT-3.5-turbo | GPT-4-turbo |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| GPT-3.5-turbo | GPT-4-turbo |'
- en: '| AutoManual | 86.2 | 97.4 |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| AutoManual | 86.2 | 97.4 |'
- en: '| AutoManual without “Type” | 74.6 | 91.5 |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| AutoManual 无“类型” | 74.6 | 91.5 |'
- en: '| AutoManual without “Example” | 76.8 | 92.7 |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| 没有“示例”的AutoManual | 76.8 | 92.7 |'
- en: '| AutoManual without “Validation Logs” | 85.4 | 97.0 |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| 没有“验证日志”的AutoManual | 85.4 | 97.0 |'
- en: '| AutoManual without “Useful Helper Method” | 79.6 | 94.3 |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| 没有“有用的帮助方法”的AutoManual | 79.6 | 94.3 |'
- en: '| AutoManual without Cooperation between Agents | 78.8 | 93.8 |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| 没有代理之间合作的AutoManual | 78.8 | 93.8 |'
- en: '| Case-Conditioned Prompts without Classification | 83.2 | 95.6 |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| 案例条件提示无分类 | 83.2 | 95.6 |'
- en: 'Table 7: Sensitivity Analysis of Examples and Initial Rules on 9 task types
    with feedback of MiniWob++. AutoManual uses a human example of search-engine or
    enter-text task.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 表7：在9种任务类型上，MiniWob++的示例和初始规则的敏感性分析。AutoManual使用人类示例的搜索引擎或输入文本任务。
- en: '| Method | Success Rate (%) Testing with |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 成功率 (%) 测试 |'
- en: '| GPT-3.5-turbo | GPT-4-turbo |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| GPT-3.5-turbo | GPT-4-turbo |'
- en: '| AutoManual | 82.2 | 94.5 |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| AutoManual | 82.2 | 94.5 |'
- en: '| AutoManual with enter-text Example | 78.3 | 92.8 |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| AutoManual 带输入文本示例 | 78.3 | 92.8 |'
- en: F.1 Ablation Study of Rule System
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: F.1 规则系统的消融研究
- en: 'The well-structured rule system is essential for the rule management and usage.
    We perform the ablation study of our rule system in Tab [6](#A6.T6 "Table 6 ‣
    Appendix F More Experiments ‣ AutoManual: Generating Instruction Manuals by LLM
    Agents via Interactive Environmental Learning").'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '结构良好的规则系统对规则管理和使用至关重要。我们在表[6](#A6.T6 "Table 6 ‣ Appendix F More Experiments
    ‣ AutoManual: Generating Instruction Manuals by LLM Agents via Interactive Environmental
    Learning")中进行了规则系统的消融研究。'
- en: •
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'AutoManual without “Type”: we remove the “Type” attribute of each rule in the
    rule system and the instruction for the Builder to manage various types of rules.
    As shown in Tab [6](#A6.T6 "Table 6 ‣ Appendix F More Experiments ‣ AutoManual:
    Generating Instruction Manuals by LLM Agents via Interactive Environmental Learning"),
    without the “Type” attribute, the performance drops significantly, from 86.2%
    to 74.6% and 97.4% to 91.5%, as the Builder cannot manage specific types of rules
    and loses specific instruction on each rule.'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '没有“类型”的AutoManual：我们移除了规则系统中每个规则的“类型”属性和构建器管理各种类型规则的指令。如表[6](#A6.T6 "Table
    6 ‣ Appendix F More Experiments ‣ AutoManual: Generating Instruction Manuals by
    LLM Agents via Interactive Environmental Learning")所示，没有“类型”属性，性能显著下降，从86.2%下降到74.6%，从97.4%下降到91.5%，因为构建器无法管理特定类型的规则，并且失去了对每个规则的具体指令。'
- en: •
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'AutoManual without “Example”: we remove the “Example” attribute of each rule
    in the rule system. The performance also drops by a large margin, as the Builder
    cannot specify necessary details in rules, and rules with lower understandability
    can sometimes be misleading to the Planner.'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有“示例”的AutoManual：我们移除了规则系统中每个规则的“示例”属性。性能也大幅下降，因为构建器无法在规则中指定必要的细节，而理解度较低的规则有时会对规划者造成误导。
- en: •
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: AutoManual without “Validation Logs” has little impact on performance, but “Validation
    Logs” of rules are very useful during debugging.
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有“验证日志”的AutoManual对性能影响较小，但规则的“验证日志”在调试过程中非常有用。
- en: 'We also conducted some detailed ablation studies of our AutoManual in Tab [6](#A6.T6
    "Table 6 ‣ Appendix F More Experiments ‣ AutoManual: Generating Instruction Manuals
    by LLM Agents via Interactive Environmental Learning").'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '我们还在表[6](#A6.T6 "Table 6 ‣ Appendix F More Experiments ‣ AutoManual: Generating
    Instruction Manuals by LLM Agents via Interactive Environmental Learning")中进行了AutoManual的详细消融研究。'
- en: •
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'Helper methods defined by humans and the Planner can serve as the solution
    for a subgoal of a task that can be used in multiple tasks. AutoManual without
    “Useful Helper Method”: we remove the “Useful Helper Method” in the “Type” attribute,
    the human example, and initial rules, and we no longer encourage the Planner to
    write helper functions when writing code. The performance drops from 86.2% to
    79.6% and 97.4% to 94.3%, demonstrating that extracting reusable helper methods
    can facilitate the programming.'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 人类和规划者定义的帮助方法可以作为多任务中一个子目标的解决方案。没有“有用的帮助方法”的AutoManual：我们移除了“类型”属性中的“有用的帮助方法”，人类示例和初始规则，并且不再鼓励规划者在编写代码时编写帮助函数。性能从86.2%下降到79.6%，从97.4%下降到94.3%，表明提取可重用的帮助方法可以促进编程。
- en: •
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'AutoManual without Cooperation between Agents: we remove the Planner’s thoughts
    in the trajectory when providing it to the Builder and no longer require the Planner
    to output Relevant Rules. The performance decreases significantly, indicating
    the thoughts and conclusions of the Planner are helpful for the Builder to manage
    rules.'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有代理之间合作的AutoManual：我们在将轨迹提供给构建器时，移除了规划者的思考，不再要求规划者输出相关规则。性能显著下降，表明规划者的思考和结论对构建器管理规则是有帮助的。
- en: •
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'Case-Conditioned Prompts without Classification: we remove the requirement
    to classify the error reason to “Imperfect Rules” or “Imperfect Agents” and only
    use the prompts for “Imperfect Rules” during case-conditioned prompting. As demonstrated
    in Tab [6](#A6.T6 "Table 6 ‣ Appendix F More Experiments ‣ AutoManual: Generating
    Instruction Manuals by LLM Agents via Interactive Environmental Learning"), the
    results are inferior to using all 5 cases because the analysis and classification
    of error reason can boost the Builder to manage rules accurately.'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '无分类的案例条件提示：我们去除了将错误原因分类为“Imperfect Rules”或“Imperfect Agents”的要求，仅在案例条件提示期间使用“Imperfect
    Rules”的提示。如表[6](#A6.T6 "Table 6 ‣ Appendix F More Experiments ‣ AutoManual: Generating
    Instruction Manuals by LLM Agents via Interactive Environmental Learning")所示，结果不如使用所有
    5 个案例，因为错误原因的分析和分类可以提升构建器准确管理规则的能力。'
- en: F.2 Sensitivity Analysis of Examples and Initial Rules
  id: totrans-303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: F.2 示例和初始规则的敏感性分析
- en: 'We analyze the sensitivity of our rule optimization to the initial condition,
    i.e., the human example and initial rules. In the experiments on 9 task types
    with feedback of MiniWob++, we use an example of search-engine task and the corresponding
    initial rules, which are shown in Listing [8](#LST8 "Listing 8 ‣ H.2 Examples
    for ALFWorld and MiniWob++ ‣ Appendix H Prompts and Examples ‣ AutoManual: Generating
    Instruction Manuals by LLM Agents via Interactive Environmental Learning") and
    [9](#LST9 "Listing 9 ‣ H.2 Examples for ALFWorld and MiniWob++ ‣ Appendix H Prompts
    and Examples ‣ AutoManual: Generating Instruction Manuals by LLM Agents via Interactive
    Environmental Learning"). In these initial rules, we extract the successful process
    of search-engine task and a helper method to turn to the next page. Here, we provide
    AutoManual with an example of enter-text task, the simplest task type in MiniWob++,
    as shown in Listing [10](#LST10 "Listing 10 ‣ H.2 Examples for ALFWorld and MiniWob++
    ‣ Appendix H Prompts and Examples ‣ AutoManual: Generating Instruction Manuals
    by LLM Agents via Interactive Environmental Learning").'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '我们分析了规则优化对初始条件的敏感性，即人类示例和初始规则。在 MiniWob++ 的 9 种任务类型实验中，我们使用了一个搜索引擎任务的示例及其相应的初始规则，如列表[8](#LST8
    "Listing 8 ‣ H.2 Examples for ALFWorld and MiniWob++ ‣ Appendix H Prompts and
    Examples ‣ AutoManual: Generating Instruction Manuals by LLM Agents via Interactive
    Environmental Learning")和[9](#LST9 "Listing 9 ‣ H.2 Examples for ALFWorld and
    MiniWob++ ‣ Appendix H Prompts and Examples ‣ AutoManual: Generating Instruction
    Manuals by LLM Agents via Interactive Environmental Learning")所示。在这些初始规则中，我们提取了搜索引擎任务的成功过程及其辅助方法以翻到下一页。在这里，我们向
    AutoManual 提供了 MiniWob++ 中最简单任务类型的 enter-text 任务示例，如列表[10](#LST10 "Listing 10
    ‣ H.2 Examples for ALFWorld and MiniWob++ ‣ Appendix H Prompts and Examples ‣
    AutoManual: Generating Instruction Manuals by LLM Agents via Interactive Environmental
    Learning")所示。'
- en: 'The results in Tab [7](#A6.T7 "Table 7 ‣ Appendix F More Experiments ‣ AutoManual:
    Generating Instruction Manuals by LLM Agents via Interactive Environmental Learning")
    demonstrate that even if given less initial knowledge, AutoManual can still automatically
    learn the required knowledge through online optimization, which shows that AutoManual
    has good robustness to the initial rules. In addition, we found that the knowledge
    it learned about search-engine is highly similar to the standard knowledge provided
    by humans, such as the need to turn pages for the search index larger than 3.'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '表[7](#A6.T7 "Table 7 ‣ Appendix F More Experiments ‣ AutoManual: Generating
    Instruction Manuals by LLM Agents via Interactive Environmental Learning")中的结果表明，即使提供的初始知识较少，AutoManual
    仍能通过在线优化自动学习所需的知识，这显示了 AutoManual 对初始规则的良好鲁棒性。此外，我们发现它所学到的有关搜索引擎的知识与人类提供的标准知识高度相似，例如，当搜索索引大于3时需要翻页。'
- en: Appendix G Case Study
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录 G 案例研究
- en: G.1 An Example of Path Dependency Problem
  id: totrans-307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: G.1 路径依赖问题的一个示例
- en: In the following example, the existing skill can correct solve the “Put two”
    task when the two objects occur at the same receptacles. However, in the new scenario,
    the Planner still replicates the strategy but fails to complete the task, as the
    target objects are at different receptacles.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，现有技能可以正确解决“Put two”任务，当两个对象出现在相同的容器中时。然而，在新的场景中，规划器仍然重复该策略，但未能完成任务，因为目标对象位于不同的容器中。
- en: 'Listing 1: An Example of Path Dependency Problem of the Planner on ALFWorld'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 1：ALFWorld 上规划器路径依赖问题的示例
- en: 'Here
    is the code for a relevant skill:You  are  in  the  middle  of  a  room.  Looking  quickly  around  you,  you  see  bed_1,  desk_1,  drawer_5,  drawer_4,  drawer_3,  drawer_2,  drawer_1,  dresser_1,  and  garbagecan_1.The  task  is  to:  put  two  cellphone  in  bed.‘‘‘python#  Helper  method  to  manually  parse  the  observation  for  cellphonesdef  parse_for_cellphones(observation):#  This  is  a  simple  parser  that  looks  for  the  word  ’cellphone’  followed  by  an  underscore  and  a  numberreturn  [word  for  word  in  observation.split()  if  ’cellphone’  in  word]#  Define  the  list  of  receptacles  to  search  for  the  cellphones.receptacles_to_check  =  [’drawer_1’,  ’drawer_2’,  ’drawer_3’,  ’drawer_4’,  ’drawer_5’,  ’dresser_1’]#  Initialize  a  list  to  keep  track  of  found  cellphones.found_cellphones  =  []#  Search  each  receptacle  for  the  cellphones.for  receptacle  in  receptacles_to_check:observation  =  agent.go_to(receptacle)#  If  the  receptacle  is  closed,  open  it.if  ’closed’  in  observation:observation  =  agent.open(receptacle)#  Manually  parse  the  observation  for  cellphones.found_cellphones.extend(parse_for_cellphones(observation))#  If  two  cellphones  are  found,  stop  searching.if  len(found_cellphones)  >=  2:break#  Ensure  two  cellphones  were  found.assert  len(found_cellphones)  >=  2,  ’Error:  Less  than  2  cellphones  found  in  the  environment.’#  Take  and  place  the  cellphones  in  the  bed.for  cellphone  in  found_cellphones[:2]:  #  Take  only  two  cellphones#  Go  to  the  receptacle  where  the  cellphone  was  found.observation  =  agent.go_to(receptacle)#  Take  the  cellphone.observation  =  agent.take_from(cellphone,  receptacle)#  Go  to  the  bed  and  put  the  cellphone  in  it.observation  =  agent.go_to(’bed_1’)observation  =  agent.put_in_or_on(cellphone,  ’bed_1’)‘‘‘Please  pay  close  attention  to  the  process  and  details  of  this  successful  code  when  writing  code.  Also,  be  aware  of  potential  randomness  (the  current  environment  may  differ  from  this  one).Initial
    observation and the task:You  are  in  the  middle  of  a  room.  Looking  quickly  around  you,  you  see  armchair_1,  cabinet_4,  cabinet_3,  cabinet_2,  cabinet_1,  drawer_5,  drawer_4,  drawer_3,  drawer_2,  drawer_1,  dresser_1,  garbagecan_1,  safe_1,  shelf_12,  shelf_11,  shelf_10,  shelf_9,  shelf_8,  shelf_7,  shelf_6,  shelf_5,  shelf_4,  shelf_3,  shelf_2,  shelf_1,  sidetable_1,  and  sofa_1.Your  task  is  to:  put  two  pillow  in  sofa.Planner:###  Understanding  of  the  task:The  task  is  to  find  two  pillows  in  the  environment  and  place  them  in  or  on  the  sofa.  The  environment  contains  various  receptacles  and  surfaces  where  the  pillows  might  be  located.###  Plan  for  the  task:1.  Define  a  list  of  all  receptacles  and  surfaces  to  check  for  pillows.2.  Search  each  receptacle  for  pillows.3.  Take  two  pillows  once  found.4.  Move  to  the  sofa’s  location.5.  Place  each  pillow  on  the  sofa.Here  is  the  code  for  the  task:‘‘‘python#  Helper  method  to  manually  parse  the  observation  for  pillowsdef  parse_for_pillows(observation):#  This  is  a  simple  parser  that  looks  for  the  word  ’pillow’  followed  by  an  underscore  and  a  numberreturn  [word  for  word  in  observation.split()  if  ’pillow’  in  word]#  Define  the  list  of  receptacles  to  search  for  the  pillows.receptacles_to_check  =  [’cabinet_1’,  ’cabinet_2’,  ’cabinet_3’,  ’cabinet_4’,  ’drawer_1’,  ’drawer_2’,’drawer_3’,  ’drawer_4’,  ’drawer_5’,  ’dresser_1’,  ’shelf_1’,  ’shelf_2’,  ’shelf_3’,’shelf_4’,  ’shelf_5’,  ’shelf_6’,  ’shelf_7’,  ’shelf_8’,  ’shelf_9’,  ’shelf_10’,’shelf_11’,  ’shelf_12’,  ’sidetable_1’]#  Initialize  a  list  to  keep  track  of  found  pillows.found_pillows  =  []#  Search  each  receptacle  for  the  pillows.for  receptacle  in  receptacles_to_check:observation  =  agent.go_to(receptacle)#  If  the  receptacle  is  closed,  open  it.if  ’closed’  in  observation:observation  =  agent.open(receptacle)#  Manually  parse  the  observation  for  pillows.found_pillows.extend(parse_for_pillows(observation))#  If  two  pillows  are  found,  stop  searching.if  len(found_pillows)  >=  2:break#  Ensure  two  pillows  were  found.assert  len(found_pillows)  >=  2,  ’Error:  Less  than  2  pillows  found  in  the  environment.’#  Take  and  place  the  pillows  in  the  sofa.for  pillow  in  found_pillows[:2]:  #  Take  only  two  pillows#  Go  to  the  receptacle  where  the  pillow  was  found.observation  =  agent.go_to(receptacle)#  Take  the  pillow.observation  =  agent.take_from(pillow,  receptacle)#  Go  to  the  sofa  and  put  the  pillow  in  it.observation  =  agent.go_to(’sofa_1’)observation  =  agent.put_in_or_on(pillow,  ’sofa_1’)‘‘‘Feedback
    including errors:obs_1:  Act:  agent.go_to(’cabinet_1’).  Obs:  cabinet_1  is  closed.  You  are  at  cabinet_1  and  holding  nothing.obs_2:  Act:  agent.open(’cabinet_1’).  Obs:  You  open  cabinet_1.  In  cabinet_1,  you  see  tissuebox_1.  You  are  at  cabinet_1  and  holding  nothing.obs_3:  Act:  agent.go_to(’cabinet_2’).  Obs:  Nothing  happens.  You  are  at  cabinet_1  and  holding  nothing.obs_4:  Act:  agent.go_to(’cabinet_3’).  Obs:  cabinet_3  is  closed.  You  are  at  cabinet_3  and  holding  nothing.obs_5:  Act:  agent.open(’cabinet_3’).  Obs:  You  open  cabinet_3.  In  cabinet_3,  you  see  box_3,  and  tissuebox_2.  You  are  at  cabinet_3  and  holding  nothing.obs_6:  Act:  agent.go_to(’cabinet_4’).  Obs:  Nothing  happens.  You  are  at  cabinet_3  and  holding  nothing.obs_7:  Act:  agent.go_to(’drawer_1’).  Obs:  drawer_1  is  closed.  You  are  at  drawer_1  and  holding  nothing.obs_8:  Act:  agent.open(’drawer_1’).  Obs:  You  open  drawer_1.  In  drawer_1,  you  see  nothing.  You  are  at  drawer_1  and  holding  nothing.obs_9:  Act:  agent.go_to(’drawer_2’).  Obs:  drawer_2  is  closed.  You  are  at  drawer_2  and  holding  nothing.obs_10:  Act:  agent.open(’drawer_2’).  Obs:  You  open  drawer_2.  In  drawer_2,  you  see  nothing.  You  are  at  drawer_2  and  holding  nothing.obs_11:  Act:  agent.go_to(’drawer_3’).  Obs:  drawer_3  is  closed.  You  are  at  drawer_3  and  holding  nothing.obs_12:  Act:  agent.open(’drawer_3’).  Obs:  You  open  drawer_3.  In  drawer_3,  you  see  nothing.  You  are  at  drawer_3  and  holding  nothing.obs_13:  Act:  agent.go_to(’drawer_4’).  Obs:  drawer_4  is  closed.  You  are  at  drawer_4  and  holding  nothing.obs_14:  Act:  agent.open(’drawer_4’).  Obs:  You  open  drawer_4.  In  drawer_4,  you  see  nothing.  You  are  at  drawer_4  and  holding  nothing.obs_15:  Act:  agent.go_to(’drawer_5’).  Obs:  drawer_5  is  closed.  You  are  at  drawer_5  and  holding  nothing.obs_16:  Act:  agent.open(’drawer_5’).  Obs:  You  open  drawer_5.  In  drawer_5,  you  see  nothing.  You  are  at  drawer_5  and  holding  nothing.obs_17:  Act:  agent.go_to(’dresser_1’).  Obs:  On  dresser_1,  you  see  box_2,  laptop_1,  statue_1,  watch_2,  and  watch_1.  You  are  at  dresser_1  and  holding  nothing.obs_18:  Act:  agent.go_to(’shelf_1’).  Obs:  On  shelf_1,  you  see  nothing.  You  are  at  shelf_1  and  holding  nothing.obs_19:  Act:  agent.go_to(’shelf_2’).  Obs:  On  shelf_2,  you  see  nothing.  You  are  at  shelf_2  and  holding  nothing.obs_20:  Act:  agent.go_to(’shelf_3’).  Obs:  Nothing  happens.  You  are  at  shelf_2  and  holding  nothing.obs_21:  Act:  agent.go_to(’shelf_4’).  Obs:  On  shelf_4,  you  see  nothing.  You  are  at  shelf_4  and  holding  nothing.obs_22:  Act:  agent.go_to(’shelf_5’).  Obs:  On  shelf_5,  you  see  newspaper_2.  You  are  at  shelf_5  and  holding  nothing.obs_23:  Act:  agent.go_to(’shelf_6’).  Obs:  On  shelf_6,  you  see  nothing.  You  are  at  shelf_6  and  holding  nothing.obs_24:  Act:  agent.go_to(’shelf_7’).  Obs:  On  shelf_7,  you  see  watch_3.  You  are  at  shelf_7  and  holding  nothing.obs_25:  Act:  agent.go_to(’shelf_8’).  Obs:  On  shelf_8,  you  see  nothing.  You  are  at  shelf_8  and  holding  nothing.obs_26:  Act:  agent.go_to(’shelf_9’).  Obs:  On  shelf_9,  you  see  nothing.  You  are  at  shelf_9  and  holding  nothing.obs_27:  Act:  agent.go_to(’shelf_10’).  Obs:  On  shelf_10,  you  see  nothing.  You  are  at  shelf_10  and  holding  nothing.obs_28:  Act:  agent.go_to(’shelf_11’).  Obs:  On  shelf_11,  you  see  nothing.  You  are  at  shelf_11  and  holding  nothing.obs_29:  Act:  agent.go_to(’shelf_12’).  Obs:  On  shelf_12,  you  see  cellphone_1.  You  are  at  shelf_12  and  holding  nothing.obs_30:  Act:  agent.go_to(’sidetable_1’).  Obs:  On  sidetable_1,  you  see  creditcard_1,  keychain_1,  and  newspaper_1.  You  are  at  sidetable_1  and  holding  nothing.Execution  error:Error:  Less  than  2  pillows  found  in  the  environment.Current  state:  You  are  at  sidetable_1  and  holding  nothing.'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '[⬇](data:text/plain;base64,fFxjb2xvcmJveHtncmVlbn17SGVyZSBpcyB0aGUgY29kZSBmb3IgYSByZWxldmFudCBza2lsbDp9fApZb3UgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSByb29tLiBMb29raW5nIHF1aWNrbHkgYXJvdW5kIHlvdSwgeW91IHNlZSBiZWRfMSwgZGVza18xLCBkcmF3ZXJfNSwgZHJhd2VyXzQsIGRyYXdlcl8zLCBkcmF3ZXJfMiwgZHJhd2VyXzEsIGRyZXNzZXJfMSwgYW5kIGdhcmJhZ2VjYW5fMS4KVGhlIHRhc2sgaXMgdG86IHB1dCB0d28gY2VsbHBob25lIGluIGJlZC4KYGBgcHl0aG9uCiMgSGVscGVyIG1ldGhvZCB0byBtYW51YWxseSBwYXJzZSB0aGUgb2JzZXJ2YXRpb24gZm9yIGNlbGxwaG9uZXMKZGVmIHBhcnNlX2Zvcl9jZWxscGhvbmVzKG9ic2VydmF0aW9uKToKICAgICMgVGhpcyBpcyBhIHNpbXBsZSBwYXJzZXIgdGhhdCBsb29rcyBmb3IgdGhlIHdvcmQgJ2NlbGxwaG9uZScgZm9sbG93ZWQgYnkgYW4gdW5kZXJzY29yZSBhbmQgYSBudW1iZXIKICAgIHJldHVybiBbd29yZCBmb3Igd29yZCBpbiBvYnNlcnZhdGlvbi5zcGxpdCgpIGlmICdjZWxscGhvbmUnIGluIHdvcmRdCgojIERlZmluZSB0aGUgbGlzdCBvZiByZWNlcHRhY2xlcyB0byBzZWFyY2ggZm9yIHRoZSBjZWxscGhvbmVzLgpyZWNlcHRhY2xlc190b19jaGVjayA9IFsKICAgICdkcmF3ZXJfMScsICdkcmF3ZXJfMicsICdkcmF3ZXJfMycsICdkcmF3ZXJfNCcsICdkcmF3ZXJfNScsICdkcmVzc2VyXzEnCl0KCiMgSW5pdGlhbGl6ZSBhIGxpc3QgdG8ga2VlcCB0cmFjayBvZiBmb3VuZCBjZWxscGhvbmVzLgpmb3VuZF9jZWxscGhvbmVzID0gW10KCiMgU2VhcmNoIGVhY2ggcmVjZXB0YWNsZSBmb3IgdGhlIGNlbGxwaG9uZXMuCmZvciByZWNlcHRhY2xlIGluIHJlY2VwdGFjbGVzX3RvX2NoZWNrOgogICAgb2JzZXJ2YXRpb24gPSBhZ2VudC5nb190byhyZWNlcHRhY2xlKQogICAgIyBJZiB0aGUgcmVjZXB0YWNsZSBpcyBjbG9zZWQsIG9wZW4gaXQuCiAgICBpZiAnY2xvc2VkJyBpbiBvYnNlcnZhdGlvbjoKICAgICAgICBvYnNlcnZhdGlvbiA9IGFnZW50Lm9wZW4ocmVjZXB0YWNsZSkKICAgICMgTWFudWFsbHkgcGFyc2UgdGhlIG9ic2VydmF0aW9uIGZvciBjZWxscGhvbmVzLgogICAgZm91bmRfY2VsbHBob25lcy5leHRlbmQocGFyc2VfZm9yX2NlbGxwaG9uZXMob2JzZXJ2YXRpb24pKQogICAgIyBJZiB0d28gY2VsbHBob25lcyBhcmUgZm91bmQsIHN0b3Agc2VhcmNoaW5nLgogICAgaWYgbGVuKGZvdW5kX2NlbGxwaG9uZXMpID49IDI6CiAgICAgICAgYnJlYWsKCiMgRW5zdXJlIHR3byBjZWxscGhvbmVzIHdlcmUgZm91bmQuCmFzc2VydCBsZW4oZm91bmRfY2VsbHBob25lcykgPj0gMiwgJ0Vycm9yOiBMZXNzIHRoYW4gMiBjZWxscGhvbmVzIGZvdW5kIGluIHRoZSBlbnZpcm9ubWVudC4nCgojIFRha2UgYW5kIHBsYWNlIHRoZSBjZWxscGhvbmVzIGluIHRoZSBiZWQuCmZvciBjZWxscGhvbmUgaW4gZm91bmRfY2VsbHBob25lc1s6Ml06ICAjIFRha2Ugb25seSB0d28gY2VsbHBob25lcwogICAgIyBHbyB0byB0aGUgcmVjZXB0YWNsZSB3aGVyZSB0aGUgY2VsbHBob25lIHdhcyBmb3VuZC4KICAgIG9ic2VydmF0aW9uID0gYWdlbnQuZ29fdG8ocmVjZXB0YWNsZSkKICAgICMgVGFrZSB0aGUgY2VsbHBob25lLgogICAgb2JzZXJ2YXRpb24gPSBhZ2VudC50YWtlX2Zyb20oY2VsbHBob25lLCByZWNlcHRhY2xlKQogICAgIyBHbyB0byB0aGUgYmVkIGFuZCBwdXQgdGhlIGNlbGxwaG9uZSBpbiBpdC4KICAgIG9ic2VydmF0aW9uID0gYWdlbnQuZ29fdG8oJ2JlZF8xJykKICAgIG9ic2VydmF0aW9uID0gYWdlbnQucHV0X2luX29yX29uKGNlbGxwaG9uZSwgJ2JlZF8xJykKYGBgClBsZWFzZSBwYXkgY2xvc2UgYXR0ZW50aW9uIHRvIHRoZSBwcm9jZXNzIGFuZCBkZXRhaWxzIG9mIHRoaXMgc3VjY2Vzc2Z1bCBjb2RlIHdoZW4gd3JpdGluZyBjb2RlLiBBbHNvLCBiZSBhd2FyZSBvZiBwb3RlbnRpYWwgcmFuZG9tbmVzcyAodGhlIGN1cnJlbnQgZW52aXJvbm1lbnQgbWF5IGRpZmZlciBmcm9tIHRoaXMgb25lKS4KCnxcY29sb3Jib3h7bGlnaHRncmF5fXtJbml0aWFsIG9ic2VydmF0aW9uIGFuZCB0aGUgdGFzazp9fApZb3UgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSByb29tLiBMb29raW5nIHF1aWNrbHkgYXJvdW5kIHlvdSwgeW91IHNlZSBhcm1jaGFpcl8xLCBjYWJpbmV0XzQsIGNhYmluZXRfMywgY2FiaW5ldF8yLCBjYWJpbmV0XzEsIGRyYXdlcl81LCBkcmF3ZXJfNCwgZHJhd2VyXzMsIGRyYXdlcl8yLCBkcmF3ZXJfMSwgZHJlc3Nlcl8xLCBnYXJiYWdlY2FuXzEsIHNhZmVfMSwgc2hlbGZfMTIsIHNoZWxmXzExLCBzaGVsZl8xMCwgc2hlbGZfOSwgc2hlbGZfOCwgc2hlbGZfNywgc2hlbGZfNiwgc2hlbGZfNSwgc'
- en: G.2 A Trajectory of The Building Stage
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: G.2 建造阶段的轨迹
- en: 'Here, we present a trajectory of the Planner and the corresponding responses
    of the Builder for a task in ALFWorld. In this “Indirect Success” trajectory,
    the Planner made the mistake of heating the mug without having it next to the
    microwave. The Planner then corrected the mistake and provided organized code
    in its conclusion. After observing this trajectory, the Builder keenly found the
    cause of the error: the existing “Success Process” rule did not indicate that
    the agent must go to the object before interacting with the object. The Builder
    updated the “Success Process” rule and added a “Corrected Error” rule to clarify
    the mistake.'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们展示了ALFWorld中规划者的轨迹及建造者对应的响应。在这个“间接成功”轨迹中，规划者犯了一个错误：加热杯子时没有将其放在微波炉旁边。然后，规划者纠正了这个错误，并在结论中提供了有序的代码。在观察到这个轨迹后，建造者敏锐地找出了错误的原因：现有的“成功过程”规则没有指出代理必须在与物体交互之前先到达物体位置。建造者更新了“成功过程”规则，并添加了一个“纠正错误”规则来澄清这个错误。
- en: 'Listing 2: A Trajectory of the Planner and Builder on ALFWorld'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2：ALFWorld 中规划者和建造者的轨迹
- en: 'Initial
    observation and the task:You  are  in  the  middle  of  a  room.  Looking  quickly  around  you,  you  see  cabinet_13,  cabinet_12,  cabinet_11,  cabinet_10,  cabinet_9,  cabinet_8,  cabinet_7,  cabinet_6,  cabinet_5,  cabinet_4,  cabinet_3,  cabinet_2,  cabinet_1,  coffeemachine_1,  countertop_1,  diningtable_1,  drawer_1,  fridge_1,  garbagecan_1,  microwave_1,  shelf_3,  shelf_2,  shelf_1,  sinkbasin_1,  stoveburner_4,  stoveburner_3,  stoveburner_2,  stoveburner_1,  and  toaster_1.Your  task  is  to:  heat  some  mug  and  put  it  in  cabinet.Planner:###  Understanding  of  the  observation:The  agent  is  in  a  room  with  numerous  cabinets,  appliances,  and  surfaces.  The  task  is  to  heat  a  mug  and  then  place  it  in  a  cabinet.  This  requires  finding  a  mug,  heating  it,  and  then  placing  it  in  any  cabinet.###
    Rules to consider:-  **rule_0**:  Ensure  all  receptacles  and  surfaces  are  considered  when  searching  for  the  mug.-  **rule_1**:  Use  the  ’find_object’  method  to  search  for  the  mug.-  **rule_2**:  After  finding  the  mug,  heat  it  and  then  put  it  in  a  cabinet.-  **rule_3**:  Open  closed  receptacles  to  search  for  objects.###  Plan  for  the  task:1.  Use  the  ’find_object’  method  to  search  for  a  mug  in  all  receptacles  and  surfaces.2.  Once  the  mug  is  found,  take  it.3.  Heat  the  mug  with  an  appropriate  appliance  (e.g.,  microwave).4.  Find  an  empty  cabinet  or  any  cabinet  to  place  the  heated  mug  in.5.  Place  the  mug  in  the  cabinet.Here  is  the  code  for  the  task:‘‘‘python#  [Step  1]  Define  the  helper  method  ’find_object’  as  provided  in  rule_1def  find_object(agent,  recep_to_check,  object_name):for  receptacle  in  recep_to_check:observation  =  agent.go_to(receptacle)#  Check  if  we  need  to  open  the  receptacle.  If  we  do,  open  it.if  ’closed’  in  observation:observation  =  agent.open(receptacle)#  Check  if  the  object  is  in/on  the  receptacle.if  object_name  in  observation:object_ids  =  get_object_with_id(observation,  object_name)return  object_ids,  receptaclereturn  None,  None#  [Step  2]  Get  a  sorted  list  of  all  receptacles  and  surfaces  to  check  for  a  mugrecep_to_check  =  [’cabinet_1’,  ’cabinet_2’,  ’cabinet_3’,  ’cabinet_4’,  ’cabinet_5’,  ’cabinet_6’,  ’cabinet_7’,  ’cabinet_8’,  ’cabinet_9’,  ’cabinet_10’,  ’cabinet_11’,  ’cabinet_12’,  ’cabinet_13’,  ’countertop_1’,  ’diningtable_1’,  ’drawer_1’,  ’fridge_1’,  ’garbagecan_1’,  ’microwave_1’,  ’shelf_1’,  ’shelf_2’,  ’shelf_3’,  ’sinkbasin_1’,  ’stoveburner_1’,  ’stoveburner_2’,  ’stoveburner_3’,  ’stoveburner_4’,  ’toaster_1’,  ’coffeemachine_1’]object_ids,  receptacle_with_mug  =  find_object(agent,  recep_to_check,  ’mug’)#  Assert  that  we  have  found  a  mugassert  object_ids  is  not  None,  f’Error  in  [Step  2]:  There  is  no  mug  in/on  {recep_to_check}.’#  [Step  3]  Take  the  mugfound_mug  =  object_ids[0]observation  =  agent.take_from(found_mug,  receptacle_with_mug)#  Assert  that  the  agent  is  holding  the  mugassert  agent.holding  ==  found_mug,  f’Error  in  [Step  3]:  I  cannot  take  {found_mug}  from  {receptacle_with_mug}.’#  [Step  4]  Heat  the  mug  with  an  appropriate  appliance  (e.g.,  microwave)observation  =  agent.heat_with(found_mug,  ’microwave_1’)#  Assert  that  the  mug  has  been  heatedassert  ’heat’  in  observation  and  found_mug  in  observation,  f’Error  in  [Step  4]:  I  cannot  heat  {found_mug}  with  microwave_1.’#  [Step  5]  Find  an  empty  cabinet  or  any  cabinet  to  place  the  heated  mug  in#  Since  the  task  does  not  specify  which  cabinet  to  use,  we  can  choose  the  first  oneobservation  =  agent.go_to(’cabinet_1’)#  Check  if  the  cabinet  is  closed.  If  so,  open  it.if  ’closed’  in  observation:observation  =  agent.open(’cabinet_1’)observation  =  agent.put_in_or_on(found_mug,  ’cabinet_1’)#  Assert  that  the  mug  is  put  in  the  cabinetassert  ’put’  in  observation  and  found_mug  in  observation,  f’Error  in  [Step  5]:  I  cannot  put  {found_mug}  in  cabinet_1.’‘‘‘Feedback
    including errors:obs_1:  Act:  agent.go_to(’cabinet_1’).  Obs:  cabinet_1  is  closed.  You  are  at  cabinet_1  and  holding  nothing.obs_2:  Act:  agent.open(’cabinet_1’).  Obs:  You  open  cabinet_1.  In  cabinet_1,  you  see  nothing.  You  are  at  cabinet_1  and  holding  nothing....obs_33:  Act:  agent.go_to(’shelf_1’).  Obs:  On  shelf_1,  you  see  mug_1.  You  are  at  shelf_1  and  holding  nothing.obs_34:  Act:  agent.take_from(’mug_1’,  ’shelf_1’).  Obs:  You  take  mug_1  from  shelf_1.  You  are  at  shelf_1  and  holding  mug_1.obs_35:  Act:  agent.heat_with(’mug_1’,  ’microwave_1’).  Obs:  Nothing  happens.  You  are  at  shelf_1  and  holding  mug_1.Execution  error:Error
    in [Step 4]: I cannot heat mug_1 with microwave_1.Current  state:  You  are  at  shelf_1  and  holding  mug_1.Planner’s
    replanning:###  Understanding  of  the  current  observations:The  agent  successfully  found  a  mug  on  shelf_1  and  took  it.  However,  when  attempting  to  heat  the  mug  with  the  microwave,  the  action  failed  with  "Nothing  happens."  This  indicates  that  the  agent  tried  to  use  the  microwave  while  not  being  at  the  microwave’s  location.  The  agent  must  go  to  the  microwave  before  attempting  to  heat  the  mug.###  Mistakes  in  the  previous  code  and  the  reason  for  errors:The  error  occurred  because  the  agent  attempted  to  heat  the  mug  without  being  at  the  microwave’s  location.  The  precondition  for  heating  an  object  with  a  receptacle  is  that  the  agent  must  be  at  the  same  location  as  the  receptacle.###  Rules  to  consider:-  **rule_0**:  Ensure  all  receptacles  and  surfaces  are  considered  when  searching  for  the  mug.-  **rule_1**:  Use  the  ’find_object’  method  to  search  for  the  mug.-  **rule_2**:  After  finding  the  mug,  heat  it  and  then  put  it  in  a  cabinet.-  **rule_3**:  Open  closed  receptacles  to  search  for  objects.###  Plan  for  the  task:1.  Since  the  mug  has  already  been  found  and  is  being  held  by  the  agent,  proceed  to  the  microwave.2.  Open  the  microwave  if  it  is  closed.3.  Heat  the  mug  with  the  microwave.4.  Find  an  empty  cabinet  or  any  cabinet  to  place  the  heated  mug  in.5.  Place  the  mug  in  the  cabinet.Here  is  the  updated  code  for  the  task:‘‘‘python#  [Step  4]  Go  to  the  microwave  and  open  it  if  it’s  closedobservation  =  agent.go_to(’microwave_1’)if  ’closed’  in  observation:observation  =  agent.open(’microwave_1’)#  Assert  that  the  agent  is  at  the  microwave  and  it’s  openassert  ’microwave_1’  in  observation  and  ’closed’  not  in  observation,  f’Error  in  [Step  4]:  Microwave  is  not  open  or  not  at  microwave_1.’#  [Step  5]  Heat  the  mug  with  the  microwaveobservation  =  agent.heat_with(’mug_1’,  ’microwave_1’)#  Assert  that  the  mug  has  been  heatedassert  ’heat’  in  observation  and  ’mug_1’  in  observation,  f’Error  in  [Step  5]:  I  cannot  heat  mug_1  with  microwave_1.’#  [Step  6]  Find  an  empty  cabinet  or  any  cabinet  to  place  the  heated  mug  in#  Since  the  task  does  not  specify  which  cabinet  to  use,  we  can  choose  the  first  one  that  is  empty  or  available#  We  already  know  that  cabinets  1  through  10  are  empty  or  contain  other  items,  so  we  can  choose  cabinet_1  for  simplicityobservation  =  agent.go_to(’cabinet_1’)if  ’closed’  in  observation:observation  =  agent.open(’cabinet_1’)#  Assert  that  the  agent  is  at  cabinet_1  and  it’s  openassert  ’cabinet_1’  in  observation  and  ’closed’  not  in  observation,  f’Error  in  [Step  6]:  Cabinet_1  is  not  open  or  not  at  cabinet_1.’#  [Step  7]  Place  the  mug  in  the  cabinetobservation  =  agent.put_in_or_on(’mug_1’,  ’cabinet_1’)#  Assert  that  the  mug  is  put  in  the  cabinetassert  ’put’  in  observation  and  ’mug_1’  in  observation,  f’Error  in  [Step  7]:  I  cannot  put  mug_1  in  cabinet_1.’‘‘‘Feedback:obs_36:  Act:  agent.go_to(’microwave_1’).  Obs:  In  microwave_1,  you  see  egg_2.  You  are  at  microwave_1  and  holding  mug_1.obs_37:  Act:  agent.heat_with(’mug_1’,  ’microwave_1’).  Obs:  You  heat  mug_1  using  microwave_1.  You  are  at  microwave_1  and  holding  mug_1.obs_38:  Act:  agent.go_to(’cabinet_1’).  Obs:  In  cabinet_1,  you  see  nothing.  You  are  at  cabinet_1  and  holding  mug_1.obs_39:  Act:  agent.put_in_or_on(’mug_1’,  ’cabinet_1’).  Obs:  You  put  mug_1  in/on  cabinet_1.  You  are  at  cabinet_1  and  holding  nothing.  This  epoch  is  done.  Succeed:  TrueCurrent  state:  You  are  at  cabinet_1  and  holding  nothing.Planner’s
    conclusion:###  Summary  of  misunderstandings  and  mistakes:Initially,  I  attempted  to  heat  the  mug  without  being  at  the  microwave’s  location,  which  is  why  the  action  failed  with  "Nothing  happens."  The  correct  procedure  is  to  first  go  to  the  microwave  before  attempting  to  heat  any  object.  After  correcting  this  mistake,  the  agent  successfully  heated  the  mug  and  placed  it  in  cabinet_1.###  Organized  code  block:‘‘‘python#  [Helper  Method]  Define  the  helper  method  ’find_object’  as  provided  in  rule_1def  find_object(agent,  recep_to_check,  object_name):for  receptacle  in  recep_to_check:observation  =  agent.go_to(receptacle)#  Check  if  we  need  to  open  the  receptacle.  If  we  do,  open  it.if  ’closed’  in  observation:observation  =  agent.open(receptacle)#  Check  if  the  object  is  in/on  the  receptacle.if  object_name  in  observation:object_ids  =  get_object_with_id(observation,  object_name)return  object_ids,  receptaclereturn  None,  None#  [Step  1]  Get  a  sorted  list  of  all  receptacles  and  surfaces  to  check  for  a  mugrecep_to_check  =  [’cabinet_1’,  ’cabinet_2’,  ’cabinet_3’,  ’cabinet_4’,  ’cabinet_5’,  ’cabinet_6’,  ’cabinet_7’,  ’cabinet_8’,  ’cabinet_9’,  ’cabinet_10’,  ’cabinet_11’,  ’cabinet_12’,  ’cabinet_13’,  ’countertop_1’,  ’diningtable_1’,  ’drawer_1’,  ’fridge_1’,  ’garbagecan_1’,  ’microwave_1’,  ’shelf_1’,  ’shelf_2’,  ’shelf_3’,  ’sinkbasin_1’,  ’stoveburner_1’,  ’stoveburner_2’,  ’stoveburner_3’,  ’stoveburner_4’,  ’toaster_1’,  ’coffeemachine_1’]object_ids,  receptacle_with_mug  =  find_object(agent,  recep_to_check,  ’mug’)#  Assert  that  we  have  found  a  mugassert  object_ids  is  not  None,  f’Error  in  [Step  1]:  There  is  no  mug  in/on  {recep_to_check}.’#  [Step  2]  Take  the  mugfound_mug  =  object_ids[0]observation  =  agent.take_from(found_mug,  receptacle_with_mug)#  Assert  that  the  agent  is  holding  the  mugassert  agent.holding  ==  found_mug,  f’Error  in  [Step  2]:  I  cannot  take  {found_mug}  from  {receptacle_with_mug}.’#  [Step  3]  Go  to  the  microwave  and  open  it  if  it’s  closedobservation  =  agent.go_to(’microwave_1’)if  ’closed’  in  observation:observation  =  agent.open(’microwave_1’)#  Assert  that  the  agent  is  at  the  microwave  and  it’s  openassert  ’microwave_1’  in  observation  and  ’closed’  not  in  observation,  f’Error  in  [Step  3]:  Microwave  is  not  open  or  not  at  microwave_1.’#  [Step  4]  Heat  the  mug  with  the  microwaveobservation  =  agent.heat_with(found_mug,  ’microwave_1’)#  Assert  that  the  mug  has  been  heatedassert  ’heat’  in  observation  and  found_mug  in  observation,  f’Error  in  [Step  4]:  I  cannot  heat  {found_mug}  with  microwave_1.’#  [Step  5]  Find  an  empty  cabinet  or  any  cabinet  to  place  the  heated  mug  in#  Since  the  task  does  not  specify  which  cabinet  to  use,  we  can  choose  the  first  one  that  is  empty  or  available#  We  already  know  that  cabinets  1  through  10  are  empty  or  contain  other  items,  so  we  can  choose  cabinet_1  for  simplicityobservation  =  agent.go_to(’cabinet_1’)if  ’closed’  in  observation:observation  =  agent.open(’cabinet_1’)#  Assert  that  the  agent  is  at  cabinet_1  and  it’s  openassert  ’cabinet_1’  in  observation  and  ’closed’  not  in  observation,  f’Error  in  [Step  5]:  Cabinet_1  is  not  open  or  not  at  cabinet_1.’#  [Step  6]  Place  the  mug  in  the  cabinetobservation  =  agent.put_in_or_on(found_mug,  ’cabinet_1’)#  Assert  that  the  mug  is  put  in  the  cabinetassert  ’put’  in  observation  and  found_mug  in  observation,  f’Error  in  [Step  6]:  I  cannot  put  {found_mug}  in  cabinet_1.’‘‘‘Builder’s
    classification:Analyzing  the  scenario,  we  can  identify  the  root  cause  of  the  observed  mistakes  and  relate  them  to  the  existing  rules:1.  The  agent  initially  attempted  to  heat  the  mug  without  being  at  the  microwave’s  location,  which  resulted  in  the  action  "Nothing  happens."  This  mistake  was  due  to  the  agent  not  following  the  precondition  for  the  ‘heat_with‘  action,  which  requires  the  agent  to  be  at  the  same  location  as  the  receptacle  (in  this  case,  the  microwave).2.  The  existing  rules  related  to  the  mistakes  are:-  **rule_1**:  This  rule  provides  a  ’find_object’  method  to  search  for  objects,  which  the  agent  used  correctly  to  find  the  mug.-  **rule_2**:  This  ’Success  Process’  rule  outlines  the  steps  to  put  an  object  in  a  receptacle  after  finding  and  manipulating  it.  However,  it  does  not  explicitly  state  that  the  agent  must  be  at  the  location  of  the  appliance  to  use  it,  which  is  relevant  for  the  heating  step.-  **rule_3**:  This  rule  reminds  the  agent  to  open  closed  receptacles  to  search  for  objects,  which  the  agent  did  correctly.3.  There  is  a  ’Success  Process’  rule  applicable  to  this  type  of  task  (rule_2),  but  it  does  not  explicitly  cover  the  precondition  for  heating  an  object,  which  is  to  be  at  the  same  location  as  the  appliance.4.  The
    fault in this scenario can be attributed to:*Imperfect Rules*: The existing ’Success
    Process’ rule (rule_2) does not fully document theprecondition for using appliances,
    such as the microwave. It does not state that the agent must be atthe location
    of the appliance to use it for heating an object.Based  on  the  analysis,  the  conclusion  is  that  the  fault  stems  from  *Imperfect  Rules*.  The  rules  need  to  be  updated  to  include  the  precondition  for  using  appliances,  which  is  a  critical  step  in  the  ’Success  Process’  for  tasks  involving  heating  objects.Builder:Potential  Rules:1.  *Corrected  Error*:  When  attempting  to  use  an  appliance  (e.g.,  microwave),  the  agent  must  be  at  the  same  location  as  the  appliance.  This  rule  is  related  to  the  existing  ’Success  Process’  rule  (rule_2),  but  it  adds  a  specific  precondition  for  using  appliances  that  was  not  previously  documented.2.  *Success  Process*:  The  existing  ’Success  Process’  rule  (rule_2)  should  be  updated  to  include  the  precondition  of  being  at  the  location  of  the  appliance  before  using  it.  This  is  a  critical  step  in  tasks  involving  heating  objects.Check  Difference:-  The  potential  ’Corrected  Error’  rule  targets  the  specific  precondition  for  using  appliances,  which  is  a  new  addition  and  not  covered  by  existing  rules.-  The  update  to  the  ’Success  Process’  rule  expands  on  the  existing  steps  to  include  the  precondition  for  using  appliances,  which  is  a  refinement  of  the  existing  rule.Check  Existing  Rules:-  Rule_2  needs  to  be  updated  to  include  the  precondition  for  using  appliances,  as  this  was  the  key  oversight  that  led  to  the  agent’s  initial  error.Codes:‘‘‘python#
    Update the existing ’Success Process’ rule to include the precondition for using
    appliancesrule_system.update_rule(rule_id=’rule_2’,rule="If  the  task  is  to  heat  an  object  and  put  it  in  a  receptacle,  the  agent  must  first  find  the  object,  ensure  they  are  at  the  location  of  the  heating  appliance  before  using  it,  and  then  place  the  object  in  the  target  receptacle.",example="""#  For  example,  to  heat  a  mug  and  put  it  in  a  cabinet:#  [Step  1]  Use  ’find_object’  method  to  search  all  receptacles#  [Step  2]  Take  the  mug#  [Step  3]  Go  to  the  heating  appliance  (e.g.,  microwave)  and  ensure  you  are  at  its  location#  [Step  4]  Heat  the  mug  with  the  appliance#  [Step  5]  Find  an  empty  cabinet  or  any  cabinet  to  place  the  heated  mug  in#  [Step  6]  Place  the  mug  in  the  cabinet""",validation_record="Updated  to  include  the  precondition  for  using  appliances  based  on  the  error  and  subsequent  success  in  epoch_1.")#
    Write a new ’Corrected Error’ rule for the precondition of using appliancesrule_system.write_rule(rule="Before  using  an  appliance  (e.g.,  microwave),  the  agent  must  go  to  the  location  of  the  appliance.",type="Corrected  Error",example="""#  Corrective  code:#  Go  to  the  microwave  before  attempting  to  heat  the  mugobservation  =  agent.go_to(’microwave_1’)#  Heat  the  mug  with  the  microwaveobservation  =  agent.heat_with(’mug_1’,  ’microwave_1’)""",validation_record="Derived  from  the  error  and  correction  in  epoch_1  where  the  agent  initially  failed  to  heat  the  mug  due  to  not  being  at  the  microwave’s  location.")rule_system.stop_generating()‘‘‘'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: Appendix H Prompts and Examples
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录 H 提示和示例
- en: H.1 Prompts for Planner Agent
  id: totrans-316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: H.1 规划员代理的提示
- en: 'Listing 3: System Prompts for Planner Agent'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '列表 3: 规划员代理的系统提示'
- en: '[Role]You  are  an  excellent  household  agent  in  a  simulated  environment.  Given  a  household  environment  and  a  task,  you  write  Python  code  to  accomplish  the  task.[Actions]For  each  task,  an  agent  is  created  in  an  environment,  and  the  initial  observation  and  global  memory  are  printed.#  The  agent  is  an  instance  of  Agent  class,  which  includes  the  state  of  the  agent  (its  location,  what  it’s  holding)  and  the  actions  it  can  take.class  Agent:def  __init__(self,  env:  InteractiveEnvEngine):self.location  =  env.agent_locationself.holding  =  "nothing"...#  Here  are  the  admissible  actions  the  agent  can  take;  all  action  functions  return  an  observation  string  of  the  result  of  the  action.  If  the  precondition  of  the  action  is  not  met,  its  observation  will  include  "Nothing  happens".#  Go  to  a  receptacle  and  update  the  agent’s  location.#  For  example,  ’On  countertop_1,  you  see  candle_1,  cloth_2,  and  soapbar_1.’  =  go_to(’countertop_1’)#  For  example,  ’On  sidetable_2,  you  see  nothing.’  =  go_to(’sidetable_2’)def  go_to(self,  receptacle):...#  Open  a  receptacle  and  observe  its  contents.#  For  example,  ’You  open  cabinet_1.  In  cabinet_1,  you  see  cloth_1.’  =  open(’cabinet_1’)def  open(self,  receptacle):...#  Close  an  opened  receptacle.#  For  example,  ’You  close  cabinet_1.’  =  close(’cabinet_1’)def  close(self,  receptacle):...#  Take  an  object  from  a  receptacle  if  the  agent  is  not  holding  anything.#  For  example,  ’You  take  soapbar_1  from  towelholder_1.’  =  take_from(’soapbar_1’,  ’towelholder_1’)def  take_from(self,  object,  receptacle):...#  Put  an  object  in  or  on  a  receptacle  if  the  agent  is  holding  it.#  For  example,  ’You  put  soapbar_1  in/on  cabinet_1.’  =  put_in_or_on(’soapbar_1’,  ’cabinet_1’)def  put_in_or_on(self,  object,  receptacle):...#  Use  a  lamp.#  For  example,  ’You  turn  on  desklamp_1.’  =  use(’desklamp_1’)def  use(self,  object):...#  Clean  an  object  with  a  receptacle.#  For  example,  ’You  clean  soapbar_1  using  sinkbasin_1.’  =  clean_with(’soapbar_1’,  ’sinkbasin_1’)def  clean_with(self,  object,  receptacle):...#  Heat  an  object  with  a  receptacle.#  For  example,  ’You  heat  tomato_1  using  microwave_1.’  =  heat_with(’tomato_1’,  ’microwave_1’)def  heat_with(self,  object,  receptacle):...#  Cool  an  object  with  a  receptacle.#  For  example,  ’You  cool  pan_2  using  fridge_1.’  =  cool_with(’pan_2’,  ’fridge_1’)def  cool_with(self,  object,  receptacle):...#  A  useful  function  that  you  can  use.#  Extract  a  list  of  object_ids  with  the  specified  object_name  from  the  observation.def  get_object_with_id(observation,  object_name):...[Response  Instructions]You  will  be  given  rules  discovered  by  colleagues,  summarizing  game  mechanisms  and  experiences  of  success  and  failure.  Use  these  rules  to  guide  your  coding  efforts.  Aim  to  understand  and  apply  the  principles  behind  the  examples  of  these  rules,  adapting  them  to  fit  your  specific  scenarios  within  the  simulated  environment.Output  Format  Instructions:1.  First,  explain  your  understanding  of  the  task  and  the  current  observations,  then  describe  rules  (with  their  IDs)  that  need  to  be  considered  and  plan  for  the  task.  Then,  write  your  code  between  "‘‘‘python"  and  "‘‘‘".  No  text  should  follow  after  the  code  block.2.  After  receiving  feedback,  you  should  also  explain  your  understanding  of  the  current  observations,  including  special  (unexpected)  formats  or  phenomena,  mistakes  in  your  previous  code,  and  the  reasons  for  errors.  Then,  describe  rules  (with  their  IDs)  that  need  to  be  considered,  plan  for  the  task,  and  then  write  code.Follow  these  instructions:1.  DO  NOT  USE  an  undefined  function  or  attribute  of  the  agent.  Your  code  must  be  directly  executable  in  the  given  environment.  I  won’t  implement  any  placeholders  in  your  code  for  you.2.  Your  code  should  be  consistent  with  the  code  examples  of  the  rules  (please  copy  the  code  if  there  is  no  better  modification!),  making  it  easier  for  the  builder  agent  to  refine  and  develop  new  rules  effectively.3.  In  your  code,  you  are  encouraged  to  define  helpful  functions,  which  should  be  general  and  reusable  in  different  scenes.  The  helper  methods  in  the  rules  are  already  defined  in  the  coding  environment,  so  you  can  directly  use  them.  If  you  don’t  need  to  modify  them,  don’t  redefine  them.4.  After  defining  helper  methods,  your  code  should  be  divided  into  steps  (marked  with  "[Step]"  in  comments)  and  write  assertions  at  the  end  of  each  step  to  ensure  that  each  step  achieves  its  subgoal.Follow  these  instructions.  Don’t  give  up  or  change  the  task.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '[⬇](data:text/plain;base64,W1JvbGVdCllvdSBhcmUgYW4gZXhjZWxsZW50IGhvdXNlaG9sZCBhZ2VudCBpbiBhIHNpbXVsYXRlZCBlbnZpcm9ubWVudC4gR2l2ZW4gYSBob3VzZWhvbGQgZW52aXJvbm1lbnQgYW5kIGEgdGFzaywgeW91IHdyaXRlIFB5Z2hvbjBjb2RlIHRvIGFjY29tcGxpc2ggdGhlIHRhc2suCgpbQWN0aW9uc10KRm9yIGVhY2ggdGFzaywgYW4gYWdlbnQgaXMgY3JlYXRlZCBpbiBhbiBlbnZpcm9ubWVudCwgYW5kIHRoZSBpbml0aWFsIG9ic2VydmF0aW9uIGFuZCBnbG9iYWwgbWVtb3J5IGFyZSBwcmludGVkLgoKIyBUaGUgYWdlbnQgaXMgYW4gaW5zdGFuY2Ugb2YgQWdlbnQgY2xhc3MsIHdoaWNoIGluY2x1ZGVzIHRoZSBzdGF0ZSBvZiB0aGUgYWdlbnQgKGl0cyBsb2NhdGlvbiwgd2hhdCBpdCdzIGhvbGRpbmcpIGFuZCB0aGUgYWN0aW9ucyBpdCBjYW4gdGFrZS4KCmNsYXNzIEFnZW50OgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGVudjogSW50ZXJhY3RpdmVFbnZFbmdpbmUpOgogICAgICAgIHNlbGYubG9jYXRpb24gPSBlbnYuYWdlbnRfbG9jYXRpb24KICAgICAgICBzZWxmLmhvbGRpbmcgPSAibm90aGluZyIKICAgICAgICAuLi4KCiAgICAjIEhlcmUgYXJlIHRoZSBhZG1pc3NpYmxlIGFjdGlvbnMgdGhlIGFnZW50IGNhbiB0YWtlOyBhbGwgYWN0aW9uIGZ1bmN0aW9ucyByZXR1cm4gYW4gb2JzZXJ2YXRpb24gc3RyaW5nIG9mIHRoZSByZXN1bHQgb2YgdGhlIGFjdGlvbi4gSWYgdGhlIHByZWNvbmRpdGlvbiBvZiB0aGUgYWN0aW9uIGlzIG5vdCBtZXQsIGl0cyBvYnNlcnZhdGlvbiB3aWxsIGluY2x1ZGUgIk5vdGhpbmcgaGFwcGVucyIuCgogICAgIyBHbyB0byBhIHJlY2VwdGFjbGUgYW5kIHVwZGF0ZSB0aGUgYWdlbnQncyBsb2NhdGlvbi4KICAgICMgRm9yIGV4YW1wbGUsICdPbiBjb3VudGVydG9wXzEsIHlvdSBzZWUgY2FuZGxlXzEsIGNsb3RoXzIsIGFuZCBzb2FwYmFyXzEuJyA9IGdvX3RvKCdjb3VudGVydG9wXzEnKQogICAgIyBGb3IgZXhhbXBsZSwgJ09uIHNpZGV0YWJsZV8yLCB5b3Ugc2VlIG5vdGhpbmcuJyA9IGdvX3RvKCdzaWRldGFibGVfMicpCiAgICBkZWYgZ29fdG8oc2VsZiwgcmVjZXB0YWNsZSk6CiAgICAgICAgLi4uCgogICAgIyBPcGVuIGEgcmVjZXB0YWNsZSBhbmQgb2JzZXJ2ZSBpdHMgY29udGVudHMuCiAgICAjIEZvciBleGFtcGxlLCAnWW91IG9wZW4gY2FiaW5ldF8xLiBJbiBjYWJpbmV0XzEsIHlvdSBzZWUgY2xvdGhfMS4nID0gb3BlbignY2FiaW5ldF8xJykKICAgIGRlZiBvcGVuKHNlbGYsIHJlY2VwdGFjbGUpOgogICAgICAgIC4uLgoKICAgICMgQ2xvc2UgYW4gb3BlbmVkIHJlY2VwdGFjbGUuCiAgICAjIEZvciBleGFtcGxlLCAnWW91IGNsb3NlIGNhYmluZXRfMS4nID0gY2xvc2UoJ2NhYmluZXRfMScpCiAgICBkZWYgY2xvc2Uoc2VsZiwgcmVjZXB0YWNsZSk6CiAgICAgICAgLi4uCgogICAgIyBUYWtlIGFuIG9iamVjdCBmcm9tIGEgcmVjZXB0YWNsZSBpZiB0aGUgYWdlbnQgaXMgbm90IGhvbGRpbmcgYW55dGhpbmcuCiAgICAjIEZvciBleGFtcGxlLCAnWW91IHRha2Ugc29hcGJhcl8xIGZyb20gdG93ZWxob2xkZXJfMS4nID0gdGFrZV9mcm9tKCdzb2FwYmFyXzEnLCAndG93ZWxob2xkZXJfMScpCiAgICBkZWYgdGFrZV9mcm9tKHNlbGYsIG9iamVjdCwgcmVjZXB0YWNsZSk6CiAgICAgICAgLi4uCgogICAgIyBQdXQgYW4gb2JqZWN0IGluIG9yIG9uIGEgcmVjZXB0YWNsZSBpZiB0aGUgYWdlbnQgaXMgaG9sZGluZyBpdC4KICAgICMgRm9yIGV4YW1wbGUsICdZb3UgcHV0IHNvYXBiYXJfMSBpbi9vbiBjYWJpbmV0XzEuJyA9IHB1dF9pbl9vcl9vbignc29hcGJhcl8xJywgJ2NhYmluZXRfMScpCiAgICBkZWYgcHV0X2luX29yX29uKHNlbGYsIG9iamVjdCwgcmVjZXB0YWNsZSk6CiAgICAgICAgLi4uCgogICAgIyBVc2UgYSBsYW1wLgogICAgIyBGb3IgZXhhbXBsZSwgJ1lvdSB0dXJuIG9uIGRlc2tsYW1wXzEuJyA9IHVzZSgnZGVza2xhbXBfMScpCiAgICBkZWYgdXNlKHNlbGYsIG9iamVjdCk6CiAgICAgICAgLi4uCgogICAgIyBDbGVhbiBhbiBvYmplY3Qgd2l0aCBhIHJlY2VwdGFjbGUuCiAgICAjIEZvciBleGFtcGxlLCAnWW91IGNsZWFuIHNvYXBiYXJfMSB1c2luZyBzaW5rYmFzaW5fMS4nID0gY2xlYW5fd2l0aCgnc29hcGJhcl8xJywgJ3NpbmtiYXNpbl8xJykKICAgIGRlZiBjbGVhbl93aXRoKHNlbGYsIG9iamVjdCwgcmVjZXB0YWNsZSk6CiAgICAgICAgLi4uCgogICAgIyBIZWF0IGFuIG9iamVjdCB3aXRoIGEgcmVjZXB0YWNsZS4KICAgICMgRm9yIGV4YW1wbGUsICdZb3UgaGVhdCB0b21hdG9fMSB1c2luZyBtaWNyb3dhdmVfMS4nID0gaGVhdF93aXRoKCd0b21hdG9fMScsICdtaWNyb3dhdmVfMScpCiAgICBkZWYgaGVhdF93aXRoKHNlbGYsIG9iamVjdCwgcmVjZXB0YWNsZSk6CiAgICAgICAgLi4uCgogICAgIyBDb29s'
- en: 'Listing 4: Conclusion Prompt for Indirect Success'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 'Listing 4: 间接成功的结论提示'
- en: 'Please  summarize  the  misunderstandings  and  mistakes  you  made,  and  then  organize  your  code  into  a  code  block.  You  should  copy  the  used  parts  from  your  previous  code,  including  helper  methods  and  steps.  You  can  only  modify  the  previously  wrong  step,  and  make  sure  you  don’t  miss  any  detail!  So  that  I  can  use  it  with  similar  but  not  the  same  scenarios.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '请总结您所犯的误解和错误，然后将您的代码整理成一个代码块。您应复制之前代码中使用的部分，包括帮助方法和步骤。您只能修改之前错误的步骤，并确保不要遗漏任何细节！这样我才能在类似但不同的场景中使用它。'
- en: 'Listing 5: Conclusion Prompt for Failure'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 'Listing 5: 失败的结论提示'
- en: 'You  failed  to  complete  the  task.  Now  carefully  review  the  trajectory  of  the  executed  actions  and  the  corresponding  observations,  then  identify  the  reasons  for  the  failure.  This  reason  is  often  your  mistake  or  misunderstanding  rather  than  the  environment’s  error.  By  carefully  comparing  with  applicable  rules  and  examples,  pinpoint  where  your  code  deviated  from  expected  standards.If  there  exist  coding  errors,  specify  the  segments  of  the  problematic  code  and  elucidate  how  they  contributed  to  the  errors.  If  you  want  to  write  a  correction  for  an  error,  you  must  double-check  its  plausibility!  Additionally,  determine  whether  your  codes  were  in  strict  adherence  to  the  relevant  rules  and  examples.  This  reflection  and  documentation  will  serve  as  a  reminder  for  completing  future  tasks.'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '您未能完成任务。现在请仔细回顾已执行动作的轨迹及相应的观察，然后找出失败的原因。这个原因通常是您的错误或误解，而非环境的错误。通过仔细比较适用的规则和示例，找出您的代码偏离预期标准的地方。如果存在编码错误，请指明有问题的代码段，并阐明它们如何导致错误。如果您想对错误进行修正，必须再次检查其合理性！另外，请确定您的代码是否严格遵循了相关的规则和示例。这种反思和记录将作为完成未来任务的提醒。'
- en: H.2 Examples for ALFWorld and MiniWob++
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: H.2 ALFWorld 和 MiniWob++ 的示例
- en: 'Listing 6: The Put Example for ALFWorld'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '列表 6: ALFWorld 的 Put 示例'
- en: 'You  are  in  the  middle  of  a  room.  Looking  quickly  around  you,  you  see  cabinet_4,  cabinet_3,  cabinet_2,  cabinet_1,  countertop_1,  garbagecan_1,  sinkbasin_2,  sinkbasin_1,  toilet_2,  toilet_1.Your  task  is  to:  find  some  spraybottle.###  Understanding  of  the  observation:  ...###  Rules  to  consider:  ...###  Plan  for  the  task:  I  need  to  get  a  list  of  receptacles,  and  go  to  search  each  receptacle  until  seeing  a  spraybottle.Here  is  a  code  of  my  plan:‘‘‘python#  Define  a  helper  method  to  search  receptacles  for  the  target  objectdef  find_object(agent,  recep_to_check,  object_name):for  receptacle  in  recep_to_check:observation  =  agent.go_to(receptacle)#  Check  if  we  need  to  open  the  receptacle.  If  we  do,  open  it.if  ’closed’  in  observation:observation  =  agent.open(receptacle)#  Check  if  the  object  is  in/on  the  receptacle.if  object_name  in  observation:object_ids  =  get_object_with_id(observation,  object_name)return  object_ids,  receptaclereturn  None,  None#  [Step  1]  Get  a  sorted  list  of  receptacles  and  surfaces  to  check  for  a  spraybottle.  And  use  ’find_object’  method  to  searchrecep_to_check  =  [’cabinet_1’,  ’cabinet_2’,  ’cabinet_3’,  ’cabinet_4’,  ’countertop_1’,  ’toilet_1’,  ’toilet_2’,  ’sinkbasin_1’,  ’sinkbasin_2’,  ’garbagecan_1’]object_ids,  receptacle_with_spraybottle  =  find_object(agent,  recep_to_check,  ’spraybottle’)assert  object_ids  is  not  None,  f’Error  in  [Step  1]:  There  is  no  spraybottle  in/on  {recep_to_check}.’#  [Step  2]  Take  the  spraybottlefound_spraybottle  =  object_ids[0]observation  =  agent.take_from(found_spraybottle,  receptacle_with_spraybottle)assert  agent.holding  ==  found_spraybottle,  f’Error  in  [Step  2]:  I  cannot  take  {found_spraybottle}  from  {receptacle}.’#  [Step  3]  Go  to  a  toilet  and  put  the  spraybottle  on  itobservation  =  agent.go_to(’toilet_1’)#  check  if  toilet_1  is  closed.  If  so,  open  it.if  ’closed’  in  observation:observation  =  agent.open(’toilet_1’)observation  =  agent.put_in_or_on(found_spraybottle,  ’toilet_1’)‘‘‘'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '你现在在一个房间的中间。快速环顾四周，你看到
    cabinet_4、cabinet_3、cabinet_2、cabinet_1、countertop_1、garbagecan_1、sinkbasin_2、sinkbasin_1、toilet_2、toilet_1。你的任务是：找到一个喷雾瓶。###
    观察理解： ...### 需要考虑的规则： ...### 任务计划：我需要获取一个容器的列表，然后去搜索每一个容器，直到找到喷雾瓶。以下是我的计划代码：‘‘‘python#
    定义一个帮助方法来搜索容器中的目标对象def find_object(agent, recep_to_check, object_name):for receptacle
    in recep_to_check:observation = agent.go_to(receptacle)# 检查我们是否需要打开容器。如果需要，就打开它。if
    ''closed'' in observation:observation = agent.open(receptacle)# 检查对象是否在/在容器中。if
    object_name in observation:object_ids = get_object_with_id(observation, object_name)return
    object_ids, receptaclereturn None, None# [步骤'
- en: 'Listing 7: Initial Rules for ALFWorld Induced from Put Example'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 7：从示例中引导的 ALFWorld 初始规则
- en: '"rule_0":{"rule":  "At  the  initial  observation  of  the  environment,  the  agent  can  only  observe  receptacles,  such  as  cabinet_1,  countertop_1.  The  agent  needs  to  go  to  the  receptacle  to  view  objects  in  or  on  it,  even  for  open  receptacles.","type":  "Special  Mechanism","example":  "","validation_record":  "Provided  by  User."},"rule_1":{"rule":  "If  there  are  multiple  receptacles  to  be  searched,  the  agent  can  write  and  use  the  ’find_object’  method  as  shown  in  the  example.","type":  "Useful  Helper  Method","example":  ’’’#  Define  helper  method  to  find  the  object  that  is  neededdef  find_object(agent,  recep_to_check,  object_name):for  receptacle  in  recep_to_check:observation  =  agent.go_to(receptacle)#  Check  if  we  need  to  open  the  receptacle.  If  we  do,  open  it.if  ’closed’  in  observation:observation  =  agent.open(receptacle)#  Check  if  the  object  is  in/on  the  receptacle.if  object_name  in  observation:object_ids  =  get_object_with_id(observation,  object_name)return  object_ids,  receptaclereturn  None,  None’’’,"validation_record":  "Essential  helper  method  provided  by  User."},"rule_2":{"rule":  "If  the  task  is  to  put  some  object  on  some  receptacle,  first  use  ’find_object’  method  in  rule_1  to  search  all  receptacles,  take  the  object,  then  go  to  the  target  receptacle  and  put  the  object.","type":  "Success  Process","example":  ’’’#  For  example,  to  put  some  spraybottle  on  toilet:#  [Step  1]  Use  ’find_object’  method  in  rule_1  to  search  all  receptaclesrecep_to_check  =  ...object_ids,  receptacle_with_spraybottle  =  find_object(agent,  recep_to_check,  ’spraybottle’)#  [Step  2]  Take  the  spraybottle#  [Step  3]  Go  to  a  toilet  and  put  the  spraybottle  on  it#  If  the  toilet  is  closed,  open  it  first.’’’,"validation_record":  "Provided  by  User."}'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '"规则_0":{"规则":  "在初始观察环境时，智能体只能观察到接收器，例如
    cabinet_1，countertop_1。智能体需要去到接收器处查看其中的物体，即使是开放的接收器。","类型":  "特殊机制","示例":  "","验证记录":  "由用户提供。"},"规则_1":{"规则":  "如果有多个接收器需要搜索，智能体可以编写并使用
    ’find_object’ 方法，如示例所示。","类型":  "有用的助手方法","示例":  ’’’# 定义助手方法以查找所需的物体def find_object(agent,
    recep_to_check, object_name):for receptacle in recep_to_check:observation = agent.go_to(receptacle)#
    检查是否需要打开接收器。如果需要，打开它.if ’closed’ in observation:observation = agent.open(receptacle)#
    检查物体是否在/在接收器中.if object_name in observation:object_ids = get_object_with_id(observation,
    object_name)return object_ids, receptaclereturn None, None’’’,"验证记录":  "由用户提供的基本助手方法。"},"规则_2":{"规则":  "如果任务是将某个物体放在某个接收器上，首先使用规则_1
    中的 ’find_object’ 方法搜索所有接收器，拿到物体，然后去目标接收器上放置物体。","类型":  "成功流程","示例":  ’’’# 例如，将喷雾瓶放在厕所上：#
    [步骤 1] 使用规则_1 中的 ’find_object’ 方法搜索所有接收器recep_to_check = ...object_ids, receptacle_with_spraybottle
    = find_object(agent, recep_to_check, ’spraybottle’)# [步骤 2] 拿到喷雾瓶# [步骤 3] 去厕所上'
- en: 'For MineWob++, the Planner is allowed to complete the task in steps: initially
    output segments of planned steps and pause to observe their outcomes to inform
    subsequent steps.'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 MineWob++，计划者可以分步完成任务：最初输出计划步骤的部分，并暂停以观察其结果，以指导后续步骤。
- en: 'Listing 8: The search-engine Example for MineWob++'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 8：MineWob++ 的搜索引擎示例
- en: 'Your  task  is  to  Use  the  textbox  to  enter  "Jerald"  and  press  "Search",  then  find  and  click  the  4th  search  result....(HTML)...###  Understanding  of  the  observation:  ...###  Rules  to  consider:  ...###  Plan  for  the  task:  I  need  to  click    textbox  and  type  "Jerald".  Then  I  need  to  click  "Search"  button  and  get  the  searching  result.  Finally,  navigate  to  and  click  on  the  4th  search  result.Here  is  a  code  of  my  plan:‘‘‘python#  [Step  1]  Find    textbox  and  type  "Jerald".textbox_xpath  =  "//*[@id=’search-text’]"agent.click_xpath(textbox_xpath)agent.type("Jerald")#  [Step  2]  Click  the  search  buttonsearch_button_xpath  =  "//*[@id=’search’]"html_string  =  agent.click_xpath(search_button_xpath)#  *Pause  here*,  waiting  for  the  search  to  execute  and  for  the  results  to  be  displayed.‘‘‘###  Feedbacks  ###...(some  feedbacks)......(resulting  HTML)...###  Understanding  of  the  observation:  ...  Because  one  page  only  displays  3  search  results,  I  need  to  turn  to  the  next  page  for  the  4th  search  result.###  Rules  to  consider:  ...###  Plan  for  the  task:  ...‘‘‘python#  Define  a  helper  method  to  turn  to  the  next  page.def  turn_to_next_page(agent):next_page_xpath  =  f"//*[@id=’pagination’]/li[@class=’page-item  next’]"html_string  =  agent.click_xpath(next_page_xpath)return  html_string#  [Step  3]  Use  ’turn_to_next_page’  method  to  turn  to  the  next  page  for  the  4th  search  result  and  click  the  resulthtml_string  =  turn_to_next_page(agent)#  data-result  start  from  0result_xpath  =  f"//*[@id=’page-content’]//a[@data-result=’3’]"agent.click_xpath(result_xpath)‘‘‘'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '你的任务是使用文本框输入“Jerald”，然后点击“搜索”，接着查找并点击第4个搜索结果。...(HTML)...###  观察理解：...###  需要考虑的规则：...###  任务计划：我需要点击``文本框并输入“Jerald”。然后我需要点击“搜索”按钮并获取搜索结果。最后，导航到并点击第4个搜索结果。这里是我的计划代码：‘‘‘python#  [步骤
    1] 查找``文本框并输入“Jerald”。textbox_xpath  =  "//*[@id=''search-text'']"agent.click_xpath(textbox_xpath)agent.type("Jerald")#  [步骤
    2] 点击搜索按钮search_button_xpath  =  "//*[@id=''search'']"html_string  =  agent.click_xpath(search_button_xpath)#  *在此暂停*，等待搜索执行并显示结果。‘‘‘###  反馈
    ###...(一些反馈)...###  观察理解：由于每页仅显示3个搜索结果，我需要翻到下一页才能查看第4个搜索结果。###  需要考虑的规则：...###  任务计划：...‘‘‘python#
    定义一个帮助方法来翻到下一页。def  turn_to_next_page(agent):next_page_xpath  =  f"//*[@id=''pagination'']/li[@class=''page-item  next'']"html_string  =  agent.click_xpath(next_page_xpath)return  html_string#  [步骤
    3] 使用`turn_to_next_page`方法翻到下一页以获取第4个搜索结果并点击该结果html_string  =  turn_to_next_page(agent)#  数据结果从0开始result_xpath  =  f"//*[@id=''page-content'']//a[@data-result=''3'']"agent.click_xpath(result_xpath)‘‘‘'
- en: 'Listing 9: Initial Rules for MineWob++ Induced from search-engine Example'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 9：从搜索引擎示例引出的 MineWob++ 初步规则
- en: '’rule_0’:{"rule":  "If  the  idx  of  the  target  search  result  exceeds  3  (the  number  of  results  per  page),  use  ’turn_to_next_page’  method  as  shown  in  the  example.","type":  "Useful  Helper  Method","example":  ’’’#  Turn  to  the  next  page.def  turn_to_next_page(agent):next_page_xpath  =  f"//*[@id=’pagination’]/li[@class=’page-item  next’]"html_string  =  agent.click_xpath(next_page_xpath)return  html_string’’’,"validation_record":  "Essential  helper  method  provided  by  User."},’rule_1’:  {"rule":  "If  the  task  needs  to  use  the  search  engine,  first  click    textbox,  type  the  target  string,  and  then  click  \"Search\"  button.  Next,  use  ’turn_to_next_page’  in  rule_1  to  turn  the  page  if  the  target  idx  exceed  3  and  click  the  target  result.",  "type":  "Success  Process","example":  ’’’#  For  example,  to  search  Jerald  and  click  the  4th  result:#  [Step  1]  Find    textbox  and  type  "Jerald".#  [Step  2]  Click  the  search  button.#  [Step  3]  Use  ’turn_to_next_page’  method  in  rule_1  to  turn  the  page  and  click  the  target  result.’’’,"validation_record":  "Provided  by  User."}'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '’rule_0’：{"rule":  "如果目标搜索结果的索引超过
    3（每页结果数量），请使用示例中显示的 ’turn_to_next_page’ 方法。","type":  "实用助手方法","example":  ’’’#
    转到下一页.def  turn_to_next_page(agent):next_page_xpath  =  f"//*[@id=’pagination’]/li[@class=’page-item  next’]"html_string  =  agent.click_xpath(next_page_xpath)return  html_string’’’,"validation_record":  "用户提供的基本助手方法。"},’rule_1’：  {"rule":  "如果任务需要使用搜索引擎，首先点击
     文本框，输入目标字符串，然后点击 “搜索” 按钮。接下来，如果目标索引超过 3，使用规则 1 中的 ’turn_to_next_page’
    方法翻页，并点击目标结果。", "type":  "成功流程","example":  ’’’# 例如，搜索 Jerald 并点击第 4 个结果:# [步骤  1]
    找到  文本框并输入 "Jerald"。# [步骤  2] 点击搜索按钮。# [步骤  3] 使用规则 1 中的 ’turn_to_next_page’
    方法翻页并点击目标结果。’’’,"validation_record":  "用户提供。"}'
- en: 'Listing 10: The enter-text Example for MineWob++'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 10：MineWob++ 的输入文本示例
- en: 'Your  task  is  to  Enter  "Ronda"  into  the  text  field  and  press  Submit....(HTML)...###  Outputs  ######  Understanding  of  the  observation:  ...###  Rules  to  consider:  ...###  Plan  for  the  task:  I  should  click  the  input  box,  type  "Ronda"  and  click  the  submit  button.Here  is  a  code  of  my  plan:‘‘‘python#  [Step  1]  Click  the  input  boxinputbox_xpath  =  "//input[@id=’tt’]"agent.click_xpath(inputbox_xpath)#  [Step  2]  Type  "Ronda"  into  the  input  boxagent.type("Ronda")#  [Step  3]  Click  the  submit  buttonsubmit_button_xpath  =  "//button[@id=’subbtn’]"agent.click_xpath(submit_button_xpath)‘‘‘###  Feedbacks  ###...(some  feedbacks)...obs_3:  Act:  agent.click_xpath("//button[@id=’subbtn’]").  Obs:  Action  done.  The  epoch  is  Done.  Succeed:  True.'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '你的任务是将“Ronda”输入到文本框中并点击提交……（HTML）……###
    输出 ###### 观察理解：……### 需要考虑的规则：……### 任务计划：我应该点击输入框，输入“Ronda”并点击提交按钮。以下是我计划的代码：‘‘‘python#  [步骤
    1] 点击输入框inputbox_xpath  =  "//input[@id=’tt’]"agent.click_xpath(inputbox_xpath)#  [步骤
    2] 输入“Ronda”到输入框agent.type("Ronda")#  [步骤 3] 点击提交按钮submit_button_xpath  =  "//button[@id=’subbtn’]"agent.click_xpath(submit_button_xpath)‘‘‘###
    反馈 ###……（一些反馈）……obs_3: 动作：agent.click_xpath("//button[@id=’subbtn’]"). 观察：动作完成。纪元完成。成功：True。'
- en: H.3 Prompts for Builder Agent
  id: totrans-335
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: H.3 构建者代理的提示
- en: 'Listing 11: System Prompts for The Builder Agent'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '列表 11: 构建者代理的系统提示'
- en: '[Role]You  are  observing  a  housekeeper  agent  as  it  codes  and  acts  within  a  simulated  environment  (game).  Your  Role  is  to  construct  a  manual  of  rules  to  not  only  assist  the  agent  in  completing  tasks  but  also  to  do  so  with  the  least  amount  of  attempts/errors.  This  requires  recording  and  analyzing  the  experiences  of  the  agent’s  successes  and  failures,  and  updating  previous  discoveries.[Functions]You  will  be  presented  with  the  current  epoch’s  trajectory.  The  interaction  in  the  trajectory  includes  the  agent’s  analysis,  execution  code,  and  the  resulting  feedback.You  should  use  the  following  methods  of  rule_system  to  build  and  improve  rules.rule_system.write_rule(rule,  type="",  example="",  validation_record="")#  Write  down  a  new  rule  of  the  game  you  discovered.#  Parameters:#  rule:  a  rule  of  the  game  you  discovered.#  type:  the  type  of  the  rule,  chosen  from  ["Special  Phenomena/Mechanism",  "Corrected  Error",  "Unresolved  Error",  "Useful  Helper  Method",  "Success  Process"].  The  "Corrected  Error"  can  include  misunderstandings  and  mistakes  that  have  been  corrected.#  example:  an  example  (or  code)  from  the  trajectory  demonstrates  this  rule.  You  can  add  detailed  information  in  the  comment.#  validation_record:  your  validation  record  on  this  rule,  including  the  epoch  IDs  and  rule  IDs  from  which  this  rule  is  induced.rule_system.update_rule(rule_id,  rule="",  type="",  example="",  validation_record=""),#  Rewrite  the  attributes  of  an  existing  rule  when  you  come  up  with  a  better  understanding.#  Input  only  the  attributes  you  want  to  rewrite.rule_system.stop_generating()#  Description:  stop  generating  rules  from  the  current  epoch.#  Use  Case:  When  you  believe  that  the  trajectory  of  the  current  epoch  is  not  needed  or  insufficient  to  derive  any  more  new  rules,  you  can  call  this  function  and  wait  for  the  next  epoch’s  data.  You  should  also  call  this  function  when  you  have  updated  all  rules  for  the  current  epoch.[Actions]At  each  epoch,  an  agent  is  created  in  an  environment,  and  the  initial  observation  and  target  task  are  printed.  The  agent  can  only  use  the  following  action  functions:agent.go_to(receptacle)  #  Go  to  a  receptacle  and  update  the  agent’s  location.agent.open(receptacle)  #  Open  a  receptacle  and  observe  its  contents.agent.close(receptacle)  #  Close  a  opened  receptacle.agent.take_from(object,  receptacle)  #  Take  an  object  from  a  receptacle  if  the  agent  is  not  holding  anything.agent.put_in_or_on(object,  receptacle)  #  Put  an  object  in  or  on  a  receptacle  if  the  agent  is  holding  it.agent.use(object)  #  Use  a  lamp.agent.clean_with(object,  receptacle)  #  Clean  an  object  with  a  receptacle.agent.heat_with(object,  receptacle)  #  Heat  an  object  with  a  receptacle.agent.cool_with(object,  receptacle)  #  Cool  an  object  with  a  receptacle.get_object_with_id(observation,  object_name)  #  Extracts  a  list  of  object_ids  with  the  specified  object_name  from  the  observation.[Response  Instructions]Upon  receiving  the  current  trajectory,  you  should  first  identify  the  case  of  the  current  trajectory’s  result  and  then  build  rules  following  the  corresponding  instructions.'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '[⬇](data:text/plain;base64,W1JvbGVdCllvdSBhcmUgb2JzZXJ2aW5nIGEgaG91c2VrZWVwZXIgYWdlbnQgYXMgaXQgY29kZXMgYW5kIGFjdHMgd2l0aGluIGEgc2ltdWxhdGVkIGVudmlyb25tZW50IChnYW1lKS4gWW91ciBSb2xlIGlzIHRvIGNvbnN0cnVjdCBhIG1hbnVhbCBvZiBydWxlcyB0byBub3Qgb25seSBhc3Npc3QgdGhlIGFnZW50IGluIGNvbXBsZXRpbmcgdGFza3MgYnV0IGFsc28gdG8gZG8gc28gd2l0aCB0aGUgbGVhc3QgYW1vdW50IG9mIGF0dGVtcHRzL2Vycm9ycy4gVGhpcyByZXF1aXJlcyByZWNvcmRpbmcgYW5kIGFuYWx5emluZyB0aGUgZXhwZXJpZW5jZXMgb2YgdGhlIGFnZW50J3Mgc3VjY2Vzc2VzIGFuZCBmYWlsdXJlcywgYW5kIHVwZGF0aW5nIHByZXZpb3VzIGRpc2NvdmVyaWVzLgoKW0Z1bmN0aW9uc10KWW91IHdpbGwgYmUgcHJlc2VudGVkIHdpdGggdGhlIGN1cnJlbnQgZXBvY2gncyB0cmFqZWN0b3J5LiBUaGUgaW50ZXJhY3Rpb24gaW4gdGhlIHRyYWplY3RvcnkgaW5jbHVkZXMgdGhlIGFnZW50J3MgYW5hbHlzaXMsIGV4ZWN1dGlvbiBjb2RlLCBhbmQgdGhlIHJlc3VsdGluZyBmZWVkYmFjay4KCllvdSBzaG91bGQgdXNlIHRoZSBmb2xsb3dpbmcgbWV0aG9kcyBvZiBydWxlX3N5c3RlbSB0byBidWlsZCBhbmQgaW1wcm92ZSBydWxlcy4KCnJ1bGVfc3lzdGVtLndyaXRlX3J1bGUocnVsZSwgdHlwZT0iIiwgZXhhbXBsZT0iIiwgdmFsaWRhdGlvbl9yZWNvcmQ9IiIpCiMgV3JpdGUgZG93biBhIG5ldyBydWxlIG9mIHRoZSBnYW1lIHlvdSBkaXNjb3ZlcmVkLgojIFBhcmFtZXRlcnM6CiMgICBydWxlOiBhIHJ1bGUgb2YgdGhlIGdhbWUgeW91IGRpc2NvdmVyZWQuCiMgICB0eXBlOiB0aGUgdHlwZSBvZiB0aGUgcnVsZSwgY2hvc2VuIGZyb20gWyJTcGVjaWFsIFBoZW5vbWVuYS9NZWNoYW5pc20iLCAiQ29ycmVjdGVkIEVycm9yIiwgIlVucmVzb2x2ZWQgRXJyb3IiLCAiVXNlZnVsIEhlbHBlciBNZXRob2QiLCAiU3VjY2VzcyBQcm9jZXNzIl0uIFRoZSAiQ29ycmVjdGVkIEVycm9yIiBjYW4gaW5jbHVkZSBtaXN1bmRlcnN0YW5kaW5ncyBhbmQgbWlzdGFrZXMgdGhhdCBoYXZlIGJlZW4gY29ycmVjdGVkLgojICAgZXhhbXBsZTogYW4gZXhhbXBsZSAob3IgY29kZSkgZnJvbSB0aGUgdHJhamVjdG9yeSBkZW1vbnN0cmF0ZXMgdGhpcyBydWxlLiBZb3UgY2FuIGFkZCBkZXRhaWxlZCBpbmZvcm1hdGlvbiBpbiB0aGUgY29tbWVudC4KIyAgIHZhbGlkYXRpb25fcmVjb3JkOiB5b3VyIHZhbGlkYXRpb24gcmVjb3JkIG9uIHRoaXMgcnVsZSwgaW5jbHVkaW5nIHRoZSBlcG9jaCBJRHMgYW5kIHJ1bGUgSURzIGZyb20gd2hpY2ggdGhpcyBydWxlIGlzIGluZHVjZWQuCgpydWxlX3N5c3RlbS51cGRhdGVfcnVsZShydWxlX2lkLCBydWxlPSIiLCB0eXBlPSIiLCBleGFtcGxlPSIiLCB2YWxpZGF0aW9uX3JlY29yZD0iIiksCiMgUmV3cml0ZSB0aGUgYXR0cmlidXRlcyBvZiBhbiBleGlzdGluZyBydWxlIHdoZW4geW91IGNvbWUgdXAgd2l0aCBhIGJldHRlciB1bmRlcnN0YW5kaW5nLgojIElucHV0IG9ubHkgdGhlIGF0dHJpYnV0ZXMgeW91IHdhbnQgdG8gcmV3cml0ZS4KCnJ1bGVfc3lzdGVtLnN0b3BfZ2VuZXJhdGluZygpCiMgRGVzY3JpcHRpb246IHN0b3AgZ2VuZXJhdGluZyBydWxlcyBmcm9tIHRoZSBjdXJyZW50IGVwb2NoLgojIFVzZSBDYXNlOiBXaGVuIHlvdSBiZWxpZXZlIHRoYXQgdGhlIHRyYWplY3Rvcnkgb2YgdGhlIGN1cnJlbnQgZXBvY2ggaXMgbm90IG5lZWRlZCBvciBpbnN1ZmZpY2llbnQgdG8gZGVyaXZlIGFueSBtb3JlIG5ldyBydWxlcywgeW91IGNhbiBjYWxsIHRoaXMgZnVuY3Rpb24gYW5kIHdhaXQgZm9yIHRoZSBuZXh0IGVwb2NoJ3MgZGF0YS4gWW91IHNob3VsZCBhbHNvIGNhbGwgdGhpcyBmdW5jdGlvbiB3aGVuIHlvdSBoYXZlIHVwZGF0ZWQgYWxsIHJ1bGVzIGZvciB0aGUgY3VycmVudCBlcG9jaC4KCltBY3Rpb25zXQpBdCBlYWNoIGVwb2NoLCBhbiBhZ2VudCBpcyBjcmVhdGVkIGluIGFuIGVudmlyb25tZW50LCBhbmQgdGhlIGluaXRpYWwgb2JzZXJ2YXRpb24gYW5kIHRhcmdldCB0YXNrIGFyZSBwcmludGVkLiBUaGUgYWdlbnQgY2FuIG9ubHkgdXNlIHRoZSBmb2xsb3dpbmcgYWN0aW9uIGZ1bmN0aW9uczoKCmFnZW50LmdvX3RvKHJlY2VwdGFjbGUpICMgR28gdG8gYSByZWNlcHRhY2xlIGFuZCB1cGRhdGUgdGhlIGFnZW50J3MgbG9jYXRpb24uCmFnZW50Lm9wZW4ocmVjZXB0YWNsZSkgIyBPcGVuIGEgcmVjZXB0YWNsZSBhbmQgb2JzZXJ2ZSBpdHMgY29udGVudHMuCmFnZW50LmNsb3NlKHJlY2VwdGFjbGUpICMgQ2xvc2UgYSBvcGVuZWQgcmVjZXB0YWNsZS4KYWdlbnQudGFrZV9mcm9tKG9iamVjdCwgcmVjZXB0YWNsZSBpZi'
- en: 'Listing 12: Case Classify Prompts for Builder'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 'Listing 12: 构建者案例分类提示'
- en: 'Please  analyze  the  scenario  to  identify  the  root  cause  of  the  observed  mistakes  and  describe  the  existing  rules  related  to  the  mistakes.  Then  check  whether  there  exists  a  "Success  Process"  rule  applicable  to  this  type  of  task.  Finally,  determine  whether  the  fault  stems  from:-  *Imperfect  Rules*:  the  agent  encounters  unexpected  phenomena  that  are  not  fully  documented  in  the  current  rules,  or  the  rules  have  not  included  the  "Success  Process"  of  this  task  type.-  *Imperfect  Agent*:  the  rules  fully  document  the  "Success  Process"  and  error  reminders  of  such  scenarios,  but  the  agent  fails  to  follow  these  rules  meticulously.Consider  each  step  of  the  process  carefully  and  conclude  with  either  *Imperfect  Rules*  or  *Imperfect  Agent*  based  on  your  analysis.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '请分析这一情况，以识别观察到的错误的根本原因，并描述与这些错误相关的现有规则。然后检查是否存在适用于此类任务的“成功过程”规则。最后，根据您的分析确定故障是否来源于：-   *不完善的规则*：代理遇到当前规则中没有充分记录的意外现象，或者规则中未包含此任务类型的“成功过程”。-   *不完善的代理*：规则完全记录了这种场景的“成功过程”和错误提醒，但代理未能严格遵循这些规则。仔细考虑过程的每个步骤，并根据分析结果以*不完善的规则*或*不完善的代理*作出结论。'
- en: 'Listing 13: Base Prompts for Builder'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 'Listing 13: 构建者基本提示'
- en: '[Output  Format  Instructions]Based  on  the  current  trajectory  and  your  analysis,  you  should  output  the  following  things:*  Potential  Rules:  Describe  your  thoughts  about  potential  rules  based  on  the  current  trajectory.  Depending  on  the  results,  you  may  need  to  check  *Success  Process*,  *Helper  Method*,  *Corrected  Error*,  *Unresolved  Error*,  and  other  findings  in  sequence.  Each  potential  rule  needs  to  be  clarified  whether  it  is  related  to  existing  rules.*  Check  Difference:  Describe  whether  the  potential  rules  target  different  phenomena.*  Check  Existing  Rules:  Describe  whether  existing  rules  are  conflicted  or  need  updating.*  Codes:  Finally,  sequentially  call  the  rule_system’s  functions  within  "‘‘‘python"  and  "‘‘‘".[Detailed  instructions]**Maintain  a  maximum  of  12  rules**  Try  to  make  each  rule  useful  and  non-repetitive,  and  insert  new  rules  into  closely  related  ones.**Add  Rules**  Extract  "Special  Phenomena/Mechanism"  rules  when  interactions  appear  counterintuitive,  environment-specific,  or  when  the  agent  expresses  uncertainty  about  the  environment  mechanics  (e.g.,  using  "assume..."  in  the  comment).  Refrain  from  making  speculative  suggestions  or  guesses.  Instead,  conservatively  document  phenomena  and  the  agent’s  valuable  insights.**Keep  new  rules  targeted  and  precise.**  Break  down  a  large  phenomenon  or  general  strategy  into  targeted  units  as  individual  rules.  These  can  later  be  upgraded  or  merged  into  a  more  general  or  larger  rule.**Write  rules’  scope**  The  time  when  the  rule  is  triggered,  or  the  task  scope  of  the  rule  should  be  mentioned  at  the  beginning  of  the  rule.**Avoiding  overconfidence  for  new  rules**  Please  acknowledge  the  need  for  further  verification  in  your  note.**Update  Rules**  If  an  existing  rule  needs  to  be  updated  to  include  a  new  phenomenon,  you  should  try  to  preserve  the  details  of  the  existing  content  and  preferably  insert  a  categorial  discussion  or  just  insert  new  content  into  it  (or  its  example).  Especially,  the  rules  of  "Success  Process"  and  "Useful  Helper  Method"  type  should  retain  their  details.  Then  update  the  rule’s  validation_record  after  further  verification  or  revision.'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '[Output  Format  Instructions]Based  on  the  current  trajectory  and  your  analysis,  you  should  output  the  following  things:*  Potential  Rules:  Describe  your  thoughts  about  potential  rules  based  on  the  current  trajectory.  Depending  on  the  results,  you  may  need  to  check  *Success  Process*,  *Helper  Method*,  *Corrected  Error*,  *Unresolved  Error*,  and  other  findings  in  sequence.  Each  potential  rule  needs  to  be  clarified  whether  it  is  related  to  existing  rules.*  Check  Difference:'
- en: 'Listing 14: Case 1 Prompts for Builder'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 14：案例 1 构建者的提示
- en: '**Rules  for  Success**  You  should  extract  "Useful  Helper  Method"  and  "Success  Process":*  For  each  useful  helper  function  identified:  If  it  is  not  already  included  in  a  rule,  create  a  rule  of  type  "Useful  Helper  Method"  and  record  its  code  unchanged  in  the  rule’s  example  section.  If  a  method  with  similar  functionality  already  exists  in  the  rule,  consider  whether  the  rule  needs  to  be  updated.*  If  the  success  process  does  not  fall  within  the  scope  of  an  existing  "Success  Process"  rule,  faithfully  document  all  steps  (marked  as  "[Step]")  in  the  successful  code  within  a  rule  of  type  "Success  Process",  and  document  necessary  codes  and  reminders  in  the  rule’s  example;  if  the  success  process  of  the  current  task  falls  within  the  scope  of  the  existing  "Success  Process"  rule,  consider  whether  the  rule  needs  to  be  updated  to  incorporate  the  current  roadmap.'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '**成功规则**
    你应该提取“有用的辅助方法”和“成功过程”：* 对于每个识别出的有用辅助函数：如果它尚未包含在规则中，则创建一个类型为“有用的辅助方法”的规则，并将其代码原封不动地记录在规则的示例部分。如果规则中已经存在具有类似功能的方法，则考虑是否需要更新规则。*
    如果成功过程不属于现有“成功过程”规则的范围，则在类型为“成功过程”的规则中忠实记录成功代码中的所有步骤（标记为“[步骤]”），并在规则的示例中记录必要的代码和提醒；如果当前任务的成功过程属于现有的“成功过程”规则范围，则考虑是否需要更新规则以纳入当前的路线图。'
- en: 'Listing 15: Case 2 Prompts for Builder'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 15：案例 2 构建者的提示
- en: '**Rules  for  Success**  You  should  extract  "Useful  Helper  Method"  and  "Success  Process":*  For  each  useful  helper  function  identified:  If  it  is  not  already  included  in  a  rule,  create  a  rule  of  type  "Useful  Helper  Method"  and  record  its  code  unchanged  in  the  rule’s  example  section.  If  a  method  with  similar  functionality  already  exists  in  the  rule,  consider  whether  the  rule  needs  to  be  updated.*  If  the  success  process  does  not  fall  within  the  scope  of  an  existing  "Success  Process"  rule,  faithfully  document  all  steps  (marked  as  "[Step]")  in  the  successful  code  within  a  rule  of  type  "Success  Process",  and  document  necessary  codes  and  reminders  in  the  rule’s  example;  if  the  success  process  of  the  current  task  falls  within  the  scope  of  the  existing  "Success  Process"  rule,  consider  whether  the  rule  needs  to  be  updated  to  incorporate  the  current  roadmap.**Rules  for  Misstep**  You  should  reflect  on  the  main  misstep  to  improve  efficiency  and  log  it  into  the  "Corrected  Error"  type  rule,  including  corrective  code  validated  by  the  feedback  (with  the  help  of  the  agent’s  analysis  and  code,  but  its  conclusion  may  not  be  correct  and  should  be  checked  carefully).'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '**成功规则**
    你应该提取“有用的辅助方法”和“成功过程”：* 对于每个识别出的有用辅助函数：如果它尚未包含在规则中，创建一个“有用的辅助方法”类型的规则，并将其代码不变地记录在规则的示例部分。如果规则中已存在功能相似的方法，请考虑是否需要更新规则。*
    如果成功过程不属于现有的“成功过程”规则的范围内，忠实地记录成功代码中的所有步骤（标记为“[步骤]”）在“成功过程”类型的规则中，并在规则的示例中记录必要的代码和提醒；如果当前任务的成功过程在现有的“成功过程”规则范围内，请考虑是否需要更新规则以纳入当前的路线图。**错误规则**
    你应该反思主要的错误以提高效率，并将其记录到“已纠正错误”类型的规则中，包括经过反馈验证的纠正代码（通过代理的分析和代码帮助，但其结论可能不正确，应仔细检查）。'
- en: 'Listing 16: Case 3 Prompts for Builder'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16：案例 3 构建者的提示
- en: '**Rules  for  Success**  You  might  need  to  update  "Useful  Helper  Method"  and  "Success  Process".*  For  each  useful  helper  method  identified:  If  a  method  with  similar  functionality  already  exists  in  the  rule,  consider  whether  the  rule  needs  to  be  updated.*  If  the  success  process  of  the  current  task  falls  within  the  scope  of  the  existing  "Success  Process"  rule,  consider  whether  you  need  to  update  the  rule  to  include  some  tips  or  include  important  and  specific  code  in  its  examples.**Rules  for  Misstep**  Identify  existing  rules  that  agents  failed  to  follow  and  resulted  in  major  mistakes.  You  should  update  the  rule  to  emphasize  some  important  points  (you  can  add  **...**  at  the  part  of  the  rule  you  want  to  emphasize)  or  to  add  error-prone  points  (perhaps  added  to  the  comments  of  the  example  code).'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '**成功规则**
    你可能需要更新“有用的助手方法”和“成功过程”。* 对于每个识别出的有用助手方法：如果规则中已经存在功能类似的方法，请考虑是否需要更新规则。* 如果当前任务的成功过程属于现有的“成功过程”规则的范围，请考虑是否需要更新规则，以包含一些提示或在示例中包含重要且具体的代码。**错误规则**
    识别代理人未能遵循并导致重大错误的现有规则。你应该更新规则以强调一些重要点（你可以在你想强调的规则部分添加**...**），或添加易出错的点（可能添加到示例代码的注释中）。'
- en: 'Listing 17: Case 4 Prompts for Builder'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17：案例 4 建设者的提示
- en: '**Rules  for  Final  Error**  Based  on  your  previous  analysis  and  conclusion,  summarize  the  final  error  that  led  to  failure.  You  should  write  an  "Unresolved  Error"  rule  to  record  the  error:  in  what  situation,  what  the  agent  did,  and  what  results  were  produced.  So  that  they  can  serve  as  reminders  for  the  agent  in  the  future.  Please  don’t  rush  to  propose  any  definitive  reasons  or  suggestions  for  the  error;  just  record  it.The  final  error  is  unresolved  and  cannot  be  included  in  rules  of  other  types  than  "Unresolved  Error".  As  the  task  failed,  you  cannot  write  down  any  "Success  Process"  or  "Useful  Helper  Method"  rules.'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '**最终错误规则**
    根据你之前的分析和结论，总结导致失败的最终错误。你应该写一个“未解决错误”规则来记录这个错误：在什么情况下，代理做了什么，以及产生了什么结果。以便它们可以作为代理未来的提醒。请不要急于提出任何确定的原因或建议；只需记录下来。最终错误是未解决的，不能包括在除“未解决错误”之外的其他类型规则中。由于任务失败，你不能写任何“成功流程”或“有用的辅助方法”规则。'
- en: 'Listing 18: Case 5 Prompts for Builder'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '列表 18: 案例 5 建造者的提示'
- en: '**Rules  for  Misstep**  Identify  existing  rules  that  agents  failed  to  follow  and  resulted  in  major  misstep.  You  should  update  the  rule  to  emphasize  some  important  points  (you  can  add  **...**  at  the  part  of  the  rule  you  want  to  emphasize)  or  to  add  error-prone  points  (perhaps  added  to  the  comments  of  the  example  code).Remember  that  the  rules  of  "Success  Process"  and  "Useful  Helper  Method"  type  should  retain  their  details.'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '**错误规则**
    确定代理未遵循的现有规则，这些规则导致了重大错误。你应该更新规则以强调一些重要点（可以在你想强调的部分添加**...**）或添加容易出错的点（可以添加到示例代码的注释中）。请记住，“成功流程”和“有用的辅助方法”类型的规则应该保留其详细信息。'
- en: H.4 Prompts for Consolidator Agent
  id: totrans-352
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: H.4 合并器代理的提示
- en: 'Listing 19: System Prompts for Consolidator'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '列表 19: 合并器的系统提示'
- en: '[Role]You  are  observing  a  housekeeper  agent  as  it  codes  and  acts  within  a  simulated  environment  (game).  Your  goal  is  to  construct  a  manual  of  rules  to  assist  the  agent  in  completing  various  tasks  in  the  environment.  Your  Role  is  to  merge  or  delete  previously  found  rules  by  analyzing  the  experiences  of  the  agent.[Functions]You  will  be  presented  with  the  current  found  rules.  The  rules  are  extracted  from  many  epochs’  trajectories,  in  which  each  interaction  includes  the  agent’s  analysis,  execution  code,  and  the  resulting  feedback.A  rule  is  represented  with  ’rule_id’  and  has  the  following  attributes:-  rule:  the  description  of  the  rule,  which  begins  with  its  use  case  or  scope.-  type:  the  type  of  the  rule.-  example:  an  example  (or  code)  from  the  trajectory  demonstrates  this  rule.  You  can  add  detailed  information  in  the  comment.-  validation_record:  your  validation  record  on  this  rule,  including  the  epoch  IDs  and  rule  IDs  from  which  this  rule  is  induced.You  should  use  the  following  methods  of  rule_system  to  delete  and  merge  rules.rule_system.update_rule(rule_id,  rule="",  type="",  example="",  validation_record="")#  Rewrite  the  attributes  of  an  existing  rule  when  you  come  up  with  a  better  understanding.#  Input  only  the  attributes  you  want  to  rewrite.rule_system.delete_rule(rule_id)#  Delete  a  existing  rule  with  rule_id.#  **How  to  merge**  To  merge  two  existing  rules,  you  can  call  rule_system.update_rule  for  one  rule  and  then  call  rule_system.delete_rule  to  delete  another  rule.rule_system.get_interactions(epoch_ids)#  Get  the  interaction  history  of  previous  epochs  by  their  IDs.#  Use  Case:  You  can  use  this  tool  to  get  the  interactions  from  previous  epochs  (epoch  starts  from  0).  You  may  need  to  check  the  validation_record  of  an  existing  rule  to  know  which  epochs  to  get.#  Parameters:#  epoch_ids:  a  string  containing  the  epoch  IDs  from  previous  epochs,  separated  by  commas,  e.g.,  epoch_0,epoch2.rule_system.stop_generating()#  Description:  stop  generating  rules  from  the  current  epoch.#  Use  Case:  You  should  call  this  function  when  you  have  finished  updating  all  rules  for  the  current  epoch.[Actions]At  each  epoch,  an  agent  is  created  in  an  environment.  The  agent  can  only  use  the  following  action  functions  in  its  code  to  interact  with  the  environment:agent.go_to(receptacle)  #  Go  to  a  receptacle  and  update  the  agent’s  location.agent.open(receptacle)  #  Open  a  receptacle  and  observe  its  contents.agent.close(receptacle)  #  Close  a  opened  receptacle.agent.take_from(object,  receptacle)  #  Take  an  object  from  a  receptacle  if  the  agent  is  not  holding  anything.agent.put_in_or_on(object,  receptacle)  #  Put  an  object  in  or  on  a  receptacle  if  the  agent  is  holding  it.agent.use(object)  #  Use  a  lamp.agent.clean_with(object,  receptacle)  #  Clean  an  object  with  a  receptacle.agent.heat_with(object,  receptacle)  #  Heat  an  object  with  a  receptacle.agent.cool_with(object,  receptacle)  #  Cool  an  object  with  a  receptacle.get_object_with_id(observation,  object_name)  #  Extracts  a  list  of  object_ids  with  the  specified  object_name  from  the  observation.[Response  Instructions]Output  Process:After  receiving  the  current  rules,  you  should  select  potential  rules  to  investigate  and  then  delete  or  merge  rules.Detailed  instructions:**Maintain  a  maximum  of  12  rules****Merge  if  addressed**  If  a  "Success  Process"  rule  can  address  the  "Corrected  Error"  or  "Unresolved  Error"  rule,  you  can  consider  merging  these  rules  while  retaining  their  details.**Retain  important  details**  The  rules  of  "Success  Process"  and  "Useful  Helper  Method"  type  should  retain  their  details,  and  should  not  be  deleted  or  easily  refreshed  by  new  updates.  You  cannot  merge  two  rules  of  type  "Success  Process"  or  "Useful  Helper  Method"!**Insertion  is  preferable**  If  a  rule  is  updated  to  include  the  content  of  other  rules,  you  should  try  to  preserve  the  details  of  the  existing  content  and  preferably  insert  a  categorial  discussion  or  insert  new  content  to  it  (or  its  example).'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '[⬇](data:text/plain;base64,W1JvbGVdCllvdSBhcmUgb2JzZXJ2aW5nIGEgaG91c2VrZWVwZXIgYWdlbnQgYXMgaXQgY29kZXMgYW5kIGFjdHMgd2l0aGluIGEgc2ltdWxhdGVkIGVudmlyb25tZW50IChnYW1lKS4gWW91ciBnb2FsIGlzIHRvIGNvbnN0cnVjdCBhIG1hbnVhbCBvZiBydWxlcyB0byBhc3Npc3QgdGhlIGFnZW50IGluIGNvbXBsZXRpbmcgdmFyaW91cyB0YXNrcyBpbiB0aGUgZW52aXJvbm1lbnQuIFlvdXIgUm9sZSBpcyB0byBtZXJnZSBvciBkZWxldGUgcHJldmlvdXNseSBmb3VuZCBydWxlcyBieSBhbmFseXppbmcgdGhlIGV4cGVyaWVuY2VzIG9mIHRoZSBhZ2VudC4KCltGdW5jdGlvbnNdCllvdSB3aWxsIGJlIHByZXNlbnRlZCB3aXRoIHRoZSBjdXJyZW50IGZvdW5kIHJ1bGVzLiBUaGUgcnVsZXMgYXJlIGV4dHJhY3RlZCBmcm9tIG1hbnkgZXBvY2hzJyB0cmFqZWN0b3JpZXMsIGluIHdoaWNoIGVhY2ggaW50ZXJhY3Rpb24gaW5jbHVkZXMgdGhlIGFnZW50J3MgYW5hbHlzaXMsIGV4ZWN1dGlvbiBjb2RlLCBhbmQgdGhlIHJlc3VsdGluZyBmZWVkYmFjay4KCkEgcnVsZSBpcyByZXByZXNlbnRlZCB3aXRoICdydWxlX2lkJyBhbmQgaGFzIHRoZSBmb2xsb3dpbmcgYXR0cmlidXRlczoKICAgLSBydWxlOiB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIHJ1bGUsIHdoaWNoIGJlZ2lucyB3aXRoIGl0cyB1c2UgY2FzZSBvciBzY29wZS4KICAgLSB0eXBlOiB0aGUgdHlwZSBvZiB0aGUgcnVsZS4KICAgLSBleGFtcGxlOiBhbiBleGFtcGxlIChvciBjb2RlKSBmcm9tIHRoZSB0cmFqZWN0b3J5IGRlbW9uc3RyYXRlcyB0aGlzIHJ1bGUuIFlvdSBjYW4gYWRkIGRldGFpbGVkIGluZm9ybWF0aW9uIGluIHRoZSBjb21tZW50LgogICAtIHZhbGlkYXRpb25fcmVjb3JkOiB5b3VyIHZhbGlkYXRpb24gcmVjb3JkIG9uIHRoaXMgcnVsZSwgaW5jbHVkaW5nIHRoZSBlcG9jaCBJRHMgYW5kIHJ1bGUgSURzIGZyb20gd2hpY2ggdGhpcyBydWxlIGlzIGluZHVjZWQuCgpZb3Ugc2hvdWxkIHVzZSB0aGUgZm9sbG93aW5nIG1ldGhvZHMgb2YgcnVsZV9zeXN0ZW0gdG8gZGVsZXRlIGFuZCBtZXJnZSBydWxlcy4KCnJ1bGVfc3lzdGVtLnVwZGF0ZV9ydWxlKHJ1bGVfaWQsIHJ1bGU9IiIsIHR5cGU9IiIsIGV4YW1wbGU9IiIsIHZhbGlkYXRpb25fcmVjb3JkPSIiKQojIFJld3JpdGUgdGhlIGF0dHJpYnV0ZXMgb2YgYW4gZXhpc3RpbmcgcnVsZSB3aGVuIHlvdSBjb21lIHVwIHdpdGggYSBiZXR0ZXIgdW5kZXJzdGFuZGluZy4KIyBJbnB1dCBvbmx5IHRoZSBhdHRyaWJ1dGVzIHlvdSB3YW50IHRvIHJld3JpdGUuCgpydWxlX3N5c3RlbS5kZWxldGVfcnVsZShydWxlX2lkKQojIERlbGV0ZSBhIGV4aXN0aW5nIHJ1bGUgd2l0aCBydWxlX2lkLgojICoqSG93IHRvIG1lcmdlKiogVG8gbWVyZ2UgdHdvIGV4aXN0aW5nIHJ1bGVzLCB5b3UgY2FuIGNhbGwgdHJ1bGVfc3lzdGVtLnVwZGF0ZV9ydWxlIGZvciBvbmUgcnVsZSBhbmQgdGhlbiBuZWVkIGNhbGwgdHJ1bGVfc3lzdGVtLmRlbGV0ZV9ydWxlIHRvIGRlbGV0ZSBhbm90aGVycnVsZS4KCnJ1bGVfc3lzdGVtLmdldF9pbnRlcmFjdGlvbnMoZXBvY2hfaWRzKQojIEdldCB0aGUgaW50ZXJhY3Rpb24gaGlzdG9yeSBvZiBwcmV2aW91cyBlcG9jaHMgYnkgdGhlaXIgSURzLgojIFVzZSBDYXNlOiBZb3UgY2FuIHVzZSB0aGlzIHRvb2wgdG8gZ2V0IHRoZSBpbnRlcmFjdGlvbnMgZnJvbSBwcmV2aW91cyBlcG9jaHMgKGVwb2NoIHN0YXJ0cyBmcm9tIDApLiBZb3UgbWF5IG5lZWQgdG8gY2hlY2sgdGhlIHZhbGlkYXRpb25fcmVjb3JkIG9mIGFuIGV4aXN0aW5nIHJ1bGUgdG8ga25vdyB3aGljaCBlcG9jaHMgdG8gZ2V0LgojIFBhcmFtZXRlcnM6CiMgICBlcG9jaF9pZHM6IGEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGVwb2NoIElEcyBmcm9tIHByZXZpb3VzIGVwb2Nocywgc2VwYXJhdGVkIGJ5IGNvbW1hcywgZS5nLiwgZXBvY2hfMCxlcG9jaDIuCgpydWxlX3N5c3RlbS5zdG9wX2dlbmVyYXRpbmcoKQojIERlc2NyaXB0aW9uOiBzdG9wIGdlbmVyYXRpbmcgcnVsZXMgZnJvbSB0aGUgY3VycmVudCBlcG9jaC4KIyBVc2UgQ2FzZTogWW91IHNob3VsZCBjYWxsIHRoaXMgZnVuY3Rpb24gd2hlbiB5b3UgaGF2ZSBmaW5pc2hlZCB1cGRhdGluZyBhbGwgcnVsZXMgZm9yIHRoZSBjdXJyZW50IGVwb2NoLgoKW0FjdGlvbnNdCkF0IGVhY2ggZXBvY2gsIGFuIGFnZW50IGlzIGNyZWF0ZWQgaW4gYW4gZW52aXJvbm1lbnQuIFRoZSBhZ2VudCBjYW4gb25seSB1c2UgdGhlIGZvbGxvd2luZyBhY3Rpb24gZnVuY3Rpb25zIGluIGl0cyBjb2RlIHRvIGludGVyYWN0IHdpdGggdGhlIGV'
- en: H.5 Prompts for Formulator Agent
  id: totrans-355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: H.5 公式制定器代理的提示
- en: 'Listing 20: System Prompts for Formulator'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 20：公式制定器的系统提示
- en: '[Role]You  are  observing  a  housekeeper  agent  as  it  codes  and  acts  within  a  simulated  environment  (game).  Your  goal  is  to  construct  a  manual  of  rules  to  assist  the  agent  in  completing  various  tasks  in  the  environment.  Your  role  is  to  formulate  a  manual  based  on  the  found  rules,  including  categorizing  and  summarizing  related  rules.[Functions]You  will  be  presented  with  the  current  found  rules.  The  rules  are  extracted  from  many  epochs’  trajectories,  in  which  each  interaction  includes  the  agent’s  analysis,  execution  code,  and  the  resulting  feedback.A  rule  is  represented  with  ’rule_id’  and  has  the  following  attributes:-  rule:  the  description  of  the  rule,  which  begins  with  its  use  case  or  scope.-  type:  the  type  of  the  rule.-  example:  an  example  (or  code)  from  the  trajectory  demonstrates  this  rule.  You  can  add  detailed  information  in  the  comment.-  validation_record:  your  validation  record  on  this  rule,  including  the  epoch  IDs  and  rule  IDs  from  which  this  rule  is  induced.[Actions]At  each  epoch,  an  agent  is  created  in  an  environment.  The  agent  can  only  use  the  following  action  functions  in  its  code  to  interact  with  the  environment:agent.go_to(receptacle)  #  Go  to  a  receptacle  and  update  the  agent’s  location.agent.open(receptacle)  #  Open  a  receptacle  and  observe  its  contents.agent.close(receptacle)  #  Close  a  opened  receptacle.agent.take_from(object,  receptacle)  #  Take  an  object  from  a  receptacle  if  the  agent  is  not  holding  anything.agent.put_in_or_on(object,  receptacle)  #  Put  an  object  in  or  on  a  receptacle  if  the  agent  is  holding  it.agent.use(object)  #  Use  a  lamp.agent.clean_with(object,  receptacle)  #  Clean  an  object  with  a  receptacle.agent.heat_with(object,  receptacle)  #  Heat  an  object  with  a  receptacle.agent.cool_with(object,  receptacle)  #  Cool  an  object  with  a  receptacle.get_object_with_id(observation,  object_name)  #  Extracts  a  list  of  object_ids  with  the  specified  object_name  from  the  observation.[Response  Instructions]Output  Process:After  receiving  the  current  rules,  you  should  output  the  following  things:*  General  Understandings:  Describe  your  overall  understanding  of  all  rules  and  some  specific  rules.*  Category  of  Rules:  Methodically  analyze  the  connections  between  related  rules,  then  cluster  these  rules,  and  propose  category  names  for  the  clusters.  Make  sure  each  rule  must  belong  to  one  and  only  one  category!*  The  Manual:  Finally,  sequentially  write  a  structured  manual  within  ’‘‘‘markdown’  and  ’‘‘‘’.  In  the  manual,  you  first  describe  the  overview  of  all  rules  and  then  introduce  each  category  of  rules.  In  each  category,  you  should  list  the  rules  and  write  rule_id  within  **  and  **.Detailed  instructions:1.  Categorize  rules  based  on  their  use  cases  and  topics  they  target,  not  based  on  their  "type".2.  If  two  "Success  Process"  rules  follow  the  same  critical  success  points  or  process,  you  can  consider  categorizing  them  into  one  category  and  propose  a  general  strategy  with  the  critical  success  points  in  the  Introduction  section  of  the  category.  But  you  don’t  have  to  do  this  if  they  don’t  follow  the  same  critical  success  points.3.  To  make  the  manual  more  accessible,  please  make  the  categories  and  rules  appear  in  order  from  easy  to  difficult  and  from  basic  to  complex.'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '[⬇](data:text/plain;base64,W1JvbGVdCllvdSBhcmUgb2JzZXJ2aW5nIGEgaG91c2VrZWVwZXIgYWdlbnQgYXMgaXQgY29kZXMgYW5kIGFjdHMgd2l0aGluIGEgc2ltdWxhdGVkIGVudmlyb25tZW50IChnYW1lKS4gWW91ciBnb2FsIGlzIHRvIGNvbnN0cnVjdCBhIG1hbnVhbCBvZiBydWxlcyB0byBhc3Npc3QgdGhlIGFnZW50IGluIGNvbXBsZXRpbmcgdmFyaW91cyB0YXNrcyBpbiB0aGUgZW52aXJvbm1lbnQuIFlvdXIgcm9sZSBpcyB0byBmb3JtdWxhdGUgYSBtYW51YWwgYmFzZWQgb24gdGhlIGZvdW5kIHJ1bGVzLCBpbmNsdWRpbmcgY2F0ZWdvcml6aW5nIGFuZCBzdW1tYXJpemluZyByZWxhdGVkIHJ1bGVzLgoKW0Z1bmN0aW9uc10KWW91IHdpbGwgYmUgcHJlc2VudGVkIHdpdGggdGhlIGN1cnJlbnQgZm91bmQgcnVsZXMuIFRoZSBydWxlcyBhcmUgZXh0cmFjdGVkIGZyb20gbWFueSBlcG9jaHMnIHRyYWplY3RvcmllcywgaW4gd2hpY2ggZWFjaCBpbnRlcmFjdGlvbiBpbmNsdWRlcyB0aGUgYWdlbnQncyBhbmFseXNpcywgZXhlY3V0aW9uIGNvZGUsIGFuZCB0aGUgcmVzdWx0aW5nIGZlZWRiYWNrLgoKQSBydWxlIGlzIHJlcHJlc2VudGVkIHdpdGggJ3J1bGVfaWQnIGFuZCBoYXMg
    dGhlIGZvbGxvd2luZyBhdHRyaWJ1dGVzOgogICAtIHJ1bGU6IHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgcnVsZSwgd2hpY2ggYmVnaW5zIHdpdGggaXRzIHVzZSBjYXNlIG9yIHNjb3BlLgogICAtIHR5cGU6IHRoZSB0eXBlIG9mIHRoZSBydWxlLgogICAtIGV4YW1wbGU6IGFuIGV4YW1wbGUgKG9yIGNvZGUpIGZyb20gdGhlIHRyYWplY3RvcnkgZGVtb25zdHJhdGVzIHRoaXMgcnVsZS4gWW91IGNhbiBhZGQgZGV0YWlsZWQgaW5mb3JtYXRpb24gaW4gdGhlIGNvbW1lbnQuCiAgIC0gdmFsaWRhdGlvbl9yZWNvcmQ6IHlvdXIgdmFsaWRhdGlvbiByZWNvcmQgb24gdGhpcyBydWxlLCBpbmNsdWRpbmcgdGhlIGVwb2NoIElEcyBhbmQgcnVsZSBJRHMgZnJvbSB3aGljaCB0aGlzIHJ1bGUgaXMgaW5kdWNlZC4KCltBY3Rpb25zXQpBdCBlYWNoIGVwb2NoLCBhbiBhZ2VudCBpcyBjcmVhdGVkIGluIGFuIGVudmlyb25tZW50LiBUaGUgYWdlbnQgY2FuIG9ubHkgdXNlIHRoZSBmb2xsb3dpbmcgYWN0aW9uIGZ1bmN0aW9ucyBpbiBpdHMgY29kZSB0byBpbnRlcmFjdCB3aXRoIHRoZSBlbnZpcm9ubWVudDoKCmFnZW50LmdvX3RvKHJlY2VwdGFjbGUpICMgR28gdG8gYSByZWNlcHRhY2xlIGFuZCB1cGRhdGUgdGhlIGFnZW50J3MgbG9jYXRpb24uCmFnZW50Lm9wZW4ocmVjZXB0YWNsZSkgIyBPcGVuIGEgcmVjZXB0YWNsZSBhbmQgb2JzZXJ2ZSBpdHMgY29udGVudHMuCmFnZW50LmNsb3NlKHJlY2VwdGFjbGUpICMgQ2xvc2UgYSBvcGVuZWQgcmVjZXB0YWNsZS4KYWdlbnQudGFrZV9mcm9tKG9iamVjdCwgcmVjZXB0YWNsZSkgIyBUYWtlIGFuIG9iamVjdCBmcm9tIGEgcmVjZXB0YWNsZSBpZiB0aGUgYWdlbnQgaXMgbm90IGhvbGRpbmcgYW55dGhpbmcuCmFnZW50LnB1dF9pbl9vcl9vbihvYmplY3QsIHJlY2VwdGFjbGUpICMgUHV0IGFuIG9iamVjdCBpbiBvciBvbiBhIHJlY2VwdGFjbGUgaWYgdGhlIGFnZW50IGlzIGhvbGRpbmcgaXQuCmFnZW50LnVzZShvYmplY3QpICMgVXNlIGEgbGFtcC4KYWdlbnQuY2xlYW5fd2l0aChvYmplY3QsIHJlY2VwdGFjbGUpICMgQ2xlYW4gYW4gb2JqZWN0IHdpdGggYSByZWNlcHRhY2xlLgphZ2VudC5oZWF0X3dpdGgob2JqZWN0LCByZWNlcHRhY2xlKSAjIEhlYXQgYW4gb2JqZWN0IHdpdGggYSByZWNlcHRhY2xlLgphZ2VudC5jb29sX3dpdGgob2JqZWN0LCByZWNlcHRhY2xlKSAjIENvb2wgYW4gb2JqZWN0IHdpdGggYSByZWNlcHRhY2xlLgpnZXRfb2JqZWN0X3dpdGhfaWQob2JzZXJ2YXRpb24sIG9iamVjdF9uYW1lKSAjIEV4dHJhY3RzIGEgbGlzdCBvZiBvYmplY3RfaWRzIHdpdGggdGhlIHNwZWNpZmllZCBvYmplY3RfbmFtZSBmcm9tIHRoZSBvYnNlcnZhdGlvbi4KCltSZXNwb25zZSBJbnN0cnVjdGlvbnNdCk91dHB1dCBQcm9jZXNzOgpBZnRlciByZWNlaXZpbmcgdGhlIGN1cnJlbnQgcnVsZXMsIHlvdSBzaG91bGQgb3V0cHV0IHRoZSBmb2xsb3dpbmcgdGhpbmdzOgoqIEdlbmVyYWwgVW5kZXJzdGFuZGluZ3M6IERlc2NyaWJlIHlvdXIgb3ZlcmFsbCB1bmRlcnN0YW5kaW5nIG9mIGFsbCBydWxlcyBhbmQgc29tZSBzcGVjaWZpYyBydWxlcy4KKiBDYXRlZ29yeSBvZiBSdWxlczogTWV0aG9kaWNhbGx5IGFuYWx5emUgdGhlIGNvbm5lY3Rpb25zIGJldHdlZW4gcmVsYXRlZCBydWxlcywgdGhlbiBjbHVzdGVyIHRoZXNlIHJ1bGVzLCBhbmQgcHJvcG9zZSBjYXRlZ29yeSBuYW1lcyBmb3IgdGhlIGNsdXN0ZXJzLiBNYWtlIHN1cmUgZWFjaCBydWxlIG11c3QgYmVsb25nIHRvIG9uZSBhbmQ'
