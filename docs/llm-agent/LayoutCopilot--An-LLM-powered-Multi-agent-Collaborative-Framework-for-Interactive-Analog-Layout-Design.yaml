- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '类别: 未分类'
- en: 'date: 2024-09-08 18:42:47'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '日期: 2024-09-08 18:42:47'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'LayoutCopilot: An LLM-powered Multi-agent Collaborative Framework for Interactive
    Analog Layout Design'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LayoutCopilot：一个由LLM驱动的多智能体协作框架，用于交互式模拟布局设计
- en: 来源：[https://ar5iv.labs.arxiv.org/html/2406.18873](https://ar5iv.labs.arxiv.org/html/2406.18873)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://ar5iv.labs.arxiv.org/html/2406.18873](https://ar5iv.labs.arxiv.org/html/2406.18873)
- en: Bingyang Liu^(2${\dagger}$), Xiaohan Gao^(3,1), Zichen Kong¹
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Bingyang Liu^(2${\dagger}$), Xiaohan Gao^(3,1), Zichen Kong¹
- en: Xiyuan Tang^(1,4), Yibo Lin^(1,5,6*), Runsheng Wang^(1,5,6), Ru Huang^(1,5,6)
    ¹School of Integrated Circuits ²School of Electronics Engineering and Computer
    Science ³School of Computer Science ⁴Institute for Artificial Intelligence, Peking
    University, Beijing, China
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Xiyuan Tang^(1,4), Yibo Lin^(1,5,6*), Runsheng Wang^(1,5,6), Ru Huang^(1,5,6)
    ¹集成电路学院 ²电子工程与计算机科学学院 ³计算机科学学院 ⁴人工智能研究所，北京大学，北京，中国
- en: ⁵Beijing Advanced Innovation Center for Integrated Circuits, Beijing, China
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: ⁵北京集成电路高级创新中心，北京，中国
- en: ⁶Institute of Electronic Design Automation, Peking University, Wuxi, China
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: ⁶电子设计自动化研究所，清华大学，江苏无锡，中国
- en: Abstract.
  id: totrans-10
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 摘要。
- en: Analog layout design heavily involves interactive processes between humans and
    design tools. The tools are usually designed to use scripting commands or visualized
    buttons for manipulation, especially for those interactive automation functionalities,
    which have a steep learning curve and cumbersome user experience, making a notable
    barrier to their adoption by designers. Aiming to address such a usability issue,
    this paper introduces LayoutCopilot, a pioneering multi-agent collaborative framework
    powered by Large Language Models (LLMs) for interactive analog layout design.
    LayoutCopilot simplifies human-tool interaction by converting natural language
    instructions into executable script commands, and it interprets high-level design
    intents into actionable suggestions, significantly streamlining the design process.
    Experimental results demonstrate the flexibility, efficiency, and accessibility
    of LayoutCopilot in handling real-world analog designs.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟布局设计涉及人与设计工具之间的交互过程。这些工具通常设计为使用脚本命令或可视化按钮进行操作，特别是那些交互式自动化功能，这些功能具有陡峭的学习曲线和繁琐的用户体验，给设计师的采用带来了显著障碍。为了解决这种可用性问题，本文介绍了LayoutCopilot，一个由大型语言模型（LLMs）驱动的开创性多智能体协作框架，用于交互式模拟布局设计。LayoutCopilot通过将自然语言指令转换为可执行的脚本命令，简化了人机交互，并将高层次的设计意图转化为可操作的建议，显著简化了设计过程。实验结果展示了LayoutCopilot在处理现实世界模拟设计中的灵活性、效率和可达性。
- en: '^(${\dagger}$)Equal Contribution.^*Corresponding author: yibolin@pku.edu.cn'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ^(${\dagger}$)同等贡献。^*通讯作者：yibolin@pku.edu.cn
- en: 1\. Introduction
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 引言
- en: Analog layout design is a critical phase in analog circuit design that relies
    heavily on the manual effort of skilled designers. This dependence is largely
    due to the complexity of analog circuit performance models and the additional
    considerations such as symmetry, matching, signal flow, and other constraints,
    which pose significant challenges in generating high-quality layouts with superior
    performance. Therefore, efficiently generating high-quality layouts of analog
    circuits is a major challenge for both commercial tools and academic research.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟布局设计是模拟电路设计中的关键阶段，极度依赖于技术熟练的设计师的手动操作。这种依赖主要由于模拟电路性能模型的复杂性以及对对称性、匹配性、信号流和其他约束的额外考虑，这些都对生成具有优良性能的高质量布局提出了显著挑战。因此，高效生成高质量的模拟电路布局是商业工具和学术研究的主要挑战。
- en: Commercial analog layout design platforms like Cadence Virtuoso ([virtuoso2023,](#bib.bib1)
    ) mainly provide manual layout drawing interfaces and a few interactive layout
    automation functionalities. However, the learning curve for such platforms is
    very steep due to complicated buttons, shortcut keys, and scripting commands for
    manipulation. Their interactive layout automation functionalities require designers
    to type all the constraints, which is extremely tedious and rarely adopted by
    designers in practice.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 商业模拟布局设计平台如Cadence Virtuoso（[virtuoso2023,](#bib.bib1)）主要提供手动布局绘制接口和少量交互式布局自动化功能。然而，由于复杂的按钮、快捷键和脚本命令，这些平台的学习曲线非常陡峭。其交互式布局自动化功能要求设计师输入所有约束，这极为繁琐，实际中很少被设计师采用。
- en: Academic studies have focused on both fully automated analog design methodologies
    and interactive automation. Over the past four decades, a series of analog placement
    & routing algorithms have been proposed to automate layout design. These algorithms
    explore various methods and perspectives, including traditional algorithmic approaches ([391116,](#bib.bib2)
    ; [510537,](#bib.bib3) ; [malavasi1990routing,](#bib.bib4) ; [xiao2010practical,](#bib.bib5)
    ; [xu2017hierarchical,](#bib.bib6) ), domain-knowledge based methods ([basaran1993latchup,](#bib.bib7)
    ; [ou2013simultaneous,](#bib.bib8) ; [martins2016current,](#bib.bib9) ; [xu2019device,](#bib.bib10)
    ; [ho2013coupling,](#bib.bib11) ), and the integration of machine learning techniques ([li2020exploring,](#bib.bib12)
    ; [li2020customized,](#bib.bib13) ; [gusmao2020semi,](#bib.bib14) ). All are aimed
    at boosting the efficiency and performance of final layout results, paving the
    way for the development of fully automated tools. Recent advancements in fully
    automated tools for analog layout design such as ALIGN  ([kunal_align_2019,](#bib.bib15)
    ; [dhar_align_2021,](#bib.bib16) ; [sapatnekar_align_2023,](#bib.bib17) ) and
    MAGICAL  ([xu_magical_2019,](#bib.bib18) ; [chenMAGICALOpenSource2021,](#bib.bib19)
    ; [chen_magical_2021,](#bib.bib20) ), have significantly improved design efficiency
    in analog layout generation. However, despite their advancements, these tools
    often fall short of accommodating the highly customized needs of analog layout
    design. To address this, interactive analog layout editing tools  ([gaoInteracplacement,](#bib.bib21)
    ; [gao_interactive_2023,](#bib.bib22) ) have been developed to allow designers
    to modify and optimize layouts more easily. While these tools offer enhanced flexibility
    in layout design, similar to commercial tools, they also introduce a new usability
    challenge as designers must master complex command sets and effectively apply
    them in circuit optimization.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 学术研究已经关注了完全自动化的模拟电路设计方法以及交互式自动化。在过去四十年里，已经提出了一系列模拟电路布置与布线算法，以实现布局设计的自动化。这些算法探讨了各种方法和视角，包括传统的算法方法 ([391116,](#bib.bib2)
    ; [510537,](#bib.bib3) ; [malavasi1990routing,](#bib.bib4) ; [xiao2010practical,](#bib.bib5)
    ; [xu2017hierarchical,](#bib.bib6) )，基于领域知识的方法 ([basaran1993latchup,](#bib.bib7)
    ; [ou2013simultaneous,](#bib.bib8) ; [martins2016current,](#bib.bib9) ; [xu2019device,](#bib.bib10)
    ; [ho2013coupling,](#bib.bib11) )，以及机器学习技术的集成 ([li2020exploring,](#bib.bib12)
    ; [li2020customized,](#bib.bib13) ; [gusmao2020semi,](#bib.bib14) )。所有这些方法都旨在提高最终布局结果的效率和性能，为完全自动化工具的发展铺平道路。最近在模拟布局设计方面的完全自动化工具，如ALIGN ([kunal_align_2019,](#bib.bib15)
    ; [dhar_align_2021,](#bib.bib16) ; [sapatnekar_align_2023,](#bib.bib17) )和MAGICAL ([xu_magical_2019,](#bib.bib18)
    ; [chenMAGICALOpenSource2021,](#bib.bib19) ; [chen_magical_2021,](#bib.bib20)
    )，显著提高了模拟布局生成的设计效率。然而，尽管这些工具取得了进展，它们仍然难以满足模拟布局设计的高度定制需求。为了解决这个问题，已经开发了交互式模拟布局编辑工具 ([gaoInteracplacement,](#bib.bib21)
    ; [gao_interactive_2023,](#bib.bib22) )，以便设计师更容易地修改和优化布局。虽然这些工具在布局设计中提供了更高的灵活性，但与商业工具类似，它们也引入了新的可用性挑战，因为设计师必须掌握复杂的命令集并有效地应用于电路优化。
- en: The above usability challenges come from the fundamental gap between human natural
    language and machine language. It is not easy to convert both designers’ concrete
    tasks and abstract design intents into executable commands for machines. Recent
    advances in large language models (LLMs) bring a new opportunity to bridge the
    gap. Recently prevailing models like GPT-3 ([brown2020language,](#bib.bib23) ),
    Llama ([touvron2023llama,](#bib.bib24) ; [touvron2023llama2,](#bib.bib25) ), GPT-4 ([openai_gpt-4_2024,](#bib.bib26)
    ), and Claude ([claude2,](#bib.bib27) ) ([claude3,](#bib.bib28) ) have demonstrated
    remarkable capabilities in not only understanding and generating human-like text
    but also reasoning and comprehending abstract domain knowledge, paving the way
    for innovative applications across various domains. This evolution, along with
    advances in knowledge retrieval techniques ([lewis_retrieval-augmented_nodate,](#bib.bib29)
    ) and the proven effectiveness of multi-agent approaches in tackling complex reasoning
    tasks ([wu_autogen_2023,](#bib.bib30) ; [rasal_llm_2024,](#bib.bib31) ; [hong_metagpt_2023,](#bib.bib32)
    ), sets a new stage for enhancing human-computer interaction in intricate technical
    tasks. Such advancements have led to diverse applications within EDA ([liu_rtlcoder_2024,](#bib.bib33)
    ; [thakur_verigen_2024,](#bib.bib34) ; [lu_rtllm_2023,](#bib.bib35) ; [liu_verieval_2023,](#bib.bib36)
    ; [tsai_rtlfixer_2024,](#bib.bib37) ; [liu_chipnemo_2024,](#bib.bib38) ; [he_chateda_2024,](#bib.bib39)
    ; [wang2024chatpattern,](#bib.bib40) ), but mainly focused on digital circuits,
    where mature automation solutions have been widely adopted without heavy human-tool
    interaction. Thus, the field of analog layout design presents a unique opportunity
    as it has not yet fully explored using LLMs to tackle layout tool usability challenges.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 上述可用性挑战源于人类自然语言和机器语言之间的根本差距。将设计师的具体任务和抽象设计意图转换为机器可执行的命令并不容易。最近，大型语言模型（LLMs）的进展为弥合这一差距提供了新的机会。近期流行的模型如GPT-3 ([brown2020language,](#bib.bib23)
    )、Llama ([touvron2023llama,](#bib.bib24) ; [touvron2023llama2,](#bib.bib25) )、GPT-4 ([openai_gpt-4_2024,](#bib.bib26)
    )和Claude ([claude2,](#bib.bib27) ) ([claude3,](#bib.bib28) )展示了不仅在理解和生成类似人类的文本方面具有卓越的能力，还在推理和理解抽象领域知识方面表现突出，为各种领域的创新应用铺平了道路。这一演变，加上知识检索技术的进步 ([lewis_retrieval-augmented_nodate,](#bib.bib29)
    )和多智能体方法在处理复杂推理任务中的有效性 ([wu_autogen_2023,](#bib.bib30) ; [rasal_llm_2024,](#bib.bib31)
    ; [hong_metagpt_2023,](#bib.bib32) )，为在复杂技术任务中提升人机交互设立了新的舞台。这些进展导致了EDA领域内的多种应用 ([liu_rtlcoder_2024,](#bib.bib33)
    ; [thakur_verigen_2024,](#bib.bib34) ; [lu_rtllm_2023,](#bib.bib35) ; [liu_verieval_2023,](#bib.bib36)
    ; [tsai_rtlfixer_2024,](#bib.bib37) ; [liu_chipnemo_2024,](#bib.bib38) ; [he_chateda_2024,](#bib.bib39)
    ; [wang2024chatpattern,](#bib.bib40) )，但主要集中于数字电路，其中成熟的自动化解决方案已经被广泛采用且无需重度人机交互。因此，模拟布局设计领域呈现出独特的机会，因为尚未充分探索利用LLMs解决布局工具的可用性挑战。
- en: '![Refer to caption](img/45e3e958feb52f5c5b7e76225d0b3093.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![参考图示](img/45e3e958feb52f5c5b7e76225d0b3093.png)'
- en: Figure 1\. A brief introduction of analog layout automation and our motivation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图1\. 模拟布局自动化的简要介绍及我们的动机。
- en: 'In this paper, we introduce LayoutCopilot, a pioneering multi-agent collaborative
    framework powered by LLMs for interactive analog layout design. LayoutCopilot
    is proficient in processing concrete layout adjustment requests, translating them
    into executable commands that reduce the learning curve associated with interactive
    tools. Additionally, it leverages a comprehensive knowledge base to generate practical
    suggestions according to the designer’s high-level design intents, thus addressing
    the usability challenges posed by the inherent complexity of analog design. The
    main contributions of this paper can be summarized as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们介绍了LayoutCopilot，一个由LLMs驱动的开创性多智能体协作框架，用于互动式模拟布局设计。LayoutCopilot擅长处理具体的布局调整请求，将其转换为可执行的命令，从而减少与互动工具相关的学习曲线。此外，它利用全面的知识库，根据设计师的高层次设计意图生成实用的建议，从而解决了模拟设计固有复杂性带来的可用性挑战。本文的主要贡献可总结如下：
- en: •
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: To the best of our knowledge, LayoutCopilot is the first LLM-powered interactive
    analog layout design framework, offering a novel approach to enhance design flexibility
    and efficiency in analog circuit design.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 据我们所知，LayoutCopilot是第一个由LLM驱动的互动式模拟布局设计框架，提供了一种新颖的方法来增强模拟电路设计中的设计灵活性和效率。
- en: •
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: We bridge the interaction gap between designers and analog layout tools with
    a framework powered by LLMs, overcoming the usability challenge of layout tools
    and refining the methodology of interactive layout design.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们通过一个由LLMs驱动的框架弥合设计师与模拟布局工具之间的互动差距，克服了布局工具的可用性挑战，并改进了互动布局设计的方法论。
- en: •
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: We utilize a multi-agent collaborative framework that progressively transforms
    designer requirements into executable commands through coordinated efforts among
    multiple LLM agents, achieving high accuracy.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们利用一种多智能体协作框架，通过多个LLM智能体之间的协调努力，将设计师需求逐步转化为可执行的命令，实现高精度。
- en: •
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: Bulk testing and experiments on real-world analog designs have shown that LayoutCopilot
    can accurately address the designer’s concrete layout adjustment requests and
    offer actionable suggestions to complete layout optimization based on their high-level
    design intents.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对真实世界模拟设计进行的大规模测试和实验表明，LayoutCopilot可以准确地满足设计师的具体布局调整请求，并提供可操作的建议以完成布局优化，基于其高层次设计意图。
- en: 'The rest of the paper is organized as follows. Section [2](#S2 "2\. Preliminaries
    ‣ LayoutCopilot: An LLM-powered Multi-agent Collaborative Framework for Interactive
    Analog Layout Design") describes the background; Section [3](#S3 "3\. LayoutCopilot
    Framework ‣ LayoutCopilot: An LLM-powered Multi-agent Collaborative Framework
    for Interactive Analog Layout Design") explains the detailed implementation; Section [4](#S4
    "4\. Experimental Results ‣ LayoutCopilot: An LLM-powered Multi-agent Collaborative
    Framework for Interactive Analog Layout Design") demonstrates the results; Section [5](#S5
    "5\. Conclusion ‣ LayoutCopilot: An LLM-powered Multi-agent Collaborative Framework
    for Interactive Analog Layout Design") concludes the paper.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '论文的其余部分组织如下。第[2](#S2 "2\. Preliminaries ‣ LayoutCopilot: An LLM-powered Multi-agent
    Collaborative Framework for Interactive Analog Layout Design")节描述了背景；第[3](#S3
    "3\. LayoutCopilot Framework ‣ LayoutCopilot: An LLM-powered Multi-agent Collaborative
    Framework for Interactive Analog Layout Design")节解释了详细的实现；第[4](#S4 "4\. Experimental
    Results ‣ LayoutCopilot: An LLM-powered Multi-agent Collaborative Framework for
    Interactive Analog Layout Design")节展示了结果；第[5](#S5 "5\. Conclusion ‣ LayoutCopilot:
    An LLM-powered Multi-agent Collaborative Framework for Interactive Analog Layout
    Design")节总结了论文。'
- en: 2\. Preliminaries
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 初步知识
- en: This section reviews the background concepts of our study, including the integration
    of LLMs with EDA, prompt engineering, multi-agent collaboration, and the interactive
    placement and routing in analog layout design, additionally outlining the scope
    of LayoutCopilot.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 本节回顾了我们研究的背景概念，包括LLMs与EDA的整合、提示工程、多智能体协作以及模拟布局设计中的互动放置与布线，并概述了LayoutCopilot的范围。
- en: 2.1\. Integrating LLMs into EDA Applications
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.1\. 将LLMs整合进EDA应用
- en: Recent advancements in pre-trained large language models (LLMs) have unveiled
    new opportunities for enhancing EDA applications. The ability of LLMs to generate
    human-like text and understand complex concepts makes them ideally suited for
    integration into EDA tasks, ranging from auto-generating Hardware Description
    Language (HDL) code to facilitating interactive design workflows through conversational
    interfaces.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 近期预训练大型语言模型（LLMs）的进展揭示了提升EDA应用的新机会。LLMs生成类似人类的文本和理解复杂概念的能力，使其非常适合于整合到EDA任务中，从自动生成硬件描述语言（HDL）代码到通过对话界面促进互动设计工作流程。
- en: One segment of research has focused on harnessing LLMs to tackle textual or
    language-based tasks in EDA autonomously. This includes efforts to auto-generate
    HDL code using tools like RTLCoder and VeriGen ([liu_rtlcoder_2024,](#bib.bib33)
    ; [thakur_verigen_2024,](#bib.bib34) ), along with benchmarks like RTLLM and VerilogEval
    for assessing these capabilities ([lu_rtllm_2023,](#bib.bib35) ; [liu_verieval_2023,](#bib.bib36)
    ). Additionally, RTLFixer ([tsai_rtlfixer_2024,](#bib.bib37) ) is exploring automated
    debugging and code repair, whereas ChipNeMo ([liu_chipnemo_2024,](#bib.bib38)
    ) serves as an engineering assistant chatbot, facilitating EDA script generation
    and bug analysis.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一项研究集中于利用LLMs自主处理EDA中的文本或语言相关任务。这包括使用如RTLCoder和VeriGen（[liu_rtlcoder_2024,](#bib.bib33)；[thakur_verigen_2024,](#bib.bib34)）等工具自动生成HDL代码，以及使用RTLLM和VerilogEval等基准测试这些能力（[lu_rtllm_2023,](#bib.bib35)；[liu_verieval_2023,](#bib.bib36)）。此外，RTLFixer（[tsai_rtlfixer_2024,](#bib.bib37)）正在探索自动调试和代码修复，而ChipNeMo（[liu_chipnemo_2024,](#bib.bib38)）则作为工程助手聊天机器人，促进EDA脚本生成和错误分析。
- en: Another pathway seeks to help traditional design flows and existing EDA tools
    with LLMs, thus enhancing their accessibility and ease of use. This is exemplified
    by ChatEDA ([he_chateda_2024,](#bib.bib39) ) and ChatPattern ([wang2024chatpattern,](#bib.bib40)
    ), which typically feature a conversational interface that allows designers to
    express their needs in natural language, thereby facilitating the indirect manipulation
    of EDA tools via LLMs. Introducing conversational interfaces powered by LLMs helps
    tackle long-standing usability challenges in EDA tools. Inspired by conversational
    interfaces in EDA tools, we applied LLMs to interactive analog layout design.
    Considering the custom nature of analog circuits, LayoutCopilot not only facilitates
    direct command execution but also generates actionable suggestions based on high-level
    design intents, streamlining the design process.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种路径旨在通过 LLMs 帮助传统设计流程和现有的 EDA 工具，从而提高它们的可访问性和易用性。这一点在 ChatEDA ([he_chateda_2024,](#bib.bib39)
    ) 和 ChatPattern ([wang2024chatpattern,](#bib.bib40) ) 中得到了体现，这些工具通常具有对话界面，允许设计师用自然语言表达他们的需求，从而通过
    LLMs 促进对 EDA 工具的间接操作。引入由 LLMs 支持的对话界面有助于解决 EDA 工具中长期存在的可用性挑战。受到 EDA 工具中对话界面的启发，我们将
    LLMs 应用于交互式模拟电路布局设计。考虑到模拟电路的定制特性，LayoutCopilot 不仅简化了直接命令的执行，还根据高级设计意图生成可操作的建议，从而简化设计过程。
- en: 2.2\. Prompt Engineering
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.2\. Prompt Engineering
- en: Prompts are natural language instructions that provide context to guide the
    generative language model. Prompt engineering is the process of leveraging prompts
    to enhance model efficacy without modifying parameters of the core model ([sahoo2024systematic,](#bib.bib41)
    ).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 提示是提供上下文以指导生成语言模型的自然语言指令。Prompt engineering 是利用提示增强模型效果的过程，而无需修改核心模型的参数 ([sahoo2024systematic,](#bib.bib41)
    )。
- en: 'Prompt Engineering offers a lightweight solution for utilizing large models
    to solve real-world problems. Unlike traditional methods that require extensive
    data set creation, fine-tuning, and repetitive adjusting to enhance a model’s
    performance on specific tasks, prompt engineering allows practitioners to directly
    transmit knowledge and methodologies to the model through carefully designed prompts.
    This approach is especially crucial in fields where data acquisition and cleansing
    are challenging, such as EDA. Many approaches of prompt engineering such as few-shot
    learning ([LanguageModelsareFewShotLearners,](#bib.bib42) ), chain-of-thought ([ChainOfThoughtPromptingElicitsReasoninginLargeLanguageModels,](#bib.bib43)
    ), least-to-most ([LeastToMostPromptingEnablesComplexReasoningInLargeLanguageModels,](#bib.bib44)
    ), and self-refine strategy ([SelfRefineIterativeRefinementwithSelfFeedback,](#bib.bib45)
    ) have been explored and proven to enhance the reasoning capabilities and overall
    performance of LLMs. To handle complex reasoning tasks in our application, LayoutCopilot
    integrates various Prompt Engineering techniques. Each agent is tailored according
    to the specific task it performs to achieve better performance. Details about
    the structure of prompts will be presented in Section [3](#S3 "3\. LayoutCopilot
    Framework ‣ LayoutCopilot: An LLM-powered Multi-agent Collaborative Framework
    for Interactive Analog Layout Design")'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 'Prompt Engineering 提供了一种轻量级的解决方案，用于利用大型模型解决现实世界的问题。与传统方法需要创建大量数据集、微调和重复调整以提高模型在特定任务上的性能不同，prompt
    engineering 允许从业者通过精心设计的提示直接将知识和方法传递给模型。这种方法在数据获取和清洗具有挑战性的领域尤为重要，例如 EDA。许多 prompt
    engineering 方法，如少量学习 ([LanguageModelsareFewShotLearners,](#bib.bib42) )、思维链 ([ChainOfThoughtPromptingElicitsReasoninginLargeLanguageModels,](#bib.bib43)
    )、由简到难 ([LeastToMostPromptingEnablesComplexReasoningInLargeLanguageModels,](#bib.bib44)
    ) 和自我完善策略 ([SelfRefineIterativeRefinementwithSelfFeedback,](#bib.bib45) ) 已经被探索并证明能增强
    LLMs 的推理能力和整体性能。为了处理我们应用中的复杂推理任务，LayoutCopilot 集成了各种 Prompt Engineering 技术。每个代理根据其执行的具体任务进行量身定制，以实现更好的性能。关于提示结构的详细信息将在第
    [3](#S3 "3\. LayoutCopilot Framework ‣ LayoutCopilot: An LLM-powered Multi-agent
    Collaborative Framework for Interactive Analog Layout Design") 节中介绍。'
- en: '![Refer to caption](img/c4c4afe0851801b42b67e2696ac867dc.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/c4c4afe0851801b42b67e2696ac867dc.png)'
- en: 'Figure 2\. System comparison: overcoming single agent limitations through multi-agent
    collaboration.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2\. 系统比较：通过多代理协作克服单一代理的局限性。
- en: Apart from manually configured prompts, there are also techniques for automatic
    prompt generation. A classic example is Retrieval-Augmented Generation (RAG)  ([RetrievalAugmentedGenerationForKnowledgeIntensiveNLPTasks,](#bib.bib46)
    ), which enhances the model’s interaction with external knowledge bases. As previously
    mentioned, prompts often contain a few examples, thus aligning with the ‘few-shot’
    approach. RAG allows these examples to be automatically retrieved from a database
    or knowledgebase, providing an interface through which LLMs can access external
    knowledge and align their responses accordingly. However, the retrieved context,
    combined with system instructions and designer requests, is fed as text input
    to the LLM, which could lead to prompt dilution if the context is overly extensive.
    This can result in a decrease in response quality, an issue we have observed in
    our experiments. To address this, we employ a multi-agent methodology to segment
    different tasks among several LLM agents, ensuring that knowledge retrieval does
    not compromise the performance of other system components. By separating agents
    with distinct responsibilities, we maintain system efficiency even as we integrate
    context-extensive retrieval technologies into our framework.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 除了手动配置的提示，还有一些自动提示生成的技术。一个经典的例子是检索增强生成（RAG） ([RetrievalAugmentedGenerationForKnowledgeIntensiveNLPTasks](#bib.bib46)
    )，它增强了模型与外部知识库的互动。正如之前提到的，提示通常包含一些示例，因此与“少样本”方法相一致。RAG 允许这些示例从数据库或知识库中自动检索，提供一个接口，通过该接口
    LLM 可以访问外部知识，并相应地调整其响应。然而，检索到的上下文与系统指令和设计师请求结合后，作为文本输入提供给 LLM，如果上下文过于广泛，可能会导致提示稀释。这可能导致响应质量下降，这是我们在实验中观察到的问题。为了解决这个问题，我们采用了多智能体方法，将不同任务在多个
    LLM 智能体之间进行分段，以确保知识检索不会影响其他系统组件的性能。通过将智能体分配不同的职责，我们在将上下文广泛的检索技术集成到我们的框架中时，仍能保持系统的高效性。
- en: 2.3\. Multi-Agent Collaboration with LLMs
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.3\. 多智能体与 LLM 的协作
- en: 'The objective of multi-agent collaboration is to enable multiple autonomous
    agents to effectively collaborate towards a shared goal  ([zhang2024proagent,](#bib.bib47)
    ). Figure  [2](#S2.F2 "Figure 2 ‣ 2.2\. Prompt Engineering ‣ 2\. Preliminaries
    ‣ LayoutCopilot: An LLM-powered Multi-agent Collaborative Framework for Interactive
    Analog Layout Design") illustrates the contrast between the capabilities of single
    and multi-agent systems, highlighting how multi-agent collaboration significantly
    enhances the system’s capacity by leveraging the specialized expertise of each
    agent and preventing task interference. This allows the system to manage a considerably
    larger workload than possible without such specialization, leading to improved
    efficiency and output quality ([xi2023rise,](#bib.bib48) ).'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '多智能体协作的目标是使多个自主智能体能够有效地协作以实现共享目标 ([zhang2024proagent](#bib.bib47) )。图 [2](#S2.F2
    "Figure 2 ‣ 2.2\. Prompt Engineering ‣ 2\. Preliminaries ‣ LayoutCopilot: An LLM-powered
    Multi-agent Collaborative Framework for Interactive Analog Layout Design") 说明了单一智能体系统与多智能体系统之间的对比，突出了多智能体协作如何通过利用每个智能体的专业知识显著增强系统的能力，并防止任务干扰。这使得系统能够处理比没有这种专业化情况下大得多的工作负载，从而提高了效率和输出质量
    ([xi2023rise](#bib.bib48) )。'
- en: After role-playing capabilities were introduced into communicative agent interactions
    by ([li2023camel,](#bib.bib49) ), ([talebirad2023multi,](#bib.bib50) ) proposed
    a comprehensive LLM-based multi-agent collaboration framework that demonstrated
    efficiency enhancements in handling complex tasks. Based on these works, multi-agent
    methodologies have been successfully deployed in various applications, proving
    their effectiveness in scenarios such as text understanding, reasoning, mathematics,
    coding, and tool utilization  ([rasal2024llm,](#bib.bib51) ; [wu2023autogen,](#bib.bib52)
    ; [chen2023agentverse,](#bib.bib53) ). Furthermore, several improvements have
    been proposed to enhance multi-agent collaboration, including  ([hong2023metagpt,](#bib.bib54)
    ), which transfers professional knowledge and management experience to LLM agents
    for more structured collaboration, and  ([zhang2024proagent,](#bib.bib47) ), which
    improves cooperation by enabling agents to predict their collaborators’ actions.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在角色扮演能力被引入到交互代理之后，[（li2023camel](#bib.bib49)）和[（talebirad2023multi](#bib.bib50)）提出了一个综合的基于LLM的多代理协作框架，该框架在处理复杂任务时展示了效率的提升。基于这些研究，多代理方法已成功应用于各种场景，证明了其在文本理解、推理、数学、编码和工具使用等方面的有效性（[rasal2024llm](#bib.bib51)
    ; [wu2023autogen](#bib.bib52) ; [chen2023agentverse](#bib.bib53)）。此外，还提出了几项改进以增强多代理协作，包括[（hong2023metagpt](#bib.bib54)），它将专业知识和管理经验转移到LLM代理中以实现更结构化的协作，以及[（zhang2024proagent](#bib.bib47)），通过使代理能够预测其协作者的行为来改善合作。
- en: In LayoutCopilot, we have developed a multi-agent collaborative framework that
    divides complex tasks into specialized subtasks. This strategic division of labor
    ensures that each agent can operate within its expertise without diluting the
    prompt or compromising other tasks’ performance.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 LayoutCopilot 中，我们开发了一个多代理协作框架，将复杂任务分解为专业子任务。这种战略性的劳动分工确保每个代理都能在其专业领域内操作，而不会稀释提示或影响其他任务的性能。
- en: '![Refer to caption](img/763251e2e3d319ffa6eab03844f8d862.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/763251e2e3d319ffa6eab03844f8d862.png)'
- en: Figure 3\. Illustration of basic analog layout automation method.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3\. 基本模拟布局自动化方法的示意图。
- en: 2.4\. Interactive Analog Layout Design
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.4\. 交互式模拟布局设计
- en: Analog layout automation has engaged many researchers in recent years and several
    basic methodologies have emerged ([xiao2010practical,](#bib.bib5) ; [xu2017hierarchical,](#bib.bib6)
    ; [ou2013simultaneous,](#bib.bib8) ; [martins2016current,](#bib.bib9) ; [xu2019device,](#bib.bib10)
    ; [ho2013coupling,](#bib.bib11) ; [li2020customized,](#bib.bib13) ; [gusmao2020semi,](#bib.bib14)
    ; [kunal_align_2019,](#bib.bib15) ; [dhar_align_2021,](#bib.bib16) ; [sapatnekar_align_2023,](#bib.bib17)
    ; [xu_magical_2019,](#bib.bib18) ; [chenMAGICALOpenSource2021,](#bib.bib19) ;
    [chen_magical_2021,](#bib.bib20) ; [gaoInteracplacement,](#bib.bib21) ; [gao_interactive_2023,](#bib.bib22)
    ). The analog placement problem can be formulated into a nonlinear optimization
    problem. The most common objective function is half-perimeter wire length (HPWL),
    indicating the performance of wire length. Different from digital placement, analog
    placement will consider more constraints such as symmetry, array, etc. The analog
    routing problem is a pathfinding problem that can be solved by a typical shortest
    path algorithm (A-star).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟布局自动化近年来吸引了许多研究者，并出现了几种基本方法论（[xiao2010practical](#bib.bib5) ; [xu2017hierarchical](#bib.bib6)
    ; [ou2013simultaneous](#bib.bib8) ; [martins2016current](#bib.bib9) ; [xu2019device](#bib.bib10)
    ; [ho2013coupling](#bib.bib11) ; [li2020customized](#bib.bib13) ; [gusmao2020semi](#bib.bib14)
    ; [kunal_align_2019](#bib.bib15) ; [dhar_align_2021](#bib.bib16) ; [sapatnekar_align_2023](#bib.bib17)
    ; [xu_magical_2019](#bib.bib18) ; [chenMAGICALOpenSource2021](#bib.bib19) ; [chen_magical_2021](#bib.bib20)
    ; [gaoInteracplacement](#bib.bib21) ; [gao_interactive_2023](#bib.bib22)）。模拟布局问题可以被表述为非线性优化问题。最常见的目标函数是半周长导线长度（HPWL），表示导线长度的性能。与数字布局不同，模拟布局会考虑更多的约束条件，如对称性、阵列等。模拟布线问题是一个路径寻找问题，可以通过典型的最短路径算法（A-star）解决。
- en: 'An interactive analog layout design framework offers flexible adjustments to
    the layouts while relieving designers from tedious manual layout drawing. By introducing
    high-level interactive controllers, the framework can leverage placement and routing
    kernels to automatically adjust the layout, as shown in Figure [3](#S2.F3 "Figure
    3 ‣ 2.3\. Multi-Agent Collaboration with LLMs ‣ 2\. Preliminaries ‣ LayoutCopilot:
    An LLM-powered Multi-agent Collaborative Framework for Interactive Analog Layout
    Design"). Based on the interactive layout design framework, designers can add
    arbitrary placement constraints and refine the routing solution according to their
    design experience. After several adjustments, designers can finally obtain a high-quality
    layout.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '一个交互式模拟布局设计框架提供灵活的布局调整功能，同时免去设计师繁琐的手动布局绘制工作。通过引入高级交互控制器，该框架可以利用放置和布线核心自动调整布局，如图[3](#S2.F3
    "Figure 3 ‣ 2.3\. Multi-Agent Collaboration with LLMs ‣ 2\. Preliminaries ‣ LayoutCopilot:
    An LLM-powered Multi-agent Collaborative Framework for Interactive Analog Layout
    Design")所示。基于该交互式布局设计框架，设计师可以添加任意放置约束，并根据设计经验优化布线方案。经过几次调整，设计师最终可以获得高质量的布局。'
- en: 2.5\. The Scope of LayoutCopilot
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.5\. LayoutCopilot 的范围
- en: 'LayoutCopilot functions as a multi-agent collaborative framework designed to
    enhance the interaction between designer and layout tools, illustrated by Figure [1](#S1.F1
    "Figure 1 ‣ 1\. Introduction ‣ LayoutCopilot: An LLM-powered Multi-agent Collaborative
    Framework for Interactive Analog Layout Design"). Its primary objective is to
    interpret design intents expressed in natural language and generate actionable
    commands that effectively interact with layout tools.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 'LayoutCopilot 作为一个多代理协作框架，旨在增强设计师与布局工具之间的互动，由图[1](#S1.F1 "Figure 1 ‣ 1\. Introduction
    ‣ LayoutCopilot: An LLM-powered Multi-agent Collaborative Framework for Interactive
    Analog Layout Design")所示。其主要目标是解释以自然语言表达的设计意图，并生成有效的命令以便与布局工具进行互动。'
- en: Problem 1. (Objective of LayoutCopilot) Develop an LLM-powered framework that
    accepts both high-level design intents and concrete requests in natural language
    from designers and then transforms them into precise executable commands. These
    commands aim to manipulate the layout tools directly, ensuring that the design
    intents are accurately translated into layout adjustments.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 问题1.（LayoutCopilot 的目标）开发一个 LLM 驱动的框架，接受设计师用自然语言表达的高层次设计意图和具体请求，然后将其转化为精确的可执行命令。这些命令旨在直接操作布局工具，确保设计意图准确地转化为布局调整。
- en: '![Refer to caption](img/12078838e7c7d264c14c748435e550a4.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/12078838e7c7d264c14c748435e550a4.png)'
- en: Figure 4\. Overview of LayoutCopilot.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图4\. LayoutCopilot 概览。
- en: 3\. LayoutCopilot Framework
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. LayoutCopilot 框架
- en: 'This section introduces the architecture and functionality of LayoutCopilot,
    a multi-agent collaboration framework enhanced by LLMs for interactive analog
    layout design. LayoutCopilot enhances the interaction between designers and layout
    tools by understanding complex requirements in natural language, utilizing a knowledge
    base for solution generation, and automating layout design. It consists of two
    primary components: the Analog Circuit Analyzer and the Concrete Request Processor,
    as illustrated in Figure [4](#S2.F4 "Figure 4 ‣ 2.5\. The Scope of LayoutCopilot
    ‣ 2\. Preliminaries ‣ LayoutCopilot: An LLM-powered Multi-agent Collaborative
    Framework for Interactive Analog Layout Design"). The Analog Circuit Analyzer
    initiates the processing of requests, transforming them into concrete requests
    that adhere to layout tool manuals. These concrete requests are then transferred
    to the Concrete Request Processor, which generates executable commands to facilitate
    layout editing. This workflow simplifies interactions between layout tools and
    designers, enhancing the overall design process. Detailed discussions on each
    component’s functionality and the rationale for their design are provided in the
    subsequent subsections.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '本节介绍了 LayoutCopilot 的架构和功能，这是一个通过 LLM 增强的多代理协作框架，用于交互式模拟布局设计。LayoutCopilot
    通过理解自然语言中的复杂要求、利用知识库生成解决方案并自动化布局设计，增强了设计师与布局工具之间的交互。它由两个主要组件组成：模拟电路分析器和具体请求处理器，如图[4](#S2.F4
    "Figure 4 ‣ 2.5\. The Scope of LayoutCopilot ‣ 2\. Preliminaries ‣ LayoutCopilot:
    An LLM-powered Multi-agent Collaborative Framework for Interactive Analog Layout
    Design")所示。模拟电路分析器启动请求处理，将其转化为符合布局工具手册的具体请求。这些具体请求随后被传送到具体请求处理器，后者生成可执行的命令以便于布局编辑。该工作流程简化了布局工具与设计师之间的互动，提升了整体设计过程。对每个组件功能和设计原理的详细讨论将在后续小节中提供。'
- en: 3.1\. Analog Circuit Analyzer
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.1\. 模拟电路分析仪
- en: 'The Analog Circuit Analyzer plays a key role in LayoutCopilot, managing and
    processing diverse requests from designers. It performs a series of functions
    including categorization of requests, retrieval of relevant knowledge, iterative
    adjustments in collaboration with designers, and analyzing netlists to transform
    abstract requests into concrete ones that align with layout tool manuals. This
    component is powered by four specialized LLM agents, each dedicated to a specific
    aspect of the processing pipeline: classification, analysis, solution refinement,
    and solution adaptation, as shown in Figure  [4](#S2.F4 "Figure 4 ‣ 2.5\. The
    Scope of LayoutCopilot ‣ 2\. Preliminaries ‣ LayoutCopilot: An LLM-powered Multi-agent
    Collaborative Framework for Interactive Analog Layout Design"). Details of these
    agents will be shown as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '模拟电路分析仪在 LayoutCopilot 中发挥着关键作用，管理和处理来自设计师的各种请求。它执行一系列功能，包括请求的分类、相关知识的检索、与设计师的协作进行迭代调整，以及分析网表，将抽象请求转化为与布局工具手册相符的具体请求。该组件由四个专门的
    LLM 代理提供支持，每个代理专注于处理管道中的特定方面：分类、分析、解决方案优化和解决方案适配，如图 [4](#S2.F4 "Figure 4 ‣ 2.5\.
    The Scope of LayoutCopilot ‣ 2\. Preliminaries ‣ LayoutCopilot: An LLM-powered
    Multi-agent Collaborative Framework for Interactive Analog Layout Design") 所示。这些代理的详细信息如下：'
- en: 'At the head of the analyzer lies a task classifier agent, determining designers’
    requirements as either concrete or abstract requests based on the manual of layout
    tools. Concrete tasks are identified by their direct translatability into commands
    or combinations explicitly supported by the layout tools, for example, ‘add symmetry
    between M6 and M7’. Conversely, abstract requests are recognized for their high-level,
    conceptual nature, necessitating a comprehensive analysis grounded in the netlist
    of circuits and knowledge of layout design to be deconstructed into executable
    steps, such as ‘Enhance the matching’ and ‘Improve the CMRR’. Building on these
    criteria, an LLM agent executes the task classification. Once classified, the
    tasks are directed into two distinct flows: concrete tasks are sent directly to
    the Concrete Request Processor for immediate processing. At the same time, abstract
    requests undergo a series of steps to be transformed into concrete requests before
    they are processed in the same manner as concrete requests. Classifying tasks
    before further processing allows for their assignment to specialized agents, simplifying
    the overall workflow and enhancing the quality of the responses.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析仪的前端是一个任务分类代理，根据布局工具的手册将设计师的需求确定为具体请求或抽象请求。具体任务通过其直接转化为布局工具明确支持的命令或组合来识别，例如，“在
    M6 和 M7 之间添加对称”。相反，抽象请求因其高层次的概念性特征而被识别，需要基于电路的网表和布局设计知识进行全面分析，以分解为可执行的步骤，例如，“增强匹配”和“提高
    CMRR”。基于这些标准，LLM 代理执行任务分类。一旦分类完成，任务被引导进入两个不同的流程：具体任务直接发送到具体请求处理器以进行即时处理。同时，抽象请求经过一系列步骤转化为具体请求，然后以与具体请求相同的方式进行处理。对任务进行分类后再进行进一步处理，可以将其分配给专门的代理，简化整体工作流程，并提高响应质量。
- en: The Analyzer Agent is dedicated solely to the analysis and knowledge retrieval
    task, which is crucial given LLMs’ limitations with long context lengths. Tasks
    that require extensive context can use up much of this capacity, potentially diluting
    prompts and reducing the effectiveness of other tasks. Thus, this agent focuses
    exclusively on knowledge retrieval to prevent these issues. The Analyzer Agent
    operates within a vast knowledge base that spans specialized literature on the
    analog circuit and layout design, layout tool manual, and archives of previous
    tasks and solutions. It crafts high-level solutions based on knowledge, functioning
    similarly to a skilled architect drafting a blueprint before construction and
    outlining strategic approaches to the task. For example, when tasked with ‘enhancing
    the CMRR of an OTA’, the agent might suggest optimizing component placement to
    enhance symmetry and rerouting connections to improve parasitic matching, all
    tailored to the specific capabilities of the chosen layout tools.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**分析代理**专注于分析和知识检索任务，这在LLM对长上下文长度的限制下尤为重要。需要广泛上下文的任务可能会消耗大量的这种容量，从而稀释提示并降低其他任务的有效性。因此，该代理专注于知识检索，以防止这些问题。**分析代理**在一个庞大的知识库中运作，该知识库涵盖了关于模拟电路和布局设计的专业文献、布局工具手册以及先前任务和解决方案的档案。它基于知识制定高层次的解决方案，类似于一位熟练的建筑师在施工前绘制蓝图并概述战略方法。例如，当任务是‘增强OTA的CMRR’时，该代理可能会建议优化组件放置以增强对称性，以及重新布线以改善寄生匹配，所有这些都针对所选布局工具的特定能力进行定制。'
- en: Considering analog designers’ rich experience and highly customized requirements,
    enhancing their involvement in the workflow is crucial. The Solution Refiner Agent
    effectively facilitates this by presenting high-level solutions to designers with
    evaluations and explanations, allowing them to select from or modify these solutions
    as needed. If the designers find the solutions unsatisfactory, they can add more
    details or revert to the Analyzer Agent for adjustments. This ensures that the
    process is highly responsive to designer needs. Refined solutions are then passed
    to the Solution Adapter Agent to be transformed into concrete requests aligned
    with the circuit’s netlist.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到模拟设计师丰富的经验和高度定制化的需求，提高他们在工作流程中的参与度至关重要。**解决方案优化代理**通过向设计师提供高层次的解决方案及其评估和解释，有效地促进了这一点，使他们能够根据需要选择或修改这些解决方案。如果设计师发现这些解决方案不满意，他们可以添加更多细节或返回**分析代理**进行调整。这确保了流程对设计师需求的高度响应。经过优化的解决方案随后传递给**解决方案适配代理**，以便将其转化为与电路网表对齐的具体请求。
- en: '![Refer to caption](img/67941d8f4325d89b308387112ed5938f.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/67941d8f4325d89b308387112ed5938f.png)'
- en: Figure 5\. Illustration of the configuration for a single agent in LayoutCopilot.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5\. 单个代理在 LayoutCopilot 中的配置示意图。
- en: The Solution Adapter Agent is the final component of the Analog Circuit Analyzer,
    tasked with converting refined solutions into concrete, actionable requests. Depending
    on the size, netlists are either communicated directly to the LLM during dialogues
    or stored in a knowledge base accessed via the LLM’s retrieval interface. This
    agent meticulously analyzes the netlist to extract specific parameters following
    the directives from refined solutions. For example, when receiving a refined solution
    that says ‘enhance the symmetry of differential pairs and capacitors’, the Solution
    Adapter Agent locates these components in the netlist by their connectivity and
    device parameters. It then formulates concrete requests to apply symmetry constraints
    to the identified components, such as ‘add symmetry between M6 and M7’. This agent
    is also familiar with the layout tools’ manuals, which ensures that the generated
    requests are compatible with the back-end tools. This stage guarantees that the
    solutions are not merely theoretical but practically implementable, guiding further
    design steps precisely.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案适配代理**是**模拟电路分析器**的最终组件，负责将优化后的解决方案转换为具体的可操作请求。根据网表的大小，网表要么在对话过程中直接传递给LLM，要么存储在通过LLM检索界面访问的知识库中。该代理会仔细分析网表，以提取符合优化解决方案指令的具体参数。例如，当收到‘增强差分对和电容器的对称性’的优化解决方案时，**解决方案适配代理**会根据它们的连接性和设备参数在网表中找到这些组件。然后，它会制定具体请求，要求对识别出的组件应用对称性约束，比如‘在M6和M7之间添加对称性’。该代理还熟悉布局工具的手册，确保生成的请求与后端工具兼容。这一阶段确保解决方案不仅是理论上的，而且可以实际实施，从而精确指导进一步的设计步骤。'
- en: 3.2\. Concrete Request Processor
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.2\. 具体请求处理器
- en: The Concrete Request Processor is dedicated to accurately translating concrete
    tasks into executable commands that fulfill designer requirements via layout tools.
    The process begins by decomposing concrete tasks into subtasks, each corresponding
    to a command detailed in the manual of layout tools, akin to the processes used
    by ChatEDA ([he_chateda_2024,](#bib.bib39) ) and ChatPattern ([wang2024chatpattern,](#bib.bib40)
    ). However, merely adopting these methods does not guarantee that the generated
    commands will execute correctly or achieve the desired results. Distinct from
    previous works, our approach incorporates role-playing and task decomposition
    techniques while conveying the syntactic and logical rules dictated by the layout
    tools’ manuals to the Code Generator Agent. This enrichment ensures that the command
    sequences generated by the agent maintain high accuracy in syntax and logic, especially
    when dealing with complex input requests. This strategic enhancement is committed
    to improving the precision and reliability of the process, closely aligning with
    the specific operational requirements of the layout tools.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 具体请求处理器致力于将具体任务准确地转化为可通过布局工具执行的命令，以满足设计师的要求。该过程始于将具体任务分解为子任务，每个子任务对应于布局工具手册中详细说明的命令，这类似于
    ChatEDA ([he_chateda_2024,](#bib.bib39)) 和 ChatPattern ([wang2024chatpattern,](#bib.bib40))
    使用的过程。然而，仅仅采用这些方法并不能保证生成的命令会正确执行或实现预期结果。与之前的工作不同，我们的方法在向代码生成代理传达布局工具手册所规定的语法和逻辑规则时，结合了角色扮演和任务分解技术。这种丰富的策略确保了代理生成的命令序列在语法和逻辑上保持高准确性，特别是在处理复杂输入请求时。这一战略增强致力于提高过程的精确度和可靠性，与布局工具的具体操作要求紧密对接。
- en: 3.3\. Agent Configuration and Prompt Design
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.3\. 代理配置与提示设计
- en: 'Each agent in the LayoutCopilot framework is equipped with prompts tailored
    to its designated task. These prompts are crafted using the prompt engineering
    techniques described in Section [2](#S2 "2\. Preliminaries ‣ LayoutCopilot: An
    LLM-powered Multi-agent Collaborative Framework for Interactive Analog Layout
    Design"), chosen to enhance the overall expressive capabilities of the agents
    based on experimental results, as illustrated in Figure [5](#S3.F5 "Figure 5 ‣
    3.1\. Analog Circuit Analyzer ‣ 3\. LayoutCopilot Framework ‣ LayoutCopilot: An
    LLM-powered Multi-agent Collaborative Framework for Interactive Analog Layout
    Design").'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '在 LayoutCopilot 框架中，每个代理都配备了针对其指定任务量身定制的提示。这些提示是利用第[2](#S2 "2\. Preliminaries
    ‣ LayoutCopilot: An LLM-powered Multi-agent Collaborative Framework for Interactive
    Analog Layout Design")节中描述的提示工程技术制作的，旨在根据实验结果提升代理的整体表达能力，如图[5](#S3.F5 "Figure
    5 ‣ 3.1\. Analog Circuit Analyzer ‣ 3\. LayoutCopilot Framework ‣ LayoutCopilot:
    An LLM-powered Multi-agent Collaborative Framework for Interactive Analog Layout
    Design")所示。'
- en: 'The seven prompt sections are described in detail as follows: A. Role Play
    encourages the agent to adopt a persona that helps simulate a realistic and professional
    scenario for task handling. B. Workflow Overview provides agents with an understanding
    of their roles within the whole system, highlighting how their outputs influence
    subsequent stages of the design process. C. Task Description delineates the specific
    responsibilities and objectives of the agent, ensuring focused and relevant task
    execution. D. Pipeline guides agents through a chain-of-thought approach to tackle
    the assigned tasks efficiently. This enhances the agents’ reasoning capabilities
    and directs them to break down complex tasks into manageable sub-tasks, improving
    their ability to handle intricate problems. E. Information Verification instructs
    the agent to verify the completeness of the input before proceeding, prompting
    for additional information if required. This acts as a self-refine strategy, effectively
    preventing errors arising from incomplete or inaccurate inputs.F. Interaction
    Guideline directs the agent on interacting with the user and other agents, ensuring
    that the entire process remains cohesive and efficient. G. External Knowledge
    enables the agent to access a comprehensive repository of books, manuals, and
    experiential knowledge, which are either communicated directly to the LLM during
    dialogues or stored in a knowledge base accessed via the LLM’s retrieval interface.
    This enriches its output with domain-specific insights'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 七个提示部分的详细描述如下：A. 角色扮演鼓励代理采用一种角色，以帮助模拟一个现实且专业的任务处理场景。B. 工作流概述提供给代理对其在整个系统中的角色的理解，强调其输出如何影响设计过程的后续阶段。C.
    任务描述明确代理的具体责任和目标，确保专注且相关的任务执行。D. 流程引导代理通过链式思维方法高效地处理分配的任务。这提升了代理的推理能力，并引导他们将复杂任务分解为可管理的子任务，提高处理复杂问题的能力。E.
    信息验证指导代理在继续之前验证输入的完整性，如有必要，提示获取额外信息。这作为一种自我修正策略，有效地防止因输入不完整或不准确而产生的错误。F. 互动指南指导代理与用户和其他代理的互动，确保整个过程保持连贯和高效。G.
    外部知识使代理能够访问全面的书籍、手册和经验知识库，这些知识要么在对话中直接传达给LLM，要么存储在通过LLM检索接口访问的知识库中。这丰富了其输出，提供了领域特定的见解。
- en: In summary, these prompt components ensure that each agent operates not only
    as a specialist in its respective domain but also as a coherent part of the larger
    system, enhancing the overall functionality and efficiency of the LayoutCopilot.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，这些提示组件确保每个代理不仅在其各自领域内作为专家运行，而且作为更大系统的连贯部分，增强了LayoutCopilot的整体功能和效率。
- en: 3.4\. Interactive Layout Editor
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.4\. 交互式布局编辑器
- en: Table 1\. Interactive command set.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 表1\. 交互式命令集。
- en: '| Command | Parameters |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 命令 | 参数 |'
- en: '| deviceMove | device $v_{i}$ |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 设备移动 | 设备 $v_{i}$ |'
- en: '| deviceSwap | devices $v_{i},v_{j}$ |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 设备交换 | 设备 $v_{i},v_{j}$ |'
- en: '| arrayAdd | a list of devices ${v_{i}}$ |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| arrayAdd | 设备列表 ${v_{i}}$ |'
- en: '| arraySpace | an array group $g_{i}$ |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 数组间距 | 数组组 $g_{i}$ |'
- en: '| symAdd | devices $v_{i},v_{j}$ |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| symAdd | 设备 $v_{i},v_{j}$ |'
- en: '| netRemove | net $n_{i}$ |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 网络移除 | 网络 $n_{i}$ |'
- en: '| netReroute | net $n_{i}$ |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 网络重路由 | 网络 $n_{i}$ |'
- en: '| wireWidth | wire $w_{i}$ |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 电线宽度 | 电线 $w_{i}$ |'
- en: '| wireSpacing | wire $w_{i}$ |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 电线间距 | 电线 $w_{i}$ |'
- en: '| wire $w_{i}$ |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 电线 $w_{i}$ |'
- en: '| netPriority | a list of nets ${n_{i}}$ with their priorities |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 网络优先级 | 网络列表 ${n_{i}}$ 及其优先级 |'
- en: '| netTopology | net $n_{i}$ |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 网络拓扑 | 网络 $n_{i}$ |'
- en: Table 2\. Sanity checks and comparison for single-agent with instruction vs.
    multi-agent with and without instruction.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 表2\. 单代理有指令与多代理有无指令的健全性检查和比较。
- en: '| Category | Single-agent w/ Instruction | Multi-agent w/o Instruction | Multi-agent
    w/ Instruction |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 类别 | 单代理有指令 | 多代理无指令 | 多代理有指令 |'
- en: '| GPT-3.5 | GPT-4 | Claude 3 | Avg. | GPT-3.5 | GPT-4 | Claude 3 | Avg. | GPT-3.5
    | GPT-4 | Claude 3 | Avg. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| GPT-3.5 | GPT-4 | Claude 3 | 平均 | GPT-3.5 | GPT-4 | Claude 3 | 平均 | GPT-3.5
    | GPT-4 | Claude 3 | 平均 |'
- en: '| Formatting | 71.14% | 90.91% | 99.25% | 87.20% | 82.00% | 97.92% | 99.83%
    | 93.25% | 95.38% | 99.76% | 99.92% | 98.26% |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| 格式化 | 71.14% | 90.91% | 99.25% | 87.20% | 82.00% | 97.92% | 99.83% | 93.25%
    | 95.38% | 99.76% | 99.92% | 98.26% |'
- en: '| Validity | 91.36% | 93.60% | 95.44% | 93.47% | 96.88% | 99.20% | 98.40% |
    98.16% | 98.24% | 99.28% | 98.88% | 98.77% |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 有效性 | 91.36% | 93.60% | 95.44% | 93.47% | 96.88% | 99.20% | 98.40% | 98.16%
    | 98.24% | 99.28% | 98.88% | 98.77% |'
- en: '| Syntax | 67.11% | 88.87% | 95.24% | 83.74% | 79.20% | 95.28% | 97.76% | 90.75%
    | 92.65% | 97.20% | 96.96% | 95.60% |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 语法 | 67.11% | 88.87% | 95.24% | 83.74% | 79.20% | 95.28% | 97.76% | 90.75%
    | 92.65% | 97.20% | 96.96% | 95.60% |'
- en: '| Logic | 66.44% | 83.04% | 91.67% | 80.38% | 76.16% | 93.44% | 95.20% | 88.27%
    | 91.24% | 94.24% | 98.80% | 94.76% |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 逻辑 | 66.44% | 83.04% | 91.67% | 80.38% | 76.16% | 93.44% | 95.20% | 88.27%
    | 91.24% | 94.24% | 98.80% | 94.76% |'
- en: '| Overall | 66.27% | 82.91% | 90.77% | 79.98% | 75.76% | 93.36% | 94.56% |
    87.89% | 90.92% | 93.92% | 96.80% | 93.75% |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 总体 | 66.27% | 82.91% | 90.77% | 79.98% | 75.76% | 93.36% | 94.56% | 87.89%
    | 90.92% | 93.92% | 96.80% | 93.75% |'
- en: 'Interactive layout editor bridges the gap between fully automated analog layout
    tools and real-world industrial applications. Our interactive analog editor is
    based on previous interactive works ([gaoInteracplacement,](#bib.bib21) ; [gao_interactive_2023,](#bib.bib22)
    ) with some extensions. Figure [6](#S3.F6 "Figure 6 ‣ 3.4\. Interactive Layout
    Editor ‣ 3\. LayoutCopilot Framework ‣ LayoutCopilot: An LLM-powered Multi-agent
    Collaborative Framework for Interactive Analog Layout Design") shows the overview
    of the interactive layout editor. Before the interactive adjustment flow starts,
    an initial layout is given by fully automated tools. These tools take the netlists,
    technology files, and some basic constraints as the input. Based on the initial
    layout, users can start making interactive layout adjustments more intuitively
    through the user interface. The user interface consists of a natural language
    interface and a layout GUI. Compared to the previous script-based interface ([gaoInteracplacement,](#bib.bib21)
    ; [gao_interactive_2023,](#bib.bib22) ), users can use natural language to adjust
    the analog layout directly. After converting the natural language into a list
    of commands in the command set shown in Table  [1](#S3.T1 "Table 1 ‣ 3.4\. Interactive
    Layout Editor ‣ 3\. LayoutCopilot Framework ‣ LayoutCopilot: An LLM-powered Multi-agent
    Collaborative Framework for Interactive Analog Layout Design"), the command interpreter
    will decompose each command into placement and routing operations. After the adjustment,
    the layout result will be shown in the GUI. Users can further adjust the layout
    according to the given result.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '交互式布局编辑器弥合了完全自动化模拟布局工具和实际工业应用之间的差距。我们的交互式模拟编辑器基于之前的交互式工作（[gaoInteracplacement](#bib.bib21)
    ; [gao_interactive_2023](#bib.bib22)）并进行了一些扩展。图 [6](#S3.F6 "Figure 6 ‣ 3.4\. Interactive
    Layout Editor ‣ 3\. LayoutCopilot Framework ‣ LayoutCopilot: An LLM-powered Multi-agent
    Collaborative Framework for Interactive Analog Layout Design") 显示了交互式布局编辑器的概述。在交互调整流程开始之前，完全自动化的工具会提供初始布局。这些工具将网络列表、技术文件和一些基本约束作为输入。基于初始布局，用户可以通过用户界面更加直观地开始进行交互式布局调整。用户界面由自然语言界面和布局
    GUI 组成。与之前的基于脚本的界面（[gaoInteracplacement](#bib.bib21) ; [gao_interactive_2023](#bib.bib22)）相比，用户可以使用自然语言直接调整模拟布局。在将自然语言转换为表格
    [1](#S3.T1 "Table 1 ‣ 3.4\. Interactive Layout Editor ‣ 3\. LayoutCopilot Framework
    ‣ LayoutCopilot: An LLM-powered Multi-agent Collaborative Framework for Interactive
    Analog Layout Design") 中所示的命令集的命令列表后，命令解释器会将每个命令分解为布置和布线操作。调整后，布局结果将显示在 GUI 中。用户可以根据给定结果进一步调整布局。'
- en: '![Refer to caption](img/8a1333735bdf4149e15f0e8b8eb9e383.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/8a1333735bdf4149e15f0e8b8eb9e383.png)'
- en: Figure 6\. Overview of the interactive layout editor.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6\. 交互式布局编辑器概述。
- en: For placement adjustment, users are provided with seven different commands.
    Theoretically, arbitrary placement adjustments can be achieved by the combination
    of these commands. move command can move a device to a given location. swap command
    can swap the location of two given devices. For array-based adjustment, the arrayAdd
    command adds the array constraints to a group of devices and arraySpace adjusts
    the space between devices in the array group. Symmetry constraints can be added
    by symAdd command. With these commands, users can make placement adjustments easily.
    For instance, the Solution Refiner Agent decided earlier to enhance the symmetry
    of differential pairs, and the Solution Adapter Agent identified a differential
    pair {M6, M7}. Then the layout modification can be achieved by executing symAdd
    M6 M7, generated by the Concrete Request Processor.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于布局调整，用户可以使用七个不同的命令。从理论上讲，这些命令的组合可以实现任意的布局调整。move 命令可以将设备移动到给定的位置。swap 命令可以交换两个给定设备的位置。对于基于阵列的调整，arrayAdd
    命令将阵列约束添加到一组设备中，而 arraySpace 命令调整阵列组中设备之间的间距。对称约束可以通过 symAdd 命令添加。使用这些命令，用户可以轻松进行布局调整。例如，解决方案优化代理之前决定增强差分对的对称性，解决方案适配器代理确定了一个差分对
    {M6, M7}。然后可以通过执行由具体请求处理器生成的 symAdd M6 M7 来实现布局修改。
- en: For routing adjustment, users are provided with six different commands. remove
    and reroute are basic commands for removing unsatisfied wires and rerouting them.
    wireWidth command can change the width of a given net or wire to improve the layout
    performance. wireSpacing command can adjust the spacing between two nets to avoid
    the signal cross-talk. netPriority command can designate a specific routing priority
    of nets. Manual guidance can be set by netTopology command, and the final routing
    solution will follow the guidance tightly. With these commands, users can accomplish
    arbitrary routing adjustments.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于布线调整，用户可以使用六个不同的命令。remove和reroute是用于移除不满意的线路并重新布线的基本命令。wireWidth命令可以改变给定网络或线路的宽度，以改善布局性能。wireSpacing命令可以调整两个网络之间的间距，以避免信号串扰。netPriority命令可以指定网络的特定布线优先级。netTopology命令可以设置手动指导，最终的布线解决方案将严格遵循指导。使用这些命令，用户可以完成任意布线调整。
- en: 4\. Experimental Results
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 实验结果
- en: LayoutCopilot is designed as a multi-agent collaborative framework that incorporates
    mechanisms for agent cooperation and detailed configurations for each agent. It
    is adaptable to various LLMs and layout tools, facilitating flexible deployment
    across different environments. In our experiments, we utilize a mature interactive
    analog layout design tool  ([gaoInteracplacement,](#bib.bib21) ; [gao_interactive_2023,](#bib.bib22)
    ) for demonstration. Moreover, we employ different versions of prevailing LLMs
    to demonstrate the versatility of LayoutCopilot including GPT-3.5 ([brown2020language,](#bib.bib23)
    ), GPT-4 ([openai_gpt-4_2024,](#bib.bib26) ), and Claude3 ([claude3,](#bib.bib28)
    ). Next, we will conduct experiments separately for concrete and abstract requests,
    showcasing LayoutCopilot’s accuracy in handling basic tasks and its capacity to
    manage complex and comprehensive circuit optimization tasks.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: LayoutCopilot被设计为一个多代理协作框架，包含代理合作机制和每个代理的详细配置。它适应各种LLM和布局工具，便于在不同环境中的灵活部署。在我们的实验中，我们使用一个成熟的交互式模拟布局设计工具 ([gaoInteracplacement,](#bib.bib21)
    ; [gao_interactive_2023,](#bib.bib22) )进行演示。此外，我们使用了不同版本的流行LLM来展示LayoutCopilot的多样性，包括GPT-3.5 ([brown2020language,](#bib.bib23)
    ), GPT-4 ([openai_gpt-4_2024,](#bib.bib26) )和Claude3 ([claude3,](#bib.bib28) )。接下来，我们将分别对具体请求和抽象请求进行实验，展示LayoutCopilot在处理基本任务方面的准确性以及其处理复杂和全面电路优化任务的能力。
- en: '4.1\. Concrete Requests: Comprehensive Evaluation'
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.1\. 具体请求：综合评估
- en: 'To assess the effectiveness of our framework and the quality of the outputs
    it generates, we conduct experiments on concrete requests. These requests are
    expressed in natural language that can be straightforwardly transformed into command
    sequences for back-end tools. We utilize GPT-3.5 ([LanguageModelsareFewShotLearners,](#bib.bib42)
    ) and Claude-3 ([claude3,](#bib.bib28) ) to generate a total of 1,250 cases, consisting
    of 1,134 valid concrete requests and 116 invalid requests. The invalid requests
    typically lack essential parameters or described operations in an order that violates
    the predefined rules in the manual, and we have verified these manually to confirm
    their invalidity. Each request contains between 1 to 40 commands from Table  [1](#S3.T1
    "Table 1 ‣ 3.4\. Interactive Layout Editor ‣ 3\. LayoutCopilot Framework ‣ LayoutCopilot:
    An LLM-powered Multi-agent Collaborative Framework for Interactive Analog Layout
    Design"), ensuring a variety of scenarios in requests. LayoutCopilot processes
    each concrete request to generate a command sequence that the layout tool could
    execute to fulfill the requirement. To fully validate the performance of LayoutCopilot,
    we performed sanity check and functionality check on those test cases as described
    below:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '为了评估我们框架的有效性和生成输出的质量，我们在具体请求上进行了实验。这些请求用自然语言表达，可以直接转换成后端工具的命令序列。我们利用GPT-3.5 ([LanguageModelsareFewShotLearners,](#bib.bib42)
    )和Claude-3 ([claude3,](#bib.bib28) )生成了总计1,250个案例，包括1,134个有效具体请求和116个无效请求。无效请求通常缺少必要的参数或描述操作的顺序违反了手册中预定义的规则，我们已手动验证确认这些请求的无效性。每个请求包含1到40个来自表格[1](#S3.T1
    "Table 1 ‣ 3.4\. Interactive Layout Editor ‣ 3\. LayoutCopilot Framework ‣ LayoutCopilot:
    An LLM-powered Multi-agent Collaborative Framework for Interactive Analog Layout
    Design")的命令，确保了请求场景的多样性。LayoutCopilot处理每个具体请求，生成一个命令序列，该序列可以被布局工具执行以满足要求。为了全面验证LayoutCopilot的性能，我们对这些测试案例进行了如下的理智检查和功能检查：'
- en: 4.1.1\. Sanity Check
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 4.1.1\. 理智检查
- en: This subsection introduces the experimental condition settings, test criteria,
    and results of the sanity check.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 本小节介绍了实验条件设置、测试标准和合理性检查的结果。
- en: 'To validate the effectiveness of our agent configuration, we execute experiments
    under two distinct settings: one with the comprehensive configuration of the LLM
    through prompt engineering as outlined in Section [3.3](#S3.SS3 "3.3\. Agent Configuration
    and Prompt Design ‣ 3\. LayoutCopilot Framework ‣ LayoutCopilot: An LLM-powered
    Multi-agent Collaborative Framework for Interactive Analog Layout Design"), and
    the other by simply providing the LLM with the layout tool manual along with a
    straightforward task description that included input-output requirements. Additionally,
    comparative experiments are conducted using a single-agent setup under instructed
    conditions to demonstrate the necessity of the multi-agent methodology. In the
    multi-agent scenario, LayoutCopilot acts as a multi-agent collaborative framework,
    employing its Concrete Request Processor to manage requests from the test set.
    Conversely, the single-agent configuration merges all agent prompts mentioned
    in Section [3](#S3 "3\. LayoutCopilot Framework ‣ LayoutCopilot: An LLM-powered
    Multi-agent Collaborative Framework for Interactive Analog Layout Design") into
    a single LLM agent aimed at encompassing the entire functionality of LayoutCopilot
    for handling the test requests. To minimize the impact of different LLM engines
    on the experimental outcomes, bulk testing is performed using GPT-3.5, GPT-4,
    and Claude-3 as the LLM engines.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '为了验证我们代理配置的有效性，我们在两个不同的设置下执行实验：一个是通过提示工程对LLM进行全面配置，如[3.3](#S3.SS3 "3.3\. Agent
    Configuration and Prompt Design ‣ 3\. LayoutCopilot Framework ‣ LayoutCopilot:
    An LLM-powered Multi-agent Collaborative Framework for Interactive Analog Layout
    Design")节所述，另一个是仅向LLM提供布局工具手册及包含输入输出要求的简单任务描述。此外，还通过在指令条件下使用单代理设置进行比较实验，以展示多代理方法的必要性。在多代理场景下，LayoutCopilot作为一个多代理协作框架，利用其Concrete
    Request Processor来管理测试集中的请求。相反，单代理配置将[3](#S3 "3\. LayoutCopilot Framework ‣ LayoutCopilot:
    An LLM-powered Multi-agent Collaborative Framework for Interactive Analog Layout
    Design")节中提到的所有代理提示合并为一个LLM代理，旨在涵盖LayoutCopilot的全部功能以处理测试请求。为了最小化不同LLM引擎对实验结果的影响，批量测试使用了GPT-3.5、GPT-4和Claude-3作为LLM引擎。'
- en: 'Regarding testing standards, the sanity check covers formatting, validity,
    syntax, logic rules, and overall accuracy. (i) For the output format, the agent
    is required to generate processing status and results in JSON following regular
    text dialogue, ensuring that layout tools can accurately interpret the content
    and implement the necessary layout adjustments. (ii) Validity is measured by the
    rate at which the system correctly identifies and responds to invalid inputs.
    We expect LayoutCopilot to be capable of detecting invalid inputs and providing
    feedback to designers, such as commands missing specific parameters. (iii) & (iv)
    We conduct syntactic and logical verification. Based on the command set in Table
    [1](#S3.T1 "Table 1 ‣ 3.4\. Interactive Layout Editor ‣ 3\. LayoutCopilot Framework
    ‣ LayoutCopilot: An LLM-powered Multi-agent Collaborative Framework for Interactive
    Analog Layout Design"), we establish four syntactic and two logical rules to ensure
    the integrity and logic of the command sequence. For example, a syntax rule ensures
    each command contains the correct number of parameters and one of the logic rules
    says that a device cannot appear in multiple symmetry pairs. Due to the page limit,
    we do not list all the rules here. (v) Successful processing of a request that
    either generates correctly formatted code adhering to these rules or accurately
    identifies an illegal request is considered correct handling and included in the
    overall accuracy statistics.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '关于测试标准，**健全性检查**涵盖了格式、有效性、语法、逻辑规则和整体准确性。(i) 对于输出格式，要求代理生成处理状态和结果的`JSON`，遵循常规文本对话，确保布局工具可以准确解释内容并实施必要的布局调整。(ii)
    有效性通过系统正确识别和响应无效输入的比率来衡量。我们期望LayoutCopilot能够检测无效输入并向设计师提供反馈，例如缺少特定参数的命令。(iii)
    和 (iv) 我们进行语法和逻辑验证。根据表格[1](#S3.T1 "表 1 ‣ 3.4\. 互动布局编辑器 ‣ 3\. LayoutCopilot 框架
    ‣ LayoutCopilot: 基于LLM的多代理协作框架用于互动模拟布局设计")中的命令集，我们建立了四条语法规则和两条逻辑规则，以确保命令序列的完整性和逻辑性。例如，一条语法规则确保每个命令包含正确数量的参数，而一条逻辑规则规定一个设备不能出现在多个对称对中。由于页面限制，我们未在此列出所有规则。(v)
    成功处理生成符合这些规则的正确格式代码或准确识别非法请求的请求被视为正确处理，并纳入整体准确性统计中。'
- en: 'We conduct experiments on the previously mentioned test set of 1,250 cases
    following the outlined criteria, with the results displayed in Table [2](#S3.T2
    "Table 2 ‣ 3.4\. Interactive Layout Editor ‣ 3\. LayoutCopilot Framework ‣ LayoutCopilot:
    An LLM-powered Multi-agent Collaborative Framework for Interactive Analog Layout
    Design"). Firstly, it is evident that instructions significantly enhance accuracy
    across various LLM engines, with average improvements of 6.49% in logical verification,
    4.85% in syntactic verification, and an overall increase of 5.89% in overall accuracy.
    This confirms the effectiveness of our LLM agent settings described in Subsection
    [3.3](#S3.SS3 "3.3\. Agent Configuration and Prompt Design ‣ 3\. LayoutCopilot
    Framework ‣ LayoutCopilot: An LLM-powered Multi-agent Collaborative Framework
    for Interactive Analog Layout Design") and enhances the quality of LayoutCopilot’s
    outputs. Secondly, the accuracy rates for the single-agent configuration are consistently
    lower than those for the multi-agent setup, regardless of whether instructions
    are used across different LLM engines. This demonstrates the effectiveness of
    introducing a multi-agent methodology in this application scenario. Lastly, under
    conditions using Claude-3, multi-agent configuration, and with instructions, the
    overall correctness rate of the sanity check reaches 96.80%. This confirms that
    LayoutCopilot’s comprehensive capabilities are sufficient to meet practical application
    requirements.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '我们在之前提到的1,250个测试案例上进行实验，遵循上述标准，结果显示在表[2](#S3.T2 "表 2 ‣ 3.4\. 互动布局编辑器 ‣ 3\.
    LayoutCopilot 框架 ‣ LayoutCopilot: 基于LLM的多代理协作框架用于互动模拟布局设计")中。首先，显而易见，指令显著提高了各种LLM引擎的准确性，逻辑验证的平均提升为6.49%，语法验证的提升为4.85%，整体准确性增加了5.89%。这确认了我们在[3.3节](#S3.SS3
    "3.3\. 代理配置和提示设计 ‣ 3\. LayoutCopilot 框架 ‣ LayoutCopilot: 基于LLM的多代理协作框架用于互动模拟布局设计")中描述的LLM代理设置的有效性，并提高了LayoutCopilot输出的质量。其次，无论是否在不同LLM引擎中使用指令，单代理配置的准确率始终低于多代理设置。这证明了在该应用场景中引入多代理方法的有效性。最后，在使用Claude-3、多代理配置和指令的条件下，**健全性检查**的总体正确率达到了96.80%。这确认了LayoutCopilot的综合能力足以满足实际应用需求。'
- en: 4.1.2\. Functionality Check
  id: totrans-109
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 4.1.2\. 功能检查
- en: '![Refer to caption](img/827bcd19fe590bddc51b14238adbd61d.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/827bcd19fe590bddc51b14238adbd61d.png)'
- en: Figure 7\. Functionality check with different LLM engines across instructional
    conditions.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7\. 在不同 LLM 引擎下进行功能性检查的实验条件。
- en: 'To further assess the functional correctness of the outputs generated by LayoutCopilot
    on the aforementioned test set, we randomly select 25 cases from the 1,250 generated
    results that have passed the sanity check. These are subjected to a manual functionality
    check to verify if they fully implemented the corresponding requests. Like the
    standards used in ChatEDA ([he_chateda_2024,](#bib.bib39) ), we categorize the
    output results into three levels: A, B, and C. Level A corresponds to output functionally
    correct and displays clear analytical reasoning. Level B indicates outputs where
    the functionality has minor flaws, but the analytical reasoning is clear, allowing
    designers to identify and rectify issues easily through interaction with the LLM.
    Level C represents outputs that fail both functionally and conceptually, offering
    little valuable information to help diagnose issues.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步评估 LayoutCopilot 在上述测试集上生成的输出的功能正确性，我们从 1,250 个通过验证的生成结果中随机选择 25 个案例。这些案例经过人工功能检查，以验证是否完全实现了相应的请求。按照
    ChatEDA 使用的标准（[he_chateda_2024,](#bib.bib39)），我们将输出结果分为三个级别：A、B 和 C。A级对应功能上正确且分析推理清晰的输出。B级表示功能上有轻微缺陷但分析推理清晰的输出，允许设计师通过与
    LLM 的交互轻松识别和纠正问题。C级代表功能和概念上都失败的输出，几乎没有提供有价值的信息来帮助诊断问题。
- en: 'We conduct tests using the Concrete Request Processor both with and without
    instructions, corresponding to the multi-agent section in Table 2\. The single-agent
    scenario is omitted due to its significantly lower pass rate in sanity check,
    which do not offer valuable comparative insights. As summarized in Figure  [7](#S4.F7
    "Figure 7 ‣ 4.1.2\. Functionality Check ‣ 4.1\. Concrete Requests: Comprehensive
    Evaluation ‣ 4\. Experimental Results ‣ LayoutCopilot: An LLM-powered Multi-agent
    Collaborative Framework for Interactive Analog Layout Design"), functionality
    check results with instructions significantly outperform those without instructions
    across different LLM engines: on one hand, the proportion of Level A increases
    by 16% to 32%, reaching up to 92% with GPT-4 at the highest; on the other hand,
    Level C, which are not uncommon without instructions, almost disappear under instructed
    conditions, with no more than 8% in GPT-3.5\. This indicates that the use of instructions,
    as discussed in Section 3.3, substantially enhances the usability of LayoutCopilot,
    where the majority of outputs are either correct or can be easily corrected through
    simple interactions. Additionally, the percentage of C level under instructed
    conditions is low regardless of the LLM engine used, thus proving its effectiveness
    across LLM engines. Overall, the functionality validation demonstrates that LayoutCopilot’s
    design significantly enhances the output quality, proving its practical utility.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '我们使用混凝土请求处理器进行测试，包括有指令和无指令的情况，这对应于表 2 中的多代理部分。由于单代理场景的通过率显著较低，不提供有价值的比较见解，因此被省略。如图[7](#S4.F7
    "Figure 7 ‣ 4.1.2\. Functionality Check ‣ 4.1\. Concrete Requests: Comprehensive
    Evaluation ‣ 4\. Experimental Results ‣ LayoutCopilot: An LLM-powered Multi-agent
    Collaborative Framework for Interactive Analog Layout Design")所示，带指令的功能检查结果显著优于不带指令的结果：一方面，A级的比例增加了
    16% 到 32%，GPT-4 的最高比例达到 92%；另一方面，无指令下并不少见的C级在有指令条件下几乎消失，GPT-3.5 中不超过 8%。这表明如第
    3.3 节讨论的那样，使用指令显著提升了 LayoutCopilot 的可用性，其中大多数输出要么正确，要么可以通过简单的交互轻松纠正。此外，无论使用哪个
    LLM 引擎，在有指令条件下C级的比例都很低，从而证明了其在 LLM 引擎中的有效性。总体而言，功能验证表明 LayoutCopilot 的设计显著提升了输出质量，证明了其实际实用性。'
- en: '4.2\. Abstract Requests: Case Studies'
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.2\. 抽象请求：案例研究
- en: 'In this subsection, we illustrate LayoutCopilot’s capabilities in addressing
    abstract requests by optimizing layouts in real-world designs. To verify its versatility,
    we applied LayoutCopilot to two practical circuits, an Operational Transconductance
    Amplifier (OTA) and a Comparator (COMP), depicted respectively in Figure [8](#S4.F8
    "Figure 8 ‣ 4.2\. Abstract Requests: Case Studies ‣ 4\. Experimental Results ‣
    LayoutCopilot: An LLM-powered Multi-agent Collaborative Framework for Interactive
    Analog Layout Design") (a) and (b).'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '在这一小节中，我们展示了 LayoutCopilot 在解决抽象请求方面的能力，通过优化实际设计中的布局来验证其多功能性。为了验证其通用性，我们将 LayoutCopilot
    应用于两个实际电路，一个是运算跨导放大器 (OTA)，另一个是比较器 (COMP)，分别如图 [8](#S4.F8 "图8 ‣ 4.2\. 抽象请求：案例研究
    ‣ 4\. 实验结果 ‣ LayoutCopilot: 一种基于 LLM 的多代理协作框架，用于互动模拟布局设计")（a）和（b）所示。'
- en: '![Refer to caption](img/a3807163116c4f6278a8f167a4a2d630.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明文字](img/a3807163116c4f6278a8f167a4a2d630.png)'
- en: Figure 8\. Interactive LLM-powered layout adjustment on OTA and COMP.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图8\. 互动式 LLM 驱动的 OTA 和 COMP 布局调整。
- en: 4.2.1\. Operational Transconductance Amplifier (OTA)
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 4.2.1\. 运算跨导放大器 (OTA)
- en: 'Figure [8](#S4.F8 "Figure 8 ‣ 4.2\. Abstract Requests: Case Studies ‣ 4\. Experimental
    Results ‣ LayoutCopilot: An LLM-powered Multi-agent Collaborative Framework for
    Interactive Analog Layout Design")(a) showcases the layout optimization process
    for an OTA. We employ the MAGICAL ([xu_magical_2019,](#bib.bib18) ; [chen_magical_2021,](#bib.bib20)
    ; [chenMAGICALOpenSource2021,](#bib.bib19) ) to generate the initial placement
    layout ①, without any constraints applied. The initial layout is irrelevant to
    our framework, which focuses solely on modifications rather than origins. From
    layout ①, we engage LayoutCopilot to suggest improvements during the placement
    phase, simulating real-world scenarios faced by designers. LayoutCopilot proposes
    a series of high-level solutions, briefly shown as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '图 [8](#S4.F8 "图8 ‣ 4.2\. 抽象请求：案例研究 ‣ 4\. 实验结果 ‣ LayoutCopilot: 一种基于 LLM 的多代理协作框架，用于互动模拟布局设计")（a）
    展示了 OTA 布局优化过程。我们采用 MAGICAL ([xu_magical_2019,](#bib.bib18) ; [chen_magical_2021,](#bib.bib20)
    ; [chenMAGICALOpenSource2021,](#bib.bib19) ) 生成初始布置布局 ①，未应用任何约束。初始布局与我们的框架无关，我们的框架专注于修改而非起始布局。从布局
    ① 开始，我们让 LayoutCopilot 在布置阶段提出改进建议，模拟设计师面对的实际场景。LayoutCopilot 提出了一系列高层次的解决方案，简要展示如下：'
- en: 'Designer:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 设计师：
- en: 'I got an OTA layout, but it has poor performance. How can I improve it?
    LayoutCopilot: Improving the performance of your OTA layout can
    involve… Here are some potential high-level solutions: 1. Enhance Symmetry with
    symAdd: … 2. Improve Matching with deviceMove and deviceSwap: … 3. Reduce Parasitics
    with wireWidth and wireSpacing: … 4. Prevent Crosstalk with wireSpacing: … 5.
    Improve Routing with netPriority and netTopology: … 6. …'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '我得到了一种 OTA 布局，但性能较差。我该如何改善呢？ LayoutCopilot: 改善 OTA 布局性能的方法包括…
    以下是一些可能的高层解决方案： 1. 使用 symAdd 增强对称性：… 2. 使用 deviceMove 和 deviceSwap 改善匹配：… 3. 使用
    wireWidth 和 wireSpacing 减少寄生效应：… 4. 使用 wireSpacing 防止串扰：… 5. 使用 netPriority 和
    netTopology 改善布线：… 6. …'
- en: 'Following this, we select the ‘Enhance Symmetry’ option and provide LayoutCopilot
    with the netlist, asking for concrete implementation steps. LayoutCopilot analyzes
    the netlist and identifies key circuit components that should have symmetry constraints
    applied:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们选择‘增强对称性’选项，并将网表提供给 LayoutCopilot，要求其提供具体的实施步骤。LayoutCopilot 分析网表，并识别出应该应用对称性约束的关键电路组件：
- en: 'Designer:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 设计师：
- en: 'Okay, I prefer to start with the Enhance Symmetry optimization since the current
    symmetry looks terrible. Here is the circuit netlist: [Netlist].'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我更愿意从增强对称性优化开始，因为当前的对称性看起来很糟糕。这是电路网络列表：[Netlist]。
- en: 'Which devices should I add symmetry to? Please help me with the corresponding
    commands. LayoutCopilot: Let''s proceed
    with analyzing the netlist to identify critical devices… *Devices for Symmetry:*
    1. Differential Input Pair: M34 (net0130 VIM PTAIL VDD) and M35 (net0132 VIP PTAIL
    VDD) handle the input signals … 2. Output Stage Devices: M71 (VOP VO1M VDD VDD)
    and M70 (VOM VO1P VDD VDD) are used in the output stage … 3. Tail Current Source:
    M1 (NTAIL NBIAS_TAIL GND GND) functions as a tail current source… 4. … *Command
    Sequence:*'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '我应该在哪些设备上添加对称性？请帮我提供相应的命令。 LayoutCopilot: 让我们继续分析网络列表，以识别关键设备……
    *对称性设备：* 1. 差分输入对：M34（net0130 VIM PTAIL VDD）和M35（net0132 VIP PTAIL VDD）处理输入信号……
    2. 输出级设备：M71（VOP VO1M VDD VDD）和M70（VOM VO1P VDD VDD）用于输出级…… 3. 尾电流源：M1（NTAIL NBIAS_TAIL
    GND GND）充当尾电流源…… 4. …… *命令序列：*'
- en: '[PRE0]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: …
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: After executing these commands, the resultant layout is shown in ②. Observing
    layout ②, we note that large capacitors were not symmetrically constrained, leading
    to a loose and cluttered arrangement. Upon receiving more concrete requests from
    us, LayoutCopilot applies symmetry constraints to all capacitors based on sizing
    results and connectivity, resulting in layout ③. For the sake of simplicity, the
    subsequent replies are not shown specifically.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 执行这些命令后，结果布局显示在②中。观察布局②，我们注意到大型电容器未对称约束，导致布局松散且凌乱。在收到更具体的请求后，LayoutCopilot根据尺寸结果和连通性对所有电容器应用对称性约束，生成了布局③。为了简洁起见，后续的回复未具体展示。
- en: 'Further, we direct LayoutCopilot to apply symmetry to all possible components,
    including resistors that were previously unconsidered. After identifying suitable
    components in the netlist, LayoutCopilot generates and executes the corresponding
    commands, yielding layout ④. With the placement appearing optimally refined visually,
    we proceed with a basic routing command to produce layout ⑤. Subsequent post-layout
    simulation reveals excessive parasitics, leading us to seek further solutions
    from LayoutCopilot. Among its suggestions—increasing power and ground wire widths,
    adjusting wire spacing to minimize crosstalk, and prioritizing critical nets for
    rerouting—we choose to increase the wire widths of power and ground lines, resulting
    in layout ⑥. With the post-layout results now meeting our specifications as shown
    in Table [4](#S4.T4 "Table 4 ‣ 4.2.1\. Operational Transconductance Amplifier
    (OTA) ‣ 4.2\. Abstract Requests: Case Studies ‣ 4\. Experimental Results ‣ LayoutCopilot:
    An LLM-powered Multi-agent Collaborative Framework for Interactive Analog Layout
    Design"), we terminated the iterative optimization process.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '此外，我们指示LayoutCopilot对所有可能的组件应用对称性，包括之前未考虑的电阻器。在识别出网络列表中的合适组件后，LayoutCopilot生成并执行相应的命令，得到布局④。由于放置效果在视觉上已经得到优化，我们继续使用基本布线命令生成布局⑤。随后的后布局仿真显示出过多的寄生效应，我们寻求LayoutCopilot的进一步解决方案。在其建议中——增加电源和接地线的宽度、调整线路间距以减少串扰，以及优先考虑关键网线进行重新布线——我们选择了增加电源和接地线的宽度，得到布局⑥。随着后布局结果现在符合我们的规格，如表[4](#S4.T4
    "表4 ‣ 4.2.1\. 操作跨导放大器 (OTA) ‣ 4.2\. 摘要请求：案例研究 ‣ 4\. 实验结果 ‣ LayoutCopilot: 一个由LLM驱动的多代理协作框架用于互动模拟布局设计")所示，我们终止了迭代优化过程。'
- en: Table 3\. Placement area statistics.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 表3\. 放置区域统计。
- en: '| Benchmark | Technology | Placement | Area |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| 基准 | 技术 | 放置 | 区域 |'
- en: '| Node | Area | Ratio |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 节点 | 区域 | 比例 |'
- en: '| OTA-1 | TSMC40 | $83.4\times 124.2\mu m^{2}$ | 1.00 |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| OTA-1 | TSMC40 | $83.4\times 124.2\mu m^{2}$ | 1.00 |'
- en: '| OTA-2 | $85.0\times 148.9\mu m^{2}$ | 1.22 |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| OTA-2 | $85.0\times 148.9\mu m^{2}$ | 1.22 |'
- en: '| OTA-3 | $80.6\times 94.3\mu m^{2}$ | 0.73 |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| OTA-3 | $80.6\times 94.3\mu m^{2}$ | 0.73 |'
- en: '| OTA-4 | $85.4\times 80.4\mu m^{2}$ | 0.66 |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| OTA-4 | $85.4\times 80.4\mu m^{2}$ | 0.66 |'
- en: '| COMP-1 | TSMC28 | $38.3\times 39.7\mu m^{2}$ | 1.00 |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| COMP-1 | TSMC28 | $38.3\times 39.7\mu m^{2}$ | 1.00 |'
- en: '| COMP-2 | $24.0\times 46.9\mu m^{2}$ | 0.74 |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| COMP-2 | $24.0\times 46.9\mu m^{2}$ | 0.74 |'
- en: Table 4\. Comparison between LayoutCopilot and MAGICAL ([xu_magical_2019,](#bib.bib18)
    ; [chen_magical_2021,](#bib.bib20) ; [chenMAGICALOpenSource2021,](#bib.bib19)
    ) without constraints.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 表4\. LayoutCopilot与MAGICAL的比较 ([xu_magical_2019,](#bib.bib18) ; [chen_magical_2021,](#bib.bib20)
    ; [chenMAGICALOpenSource2021,](#bib.bib19) ) 在无约束条件下。
- en: '| Benchmark | Schematic | MAGICAL ([xu_magical_2019,](#bib.bib18) ; [chen_magical_2021,](#bib.bib20)
    ; [chenMAGICALOpenSource2021,](#bib.bib19) ) | LayoutCopilot |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| 基准测试 | 原理图 | MAGICAL ([xu_magical_2019,](#bib.bib18) ; [chen_magical_2021,](#bib.bib20)
    ; [chenMAGICALOpenSource2021,](#bib.bib19) ) | LayoutCopilot |'
- en: '| w/o Constraints |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 无约束 |'
- en: '| OTA | Gain (dB) | 38.63 | -8.75 | 38.26 |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| OTA | 增益 (dB) | 38.63 | -8.75 | 38.26 |'
- en: '| UGB (MHz) | 6.85 | – | 4.42 |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| UGB (MHz) | 6.85 | – | 4.42 |'
- en: '| CMRR (dB) | – | 27.3 | 58.7 |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| CMRR (dB) | – | 27.3 | 58.7 |'
- en: '| PM (degree) | 70.98 | – | 76.28 |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| PM (度) | 70.98 | – | 76.28 |'
- en: '| COMP | CMP_Delay (ns) | 3.3 | 6.3 | 6.7 |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| COMP | CMP_Delay (ns) | 3.3 | 6.3 | 6.7 |'
- en: '| Noise (uV) | 50.3 | 30.9 | 13.9 |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 噪声 (uV) | 50.3 | 30.9 | 13.9 |'
- en: '| RST_Delay (ps) | 89.8 | 165.8 | 538.7 |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| RST_Delay (ps) | 89.8 | 165.8 | 538.7 |'
- en: '| Power (uW) | 19.9 | 32.0 | 31.71 |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| 功耗 (uW) | 19.9 | 32.0 | 31.71 |'
- en: 'We conduct the optimization process under TSMC 40nm technology to verify the
    circuit performance after modifications, utilizing Cadence Virtuoso and Mentor
    Graphics Calibre for post-layout simulation. As we progressed through the interactive
    layout adjustment process with LayoutCopilot, the layout area initially increased
    during the placement phase but eventually reduced to 66% of its original size,
    as depicted in Table [3](#S4.T3 "Table 3 ‣ 4.2.1\. Operational Transconductance
    Amplifier (OTA) ‣ 4.2\. Abstract Requests: Case Studies ‣ 4\. Experimental Results
    ‣ LayoutCopilot: An LLM-powered Multi-agent Collaborative Framework for Interactive
    Analog Layout Design") and Figure [8](#S4.F8 "Figure 8 ‣ 4.2\. Abstract Requests:
    Case Studies ‣ 4\. Experimental Results ‣ LayoutCopilot: An LLM-powered Multi-agent
    Collaborative Framework for Interactive Analog Layout Design"). Given the complex
    relationship between placement & routing in analog circuits and their post-layout
    performance, improvements do not follow a linear progression from ① to ⑤, as described
    earlier for changes in the layout area. For simplicity, we compare the post-layout
    performance results between the initial layouts (without constraints) and the
    final layouts adjusted through interaction with LayoutCopilot, summarized in Table
    [4](#S4.T4 "Table 4 ‣ 4.2.1\. Operational Transconductance Amplifier (OTA) ‣ 4.2\.
    Abstract Requests: Case Studies ‣ 4\. Experimental Results ‣ LayoutCopilot: An
    LLM-powered Multi-agent Collaborative Framework for Interactive Analog Layout
    Design").'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '我们在TSMC 40nm技术下进行优化过程，以验证修改后的电路性能，使用Cadence Virtuoso和Mentor Graphics Calibre进行后布局仿真。在使用LayoutCopilot进行互动布局调整过程中，布局区域在布置阶段初期有所增加，但最终减少到原始大小的66%，如表
    [3](#S4.T3 "Table 3 ‣ 4.2.1\. Operational Transconductance Amplifier (OTA) ‣ 4.2\.
    Abstract Requests: Case Studies ‣ 4\. Experimental Results ‣ LayoutCopilot: An
    LLM-powered Multi-agent Collaborative Framework for Interactive Analog Layout
    Design") 和图 [8](#S4.F8 "Figure 8 ‣ 4.2\. Abstract Requests: Case Studies ‣ 4\.
    Experimental Results ‣ LayoutCopilot: An LLM-powered Multi-agent Collaborative
    Framework for Interactive Analog Layout Design") 所示。考虑到模拟电路中布置与布线及其后布局性能之间的复杂关系，改进并不遵循从①到⑤的线性进展，如之前对布局区域变化的描述。为简化起见，我们比较了初始布局（无约束条件下）与通过LayoutCopilot交互调整后的最终布局的后布局性能结果，汇总于表
    [4](#S4.T4 "Table 4 ‣ 4.2.1\. Operational Transconductance Amplifier (OTA) ‣ 4.2\.
    Abstract Requests: Case Studies ‣ 4\. Experimental Results ‣ LayoutCopilot: An
    LLM-powered Multi-agent Collaborative Framework for Interactive Analog Layout
    Design")。'
- en: In the initial layouts, due to excessive parasitics, the Gain was negative,
    the unity-gain bandwidth (UGB) and phase margin (PM) are substantially poor, and
    the common-mode rejection ratio (CMRR) is significantly low, showing a large discrepancy
    with the pre-layout schematic results which do not account for parasitic extractions.
    After adjustments made using LayoutCopilot, while there remains a disparity in
    UGB compared to the schematic results, both Gain and PM have closely approached
    the schematic levels, with CMRR showing substantial improvement over the initial
    layout. These results underscore the efficacy of LayoutCopilot in facilitating
    layout optimization through natural language interaction and reducing both the
    learning and coding time for designers, demonstrating its potential to serve as
    a powerful assistant for analog layout designers.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始布局中，由于寄生效应过多，增益为负值，单位增益带宽（UGB）和相位裕度（PM）都很差，而共模抑制比（CMRR）显著较低，与未考虑寄生效应的预布局原理图结果存在较大差异。经过使用LayoutCopilot进行调整后，尽管UGB与原理图结果仍有差异，但增益和PM已接近原理图水平，CMRR相较于初始布局有了显著改善。这些结果突显了LayoutCopilot通过自然语言交互促进布局优化的有效性，并减少了设计师的学习和编码时间，展示了其作为模拟布局设计师强大助手的潜力。
- en: 4.2.2\. Comparator (COMP)
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 4.2.2\. 比较器（COMP）
- en: 'A similar process for the COMP adjustments is employed, now utilizing the TSMC
    28nm technology as depicted in Figure [8](#S4.F8 "Figure 8 ‣ 4.2\. Abstract Requests:
    Case Studies ‣ 4\. Experimental Results ‣ LayoutCopilot: An LLM-powered Multi-agent
    Collaborative Framework for Interactive Analog Layout Design") (b). We optimize
    the symmetry for transistors and capacitors through interactions with LayoutCopilot,
    transforming an initial layout in ① into the improved layout in ②. As summarized
    in the lower half of Table [4](#S4.T4 "Table 4 ‣ 4.2.1\. Operational Transconductance
    Amplifier (OTA) ‣ 4.2\. Abstract Requests: Case Studies ‣ 4\. Experimental Results
    ‣ LayoutCopilot: An LLM-powered Multi-agent Collaborative Framework for Interactive
    Analog Layout Design"), the post-layout simulation result shows that we have significantly
    improved noise performance at the cost of delay and enhanced power efficiency
    compared to the initial layout. This adjustment process for both the OTA and CMP
    exemplifies how LayoutCopilot leverages its comprehensive knowledge base to provide
    actionable recommendations, effectively optimizing the layout of circuits with
    varying topologies and improving their post-simulation performance.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '对COMP调整采用类似的过程，现在使用TSMC 28nm技术，如图[8](#S4.F8 "Figure 8 ‣ 4.2\. Abstract Requests:
    Case Studies ‣ 4\. Experimental Results ‣ LayoutCopilot: An LLM-powered Multi-agent
    Collaborative Framework for Interactive Analog Layout Design")（b）所示。我们通过与LayoutCopilot的交互优化晶体管和电容器的对称性，将初始布局①转变为改进后的布局②。如表[4](#S4.T4
    "Table 4 ‣ 4.2.1\. Operational Transconductance Amplifier (OTA) ‣ 4.2\. Abstract
    Requests: Case Studies ‣ 4\. Experimental Results ‣ LayoutCopilot: An LLM-powered
    Multi-agent Collaborative Framework for Interactive Analog Layout Design")下半部分总结所示，后布局仿真结果表明，相比于初始布局，我们在延迟成本的情况下显著提高了噪声性能，并增强了功率效率。对OTA和CMP的调整过程展示了LayoutCopilot如何利用其全面的知识库提供可行的建议，有效优化不同拓扑电路的布局并提升其仿真后的性能。'
- en: 5\. Conclusion
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 结论
- en: In this work, we propose a multi-agent collaborative framework powered by LLMs
    for interactive analog layout design. LayoutCopilot can not only convert natural
    language instructions into executable script commands but also interpret high-level
    design intents into actionable suggestions for implementation. Technically, LayoutCopilot
    employs a multi-agent methodology alongside prompt engineering. Validated in both
    TSMC28 and TSMC40, the experimental results demonstrate the robustness and benefits
    of LayoutCopilot. Specifically, LayoutCopilot achieves high accuracy in handling
    concrete requests for layout adjustments and effectively improves layout performance
    in addressing abstract layout optimization requests. We believe this work can
    provide new insights into solving usability issues of interactive EDA tools and
    facilitate the development of automation tools for analog circuits.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这项工作中，我们提出了一个由LLMs驱动的多智能体协作框架，用于交互式模拟布局设计。LayoutCopilot不仅可以将自然语言指令转换为可执行的脚本命令，还能将高级设计意图转化为可操作的实施建议。从技术上讲，LayoutCopilot采用了多智能体方法和提示工程。通过在TSMC28和TSMC40中的验证，实验结果展示了LayoutCopilot的稳健性和优势。具体而言，LayoutCopilot在处理具体的布局调整请求方面具有高准确性，并有效地提高了应对抽象布局优化请求的布局性能。我们相信，这项工作可以为解决交互式EDA工具的可用性问题提供新的见解，并促进模拟电路自动化工具的发展。
- en: References
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献
- en: (1) Cadence Design Systems, *Virtuoso Layout Suite*, Cadence Design Systems,
    Inc., San Jose, CA, USA, 2023.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (1) Cadence Design Systems，*Virtuoso布局套件*，Cadence Design Systems, Inc.，美国加州圣荷西，2023年。
- en: (2) K. Lampaert *et al.*, “A performance-driven placement tool for analog integrated
    circuits,” *IEEE Journal of Solid-State Circuits*, vol. 30, pp. 773–780, 1995.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (2) K. Lampaert *等*，“一种性能驱动的模拟集成电路布置工具，”*IEEE固态电路期刊*，第30卷，第773–780页，1995年。
- en: (3) K. Lampaert *et al.*, “Analog routing for manufacturability,” in *Proceedings
    of Custom Integrated Circuits Conference*, 1996, pp. 175–178.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (3) K. Lampaert *等*，“针对可制造性的模拟布线，”发表于*定制集成电路会议论文集*，1996，第175–178页。
- en: (4) E. Malavasi *et al.*, “A routing methodology for analog integrated circuits.”
    in *ICCAD*.   Citeseer, 1990, pp. 202–205.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (4) E. Malavasi *等*，“模拟集成电路的布线方法学。”发表于*ICCAD*。 Citeseer，1990，第202–205页。
- en: (5) L. Xiao *et al.*, “Practical placement and routing techniques for analog
    circuit designs,” in *2010 IEEE/ACM International Conference on Computer-Aided
    Design (ICCAD)*.   IEEE, 2010, pp. 675–679.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (5) L. Xiao *等*，“模拟电路设计的实用布置和布线技术，”发表于*2010年IEEE/ACM计算机辅助设计国际会议（ICCAD）*。 IEEE，2010，第675–679页。
- en: (6) B. Xu *et al.*, “Hierarchical and analytical placement techniques for high-performance
    analog circuits,” in *Proceedings of the 2017 ACM on International Symposium on
    Physical Design*, 2017, pp. 55–62.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (6) B. Xu *等*，“高性能模拟电路的分层和分析布置技术，”发表于*2017年ACM国际物理设计研讨会论文集*，2017，第55–62页。
- en: (7) B. Basaran *et al.*, “Latchup-aware placement and parasitic-bounded routing
    of custom analog cells,” in *Proceedings of 1993 International Conference on Computer
    Aided Design (ICCAD)*.   IEEE, 1993, pp. 415–421.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (7) B. Basaran *等*，“针对自定义模拟单元的锁存感知布置和寄生电容限制布线，”发表于*1993年计算机辅助设计国际会议论文集（ICCAD）*。
    IEEE，1993，第415–421页。
- en: (8) H.-C. Ou *et al.*, “Simultaneous analog placement and routing with current
    flow and current density considerations,” in *Proceedings of the 50th Annual Design
    Automation Conference*, 2013, pp. 1–6.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (8) H.-C. Ou *等*，“考虑电流流动和电流密度的模拟布置与布线，”发表于*第50届年度设计自动化会议论文集*，2013，第1–6页。
- en: (9) R. Martins *et al.*, “Current-flow and current-density-aware multi-objective
    optimization of analog ic placement,” *Integration*, vol. 55, pp. 295–306, 2016.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (9) R. Martins *等*，“电流流动和电流密度感知的模拟IC布置多目标优化，”*集成*，第55卷，第295–306页，2016年。
- en: (10) B. Xu *et al.*, “Device layer-aware analytical placement for analog circuits,”
    in *Proceedings of the 2019 International Symposium on Physical Design*, 2019,
    pp. 19–26.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (10) B. Xu *等*，“面向模拟电路的器件层感知分析布置，”发表于*2019年国际物理设计研讨会论文集*，2019，第19–26页。
- en: (11) K.-H. Ho *et al.*, “Coupling-aware length-ratio-matching routing for capacitor
    arrays in analog integrated circuits,” in *Proceedings of the 50th Annual Design
    Automation Conference*, 2013, pp. 1–6.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (11) K.-H. Ho *等*，“电容阵列中的耦合感知长度比匹配布线，”发表于*第50届年度设计自动化会议论文集*，2013，第1–6页。
- en: (12) Y. Li *et al.*, “Exploring a machine learning approach to performance driven
    analog ic placement,” in *2020 IEEE computer society annual symposium on VLSI
    (ISVLSI)*.   IEEE, 2020, pp. 24–29.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (12) Y. Li *等*，“探索一种基于机器学习的性能驱动模拟IC放置方法，”载于 *2020年IEEE计算机学会VLSI年会（ISVLSI）*。   IEEE,
    2020年，第24–29页。
- en: (13) Y. Li *et al.*, “A customized graph neural network model for guiding analog
    ic placement,” in *Proceedings of the 39th International Conference on Computer-Aided
    Design*, 2020, pp. 1–9.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (13) Y. Li *等*，“用于指导模拟IC放置的定制图神经网络模型，”载于 *第39届国际计算机辅助设计会议论文集*，2020年，第1–9页。
- en: (14) A. Gusmão *et al.*, “Semi-supervised artificial neural networks towards
    analog ic placement recommender,” in *2020 IEEE International Symposium on Circuits
    and Systems (ISCAS)*.   IEEE, 2020, pp. 1–5.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (14) A. Gusmão *等*，“半监督人工神经网络在模拟IC放置推荐中的应用，”载于 *2020年IEEE国际电路与系统研讨会（ISCAS）*。   IEEE,
    2020年，第1–5页。
- en: '(15) K. Kunal *et al.*, “ALIGN: Open-Source Analog Layout Automation from the
    Ground Up,” in *Proceedings of the 56th Annual Design Automation Conference 2019*.   Las
    Vegas NV USA: ACM, Jun. 2019, pp. 1–4.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '(15) K. Kunal *等*，“ALIGN: 从基础开始的开源模拟布局自动化，”载于 *第56届年设计自动化会议论文集 2019*。   拉斯维加斯
    NV USA: ACM, 2019年6月，第1–4页。'
- en: '(16) T. Dhar *et al.*, “ALIGN: A System for Automating Analog Layout,” *IEEE
    Design & Test*, vol. 38, pp. 8–18, Apr. 2021.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '(16) T. Dhar *等*，“ALIGN: 一种自动化模拟布局的系统，” *IEEE设计与测试*，第38卷，第8–18页，2021年4月。'
- en: '(17) S. S. Sapatnekar, “The ALIGN Automated Analog Layout Engine: Progress,
    Learnings, and Open Issues,” in *Proceedings of the 2023 International Symposium
    on Physical Design*.   Virtual Event USA: ACM, Mar. 2023, pp. 101–102.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '(17) S. S. Sapatnekar，“ALIGN自动化模拟布局引擎：进展、经验教训与开放问题，”载于 *2023年国际物理设计研讨会论文集*。   虚拟活动
    USA: ACM, 2023年3月，第101–102页。'
- en: '(18) B. Xu *et al.*, “MAGICAL: Toward Fully Automated Analog IC Layout Leveraging
    Human and Machine Intelligence: Invited Paper,” in *2019 IEEE/ACM International
    Conference on Computer-Aided Design (ICCAD)*.   Westminster, CO, USA: IEEE, Nov.
    2019, pp. 1–8.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '(18) B. Xu *等*，“MAGICAL: 利用人类和机器智能迈向完全自动化的模拟IC布局: 邀请论文，”载于 *2019年IEEE/ACM计算机辅助设计国际会议（ICCAD）*。   威斯敏斯特,
    CO, USA: IEEE, 2019年11月，第1–8页。'
- en: '(19) H. Chen *et al.*, “MAGICAL: An Open- Source Fully Automated Analog IC
    Layout System from Netlist to GDSII,” *IEEE Design & Test*, vol. 38, pp. 19–26,
    2021.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '(19) H. Chen *等*，“MAGICAL: 从网表到GDSII的开源完全自动化模拟IC布局系统，” *IEEE设计与测试*，第38卷，第19–26页，2021年。'
- en: '(20) H. Chen *et al.*, “MAGICAL 1.0: An Open-Source Fully-Automated AMS Layout
    Synthesis Framework Verified With a 40-nm 1GS/s ${\Delta\Sigma}$ ADC,” in *2021
    IEEE Custom Integrated Circuits Conference (CICC)*.   Austin, TX, USA: IEEE, Apr.
    2021, pp. 1–2.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '(20) H. Chen *等*，“MAGICAL 1.0: 一种开源完全自动化的AMS布局综合框架，经过40纳米1GS/s ${\Delta\Sigma}$
    ADC验证，”载于 *2021年IEEE定制集成电路会议（CICC）*。   奥斯汀, TX, USA: IEEE, 2021年4月，第1–2页。'
- en: (21) X. Gao *et al.*, “Interactive analog layout editing with instant placement
    legalization,” in *2021 58th ACM/IEEE Design Automation Conference (DAC)*, 2021,
    pp. 1249–1254.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (21) X. Gao *等*，“具有即时放置合法化的互动模拟布局编辑，”载于 *2021年第58届ACM/IEEE设计自动化会议（DAC）*，2021年，第1249–1254页。
- en: (22) X. Gao *et al.*, “Interactive Analog Layout Editing With Instant Placement
    and Routing Legalization,” *IEEE Transactions on Computer-Aided Design of Integrated
    Circuits and Systems*, vol. 42, pp. 698–711, Mar. 2023.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (22) X. Gao *等*，“具有即时放置和布线合法化的互动模拟布局编辑，” *IEEE集成电路与系统计算机辅助设计汇刊*，第42卷，第698–711页，2023年3月。
- en: '(23) T. B. Brown *et al.*, “Language models are few-shot learners,” in *Proceedings
    of the 34th International Conference on Neural Information Processing Systems*,
    ser. NIPS ’20.   Red Hook, NY, USA: Curran Associates Inc., 2020.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '(23) T. B. Brown *等*，“语言模型是少样本学习者，”载于 *第34届国际神经信息处理系统会议论文集*，系列 NIPS ’20。   红钩，NY,
    USA: Curran Associates Inc., 2020年。'
- en: '(24) H. Touvron *et al.*, “Llama: Open and efficient foundation language models,”
    [https://arxiv.org/abs/2302.13971](https://arxiv.org/abs/2302.13971), 2023.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '(24) H. Touvron *等*，“Llama: 开放且高效的基础语言模型，” [https://arxiv.org/abs/2302.13971](https://arxiv.org/abs/2302.13971)，2023年。'
- en: '(25) H. Touvron *et al.*, “Llama 2: Open foundation and fine-tuned chat models,”
    [https://arxiv.org/abs/2307.09288](https://arxiv.org/abs/2307.09288), 2023.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '(25) H. Touvron *等*，“Llama 2: 开放基础和微调聊天模型，” [https://arxiv.org/abs/2307.09288](https://arxiv.org/abs/2307.09288)，2023年。'
- en: (26) OpenAI *et al.*, “GPT-4 Technical Report,” Mar. 2024, arXiv:2303.08774
    [cs].
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (26) OpenAI *等*，“GPT-4技术报告，”2024年3月，arXiv:2303.08774 [cs]。
- en: '(27) Anthropic, “Claude 2,” [https://www.anthropic.com/news/claude-2](https://www.anthropic.com/news/claude-2),
    2023, accessed: 2023-04-10.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '(27) Anthropic，“Claude 2，” [https://www.anthropic.com/news/claude-2](https://www.anthropic.com/news/claude-2)，2023年，访问时间:
    2023年4月10日。'
- en: '(28) Anthropic, “Introducing the next generation of claude,” [https://www.anthropic.com/news/claude-3-family](https://www.anthropic.com/news/claude-3-family),
    2024, accessed: 2023-04-10.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (28) Anthropic，“介绍下一代 Claude”，[https://www.anthropic.com/news/claude-3-family](https://www.anthropic.com/news/claude-3-family)，2024年，访问日期：2023年4月10日。
- en: (29) P. Lewis *et al.*, “Retrieval-Augmented Generation for Knowledge-Intensive
    NLP Tasks.”
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (29) P. Lewis *等人*，“检索增强生成用于知识密集型 NLP 任务。”
- en: '(30) Q. Wu *et al.*, “AutoGen: Enabling Next-Gen LLM Applications via Multi-Agent
    Conversation,” Oct. 2023, arXiv:2308.08155 [cs].'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (30) Q. Wu *等人*，“AutoGen：通过多智能体对话实现下一代 LLM 应用”，2023年10月，arXiv:2308.08155 [cs]。
- en: '(31) S. Rasal, “LLM Harmony: Multi-Agent Communication for Problem Solving,”
    Jan. 2024, arXiv:2401.01312 [cs].'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (31) S. Rasal，“LLM Harmony：多智能体通信以解决问题”，2024年1月，arXiv:2401.01312 [cs]。
- en: '(32) S. Hong *et al.*, “MetaGPT: Meta Programming for A Multi-Agent Collaborative
    Framework,” Nov. 2023, arXiv:2308.00352 [cs].'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (32) S. Hong *等人*，“MetaGPT：多智能体协作框架的元编程”，2023年11月，arXiv:2308.00352 [cs]。
- en: '(33) S. Liu *et al.*, “RTLCoder: Outperforming GPT-3.5 in Design RTL Generation
    with Our Open-Source Dataset and Lightweight Solution,” Feb. 2024, arXiv:2312.08617
    [cs].'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (33) S. Liu *等人*，“RTLCoder：通过我们的开源数据集和轻量级解决方案超越 GPT-3.5 进行设计 RTL 生成”，2024年2月，arXiv:2312.08617
    [cs]。
- en: '(34) S. Thakur *et al.*, “VeriGen: A Large Language Model for Verilog Code
    Generation,” *ACM Transactions on Design Automation of Electronic Systems*, Feb.
    2024, just Accepted.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (34) S. Thakur *等人*，“VeriGen：用于 Verilog 代码生成的大型语言模型”，*ACM 电子系统设计自动化交易*，2024年2月，刚刚接受。
- en: '(35) Y. Lu *et al.*, “RTLLM: An Open-Source Benchmark for Design RTL Generation
    with Large Language Model,” Nov. 2023, arXiv:2308.05345 [cs].'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (35) Y. Lu *等人*，“RTLLM：一个用于设计 RTL 生成的开源基准测试”，2023年11月，arXiv:2308.05345 [cs]。
- en: '(36) M. Liu *et al.*, “Invited Paper: VerilogEval: Evaluating Large Language
    Models for Verilog Code Generation,” in *2023 IEEE/ACM International Conference
    on Computer Aided Design (ICCAD)*.   San Francisco, CA, USA: IEEE, Oct. 2023,
    pp. 1–8.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (36) M. Liu *等人*，“邀请论文：VerilogEval：评估用于 Verilog 代码生成的大型语言模型”，发表于 *2023 IEEE/ACM
    国际计算机辅助设计会议 (ICCAD)*。 美国加州旧金山：IEEE，2023年10月，第1–8页。
- en: '(37) Y.-D. Tsai *et al.*, “RTLFixer: Automatically Fixing RTL Syntax Errors
    with Large Language Models,” Feb. 2024, arXiv:2311.16543 [cs].'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (37) Y.-D. Tsai *等人*，“RTLFixer：利用大型语言模型自动修复 RTL 语法错误”，2024年2月，arXiv:2311.16543
    [cs]。
- en: '(38) M. Liu *et al.*, “ChipNeMo: Domain-Adapted LLMs for Chip Design,” Apr.
    2024, arXiv:2311.00176 [cs].'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (38) M. Liu *等人*，“ChipNeMo：用于芯片设计的领域适应型 LLMs”，2024年4月，arXiv:2311.00176 [cs]。
- en: '(39) Z. He *et al.*, “ChatEDA: A Large Language Model Powered Autonomous Agent
    for EDA,” Mar. 2024, arXiv:2308.10204 [cs].'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (39) Z. He *等人*，“ChatEDA：一个由大型语言模型驱动的自主管理 EDA 工具”，2024年3月，arXiv:2308.10204 [cs]。
- en: '(40) Z. Wang *et al.*, “Chatpattern: Layout pattern customization via natural
    language,” [https://arxiv.org/abs/2403.15434](https://arxiv.org/abs/2403.15434),
    2024.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (40) Z. Wang *等人*，“Chatpattern：通过自然语言进行布局模式定制”，[https://arxiv.org/abs/2403.15434](https://arxiv.org/abs/2403.15434)，2024年。
- en: '(41) P. Sahoo *et al.*, “A systematic survey of prompt engineering in large
    language models: Techniques and applications,” *arXiv preprint arXiv:2402.07927*,
    2024.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (41) P. Sahoo *等人*，“关于大型语言模型的提示工程的系统性调查：技术与应用”，*arXiv 预印本 arXiv:2402.07927*，2024年。
- en: (42) T. Brown *et al.*, “Language models are few-shot learners,” *Advances in
    neural information processing systems*, vol. 33, pp. 1877–1901, 2020.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (42) T. Brown *等人*，“语言模型是少样本学习者”，*神经信息处理系统进展*，第33卷，第1877–1901页，2020年。
- en: (43) J. Wei *et al.*, “Chain-of-thought prompting elicits reasoning in large
    language models,” *Advances in neural information processing systems*, vol. 35,
    pp. 24 824–24 837, 2022.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (43) J. Wei *等人*，“链式思维提示激发大型语言模型的推理”，*神经信息处理系统进展*，第35卷，第24 824–24 837页，2022年。
- en: (44) D. Zhou *et al.*, “Least-to-most prompting enables complex reasoning in
    large language models,” *arXiv preprint arXiv:2205.10625*, 2022.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (44) D. Zhou *等人*，“最小到最大提示使大型语言模型能够进行复杂推理”，*arXiv 预印本 arXiv:2205.10625*，2022年。
- en: '(45) A. Madaan *et al.*, “Self-refine: Iterative refinement with self-feedback,”
    *Advances in Neural Information Processing Systems*, vol. 36, 2024.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (45) A. Madaan *等人*，“Self-refine：带有自我反馈的迭代细化”，*神经信息处理系统进展*，第36卷，2024年。
- en: (46) P. Lewis *et al.*, “Retrieval-augmented generation for knowledge-intensive
    nlp tasks,” *Advances in Neural Information Processing Systems*, vol. 33, pp.
    9459–9474, 2020.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (46) P. Lewis *等人*，“检索增强生成用于知识密集型 NLP 任务”，*神经信息处理系统进展*，第33卷，第9459–9474页，2020年。
- en: '(47) C. Zhang *et al.*, “Proagent: building proactive cooperative agents with
    large language models,” in *Proceedings of the AAAI Conference on Artificial Intelligence*,
    vol. 38, no. 16, 2024, pp. 17 591–17 599.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (47) C. Zhang *等人*，“Proagent：利用大语言模型构建主动合作代理，” 收录于 *AAAI 人工智能会议论文集*，第38卷，第16期，2024年，页码
    17 591–17 599。
- en: '(48) Z. Xi *et al.*, “The rise and potential of large language model based
    agents: A survey,” *arXiv preprint arXiv:2309.07864*, 2023.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (48) Z. Xi *等人*，“基于大语言模型的代理的兴起与潜力：一项调查，” *arXiv 预印本 arXiv:2309.07864*，2023年。
- en: '(49) G. Li *et al.*, “Camel: Communicative agents for” mind” exploration of
    large scale language model society,” 2023.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (49) G. Li *等人*，“Camel：用于‘心智’探索的大规模语言模型社会的沟通代理，” 2023年。
- en: '(50) Y. Talebirad and A. Nadiri, “Multi-agent collaboration: Harnessing the
    power of intelligent llm agents,” *arXiv preprint arXiv:2306.03314*, 2023.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (50) Y. Talebirad 和 A. Nadiri, “多智能体协作：利用智能大语言模型代理的力量，” *arXiv 预印本 arXiv:2306.03314*，2023年。
- en: '(51) S. Rasal, “Llm harmony: Multi-agent communication for problem solving,”
    *arXiv preprint arXiv:2401.01312*, 2024.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (51) S. Rasal, “大语言模型的和谐：解决问题的多智能体通信，” *arXiv 预印本 arXiv:2401.01312*，2024年。
- en: '(52) Q. Wu *et al.*, “Autogen: Enabling next-gen llm applications via multi-agent
    conversation framework,” *arXiv preprint arXiv:2308.08155*, 2023.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (52) Q. Wu *等人*，“Autogen：通过多智能体对话框架实现下一代大语言模型应用，” *arXiv 预印本 arXiv:2308.08155*，2023年。
- en: '(53) W. Chen *et al.*, “Agentverse: Facilitating multi-agent collaboration
    and exploring emergent behaviors in agents,” *arXiv preprint arXiv:2308.10848*,
    2023.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (53) W. Chen *等人*，“Agentverse：促进多智能体协作并探索代理中的新兴行为，” *arXiv 预印本 arXiv:2308.10848*，2023年。
- en: '(54) S. Hong *et al.*, “Metagpt: Meta programming for multi-agent collaborative
    framework,” *arXiv preprint arXiv:2308.00352*, 2023.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (54) S. Hong *等人*，“Metagpt：用于多智能体协作框架的元编程，” *arXiv 预印本 arXiv:2308.00352*，2023年。
