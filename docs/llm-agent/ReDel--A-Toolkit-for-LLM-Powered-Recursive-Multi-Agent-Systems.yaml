- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-09-08 18:39:53'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-09-08 18:39:53
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'ReDel: A Toolkit for LLM-Powered Recursive Multi-Agent Systems'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ReDel：一个用于LLM驱动递归多智能体系统的工具包
- en: 来源：[https://ar5iv.labs.arxiv.org/html/2408.02248](https://ar5iv.labs.arxiv.org/html/2408.02248)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://ar5iv.labs.arxiv.org/html/2408.02248](https://ar5iv.labs.arxiv.org/html/2408.02248)
- en: Andrew Zhu,  Liam Dugan,  Chris Callison-Burch
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Andrew Zhu,  Liam Dugan,  Chris Callison-Burch
- en: University of Pennsylvania
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 宾夕法尼亚大学
- en: '{andrz,ldugan,ccb}@seas.upenn.edu'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '{andrz,ldugan,ccb}@seas.upenn.edu'
- en: Abstract
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Recently, there has been increasing interest in using Large Language Models
    (LLMs) to construct complex multi-agent systems to perform tasks such as compiling
    literature reviews, drafting consumer reports, and planning vacations. Many tools
    and libraries exist for helping create such systems, however none support recursive
    multi-agent systems—where the models themselves flexibly decide when to delegate
    tasks and how to organize their delegation structure. In this work, we introduce
    ReDel: a toolkit for recursive multi-agent systems that supports custom tool-use,
    delegation schemes, event-based logging, and interactive replay in an easy-to-use
    web interface. We show that, using ReDel, we are able to achieve significant performance
    gains on agentic benchmarks and easily identify potential areas of improvements
    through the visualization and debugging tools. Our code, documentation, and PyPI
    package are open-source¹¹1ReDel’s source code is available at [https://github.com/zhudotexe/redel](https://github.com/zhudotexe/redel).
    and free to use under the MIT license.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，越来越多的人对使用大型语言模型（LLMs）构建复杂的多智能体系统以执行任务（例如编写文献综述、草拟消费者报告和规划假期）产生了兴趣。虽然有许多工具和库可以帮助创建这些系统，但没有一个支持递归多智能体系统——在这些系统中，模型本身灵活地决定何时委派任务以及如何组织其委派结构。在这项工作中，我们介绍了ReDel：一个支持自定义工具使用、委派方案、基于事件的日志记录和交互式回放的递归多智能体系统工具包，并提供了易于使用的网页界面。我们展示了，通过使用ReDel，我们能够在智能体基准测试中取得显著的性能提升，并通过可视化和调试工具轻松识别潜在的改进领域。我们的代码、文档和PyPI包都是开源的¹¹1ReDel的源代码可以在[https://github.com/zhudotexe/redel](https://github.com/zhudotexe/redel)找到，并且根据MIT许可证免费使用。
- en: 'ReDel: A Toolkit for LLM-Powered Recursive Multi-Agent Systems'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: ReDel：一个用于LLM驱动递归多智能体系统的工具包
- en: Andrew Zhu,  Liam Dugan,  Chris Callison-Burch University of Pennsylvania {andrz,ldugan,ccb}@seas.upenn.edu
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Andrew Zhu,  Liam Dugan,  Chris Callison-Burch 宾夕法尼亚大学 {andrz,ldugan,ccb}@seas.upenn.edu
- en: 1 Introduction
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1 引言
- en: A multi-agent system uses multiple large language models (LLMs) together to
    accomplish complex tasks or answer complex questions beyond the capabilities of
    a single LLM. Often, in such scenarios, each LLM is provided with tools Parisi
    et al. ([2022](#bib.bib8)); Schick et al. ([2023](#bib.bib11)) that it can use
    to give it additional capabilities, like searching the internet for real-time
    data or interacting with a web browser. In most cases, these systems are defined
    manually, with a human responsible for defining a static problem-decomposition
    graph and defining an agent to handle each subproblem in the graph (Hong et al.,
    [2024](#bib.bib2); Wu et al., [2023](#bib.bib13); Zhang et al., [2024](#bib.bib15);
    Qiao et al., [2024](#bib.bib10), inter alia).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 多智能体系统利用多个大型语言模型（LLMs）协同工作，以完成单个LLM能力无法胜任的复杂任务或回答复杂问题。在这种情况下，通常每个LLM会被提供Parisi等人（[2022](#bib.bib8)）；Schick等人（[2023](#bib.bib11)）提供的工具，以赋予其额外的功能，例如实时数据的互联网搜索或与网页浏览器的互动。在大多数情况下，这些系统是手动定义的，由人工负责定义静态问题分解图，并为图中的每个子问题定义一个代理（Hong等人，[2024](#bib.bib2)；Wu等人，[2023](#bib.bib13)；Zhang等人，[2024](#bib.bib15)；Qiao等人，[2024](#bib.bib10)等）。
- en: 'In a recursive multi-agent system, rather than a human defining the layout
    of multiple agents, a single root agent is given a tool to spawn additional agents.
    When faced with a complex task, the root agent can decompose the task into smaller
    subtasks, then delegate those tasks to newly-created sub-agents. Each sub-agent
    can then either complete the task if it is small enough, or recursively decompose
    and delegate the task further²²2This is where the toolkit’s name, ReDel, comes
    from: it’s short for Recursive Delegation. Khot et al. ([2023](#bib.bib3)); Lee
    and Kim ([2023](#bib.bib4)); Prasad et al. ([2024](#bib.bib9)).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在递归多智能体系统中，不是由人工定义多个智能体的布局，而是给一个根智能体一个工具，以生成额外的智能体。当面对复杂任务时，根智能体可以将任务分解成较小的子任务，然后将这些任务委派给新创建的子智能体。每个子智能体可以在任务足够小时完成任务，或者递归地分解并进一步委派任务²²2这就是工具包名字“ReDel”的来源：它是递归委派（Recursive
    Delegation）的缩写。Khot等人（[2023](#bib.bib3)）；Lee和Kim（[2023](#bib.bib4)）；Prasad等人（[2024](#bib.bib9)）。
- en: In the current landscape of multi-agent systems, the majority of tooling focuses
    on human-defined static systems, and poorly handles dynamic systems where agents
    are added to a computation graph at runtime. Furthermore, much of this tooling
    is unsuitable for academic purposes Zhu et al. ([2023](#bib.bib17)) or hidden
    behind paywalls and proprietary licenses.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前的多代理系统领域，大多数工具专注于人定义的静态系统，对于在运行时向计算图中添加代理的动态系统处理较差。此外，这些工具大多数不适合学术用途 Zhu
    等人 ([2023](#bib.bib17)) 或隐藏在付费墙和专有许可证后面。
- en: '![Refer to caption](img/8fda3c1fac2dd07d8d498621d0ddfc58.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/8fda3c1fac2dd07d8d498621d0ddfc58.png)'
- en: 'Figure 1: ReDel allows developers to create systems of recursive agents, inspect
    each agent’s state, and visualize a system’s delegation graph (right). Recursive
    agents can be used to solve complex tasks, such as planning a trip to Japan (left).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：ReDel 允许开发者创建递归代理系统，检查每个代理的状态，并可视化系统的委托图（右）。递归代理可用于解决复杂任务，例如规划前往日本的旅行（左）。
- en: 'In this paper, we present ReDel, a fully-featured open-source toolkit for recursive
    multi-agent systems. ReDel makes it easy to experiment by providing a modular
    interface for creating tools, different delegation methods, and logs for later
    analysis. This granular logging and a central event-driven system makes it easy
    to listen for signals from anywhere in a system, and every event is automatically
    logged for post-hoc data analysis. ReDel also features a web interface that allows
    users to interact with a configured system directly and view replays of saved
    runs, making it easy for researchers and developers to build, iterate on, and
    analyze recursive multi-agent systems. In Section [4](#S4 "4 Evaluation & Case
    Study ‣ ReDel: A Toolkit for LLM-Powered Recursive Multi-Agent Systems") we use
    ReDel to run recursive multi-agent systems on three diverse agentic benchmarks,
    and in Section [5](#S5 "5 Using ReDel for Error Analysis ‣ ReDel: A Toolkit for
    LLM-Powered Recursive Multi-Agent Systems") we demonstrate how the toolkit can
    be used to explore complex behaviours of these systems.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '在本文中，我们介绍了 ReDel，一个功能全面的开源工具包，用于递归多代理系统。ReDel 通过提供一个模块化的接口，创建工具、不同的委托方法和日志以供后续分析，使实验变得更加容易。这种细粒度的日志记录和中央事件驱动系统使得监听系统中的任何信号变得简单，每个事件都会自动记录以便事后数据分析。ReDel
    还具有一个 Web 界面，允许用户直接与配置的系统进行交互，并查看保存运行的回放，使研究人员和开发者能够轻松构建、迭代和分析递归多代理系统。在第 [4](#S4
    "4 评估与案例研究 ‣ ReDel: 一个用于 LLM 驱动的递归多代理系统的工具包") 节中，我们使用 ReDel 在三个不同的代理基准上运行递归多代理系统，而在第
    [5](#S5 "5 使用 ReDel 进行错误分析 ‣ ReDel: 一个用于 LLM 驱动的递归多代理系统的工具包") 节中，我们展示了如何使用该工具包探索这些系统的复杂行为。'
- en: 2 Related Work
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2 相关工作
- en: Recursive Multi-Agent Systems.
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 递归多代理系统。
- en: Recent work on recursive multi-agent systems has been done by Lee and Kim ([2023](#bib.bib4)),
    Khot et al. ([2023](#bib.bib3)), and Prasad et al. ([2024](#bib.bib9)). These
    works introduce the method of fine-tuning or few-shot prompting LLMs to decompose
    complex tasks and using sub-agents to solve each part (often called recursive
    or hierarchical decomposition). They show that as tasks grow more complex, recursive
    multi-agent systems’ performance pulls away from single-agent systems. ReDel builds
    upon the methods introduced in these works by taking advantage of modern models’
    native tool use capability Schick et al. ([2023](#bib.bib11)) to decompose and
    delegate tasks zero-shot (i.e., without human-written examples in prompt) instead
    of using few-shot prompting or fine-tuning. As a framework, we provide an extensible
    interface to apply these approaches to additional tasks and domains.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 近期有关递归多代理系统的研究由 Lee 和 Kim ([2023](#bib.bib4))、Khot 等人 ([2023](#bib.bib3)) 和
    Prasad 等人 ([2024](#bib.bib9)) 完成。这些研究介绍了微调或少量示例提示大模型（LLMs）以分解复杂任务的方法，并使用子代理解决每个部分（通常称为递归或分层分解）。他们展示了随着任务变得越来越复杂，递归多代理系统的表现会远超单一代理系统。ReDel
    在这些研究的方法基础上构建，通过利用现代模型的原生工具使用能力 Schick 等人 ([2023](#bib.bib11)) 来实现零-shot 的任务分解和委托（即，无需人工编写的示例提示），而不是使用少量示例提示或微调。作为一个框架，我们提供了一个可扩展的接口，将这些方法应用于其他任务和领域。
- en: Multi-Agent System Frameworks.
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 多代理系统框架。
- en: 'Although there are other LLM-powered multi-agent system frameworks, each have
    various weaknesses that make them poorly suited for recursive systems and/or academic
    purposes. In Table [1](#S2.T1 "Table 1 ‣ Multi-Agent System Frameworks. ‣ 2 Related
    Work ‣ ReDel: A Toolkit for LLM-Powered Recursive Multi-Agent Systems"), we compare
    LangGraph Campos et al. ([2023](#bib.bib1)), LlamaIndex Liu et al. ([2022](#bib.bib5)),
    MetaGPT Hong et al. ([2024](#bib.bib2)), and AutoGPT Significant Gravitas ([2023](#bib.bib12))
    to ReDel, our system. Most are built around static multi-agent systems, with only
    AutoGPT supporting a single level of delegation. Only LangGraph and LlamaIndex
    allow agents to run in parallel asynchronously, whereas MetaGPT and AutoGPT run
    one agent at a time in a synchronous fashion. To log events deep within the system,
    only LlamaIndex provides a rigorous instrumentation suite to developers that allows
    them to emit events at any point while a system is running. Most do not allow
    developers to replay a system run from a log, with only LangGraph allowing replays
    by taking snapshots of each state of the system. Most do not provide a visualization
    interface, with only AutoGPT providing a simple chat-based UI. Unless one subscribes
    to a paid service, LangGraph’s replays cannot be viewed visually, and are instead
    presented as the raw data of each state. Finally, only AutoGPT and MetaGPT are
    fully open-source, with LangGraph and LlamaIndex utilizing proprietary code to
    offer more “premium” features beyond what their open-source libraries offer.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管还有其他基于LLM的多代理系统框架，但它们各自都有各种缺陷，使得它们不适合递归系统和/或学术用途。在表[1](#S2.T1 "表1 ‣ 多代理系统框架
    ‣ 2 相关工作 ‣ ReDel：LLM驱动的递归多代理系统工具包")中，我们对比了LangGraph Campos等人（[2023](#bib.bib1)）、LlamaIndex
    Liu等人（[2022](#bib.bib5)）、MetaGPT Hong等人（[2024](#bib.bib2)）和AutoGPT Significant
    Gravitas（[2023](#bib.bib12)）与我们的系统ReDel。大多数系统围绕静态多代理系统构建，只有AutoGPT支持单层委派。只有LangGraph和LlamaIndex允许代理并行异步运行，而MetaGPT和AutoGPT以同步方式逐个运行代理。为了记录系统内部深层事件，只有LlamaIndex为开发者提供了严格的仪表化工具包，允许他们在系统运行时的任何点发出事件。大多数系统不允许开发者从日志中重放系统运行，只有LangGraph通过拍摄系统每个状态的快照来允许重放。大多数系统不提供可视化接口，只有AutoGPT提供了一个简单的基于聊天的UI。除非订阅付费服务，否则LangGraph的重放不能以可视化形式查看，而是以每个状态的原始数据呈现。最后，只有AutoGPT和MetaGPT是完全开源的，而LangGraph和LlamaIndex则利用专有代码提供更多“高级”功能，超出其开源库所提供的功能。
- en: In comparison, ReDel allows developers to customize their agents’ delegation
    strategies and build multi-level dynamic systems while providing all of these
    features out of the box and remaining fully free and open source. It is the only
    such toolkit to provide first-class support for recursive multi-agent systems
    with best-in-class support for system visualization and modern LLMs with tool
    usage.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，ReDel允许开发者自定义代理的委派策略并构建多层动态系统，同时提供所有这些功能，并保持完全免费和开源。它是唯一一个为递归多代理系统提供一流支持的工具包，并且在系统可视化和现代LLM工具使用方面提供最佳支持。
- en: '|  |  ReDel  |  LangGraph  |  LlamaIndex  |  MetaGPT  |  AutoGPT  |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '|  |  ReDel  |  LangGraph  |  LlamaIndex  |  MetaGPT  |  AutoGPT  |'
- en: '| Dynamic Systems | \scalerel*![[Uncaptioned image]](img/d7a98974e392fa1f1d87183ec77eada6.png)○
    | \scalerel*![[Uncaptioned image]](img/5fd8de3e58d0f43fd3d197cf83f28567.png)○
    | \scalerel*![[Uncaptioned image]](img/e8151e97b3c3fd226a61416e462a526b.png)○
    | \scalerel*![[Uncaptioned image]](img/cc53aeb4cadaf7acca7db692e45f96a7.png)○
    | \scalerel*![[Uncaptioned image]](img/97b0b1bb70bbd764894306de73ad84c9.png)○
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 动态系统 | \scalerel*![[未标注的图片]](img/d7a98974e392fa1f1d87183ec77eada6.png)○ |
    \scalerel*![[未标注的图片]](img/5fd8de3e58d0f43fd3d197cf83f28567.png)○ | \scalerel*![[未标注的图片]](img/e8151e97b3c3fd226a61416e462a526b.png)○
    | \scalerel*![[未标注的图片]](img/cc53aeb4cadaf7acca7db692e45f96a7.png)○ | \scalerel*![[未标注的图片]](img/97b0b1bb70bbd764894306de73ad84c9.png)○
    |'
- en: '| Parallel Agents | \scalerel*![[Uncaptioned image]](img/f4cd8503233e769d48a33c69b7a6d3ef.png)○
    | \scalerel*![[Uncaptioned image]](img/f32eb7efdd6739b53f0484ffcf033362.png)○
    | \scalerel*![[Uncaptioned image]](img/7f44422128e4c3228117aea01319c25f.png)○
    | \scalerel*![[Uncaptioned image]](img/32fa125fb0cec22a7c297e4bb31c00e1.png)○
    | \scalerel*![[Uncaptioned image]](img/946f4b6696e9dface9cf0beea25aa825.png)○
    |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 并行代理 | \scalerel*![[未标注的图片]](img/f4cd8503233e769d48a33c69b7a6d3ef.png)○ |
    \scalerel*![[未标注的图片]](img/f32eb7efdd6739b53f0484ffcf033362.png)○ | \scalerel*![[未标注的图片]](img/7f44422128e4c3228117aea01319c25f.png)○
    | \scalerel*![[未标注的图片]](img/32fa125fb0cec22a7c297e4bb31c00e1.png)○ | \scalerel*![[未标注的图片]](img/946f4b6696e9dface9cf0beea25aa825.png)○
    |'
- en: '| Event-Driven | \scalerel*![[Uncaptioned image]](img/acc687cd06f20e90f57da24299a614ac.png)○
    | \scalerel*![[Uncaptioned image]](img/27422094c284abfe1a8a11ceda969b00.png)○
    | \scalerel*![[Uncaptioned image]](img/70f4a3a35d505475655e6ae5e9f600ec.png)○
    | \scalerel*![[Uncaptioned image]](img/7da62b1a27dc560b9aab3696d525b3d5.png)○
    | \scalerel*![[Uncaptioned image]](img/4b212f93c2a759a793d50a0831665edc.png)○
    |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 事件驱动 | \scalerel*![[未标注的图片]](img/acc687cd06f20e90f57da24299a614ac.png)○ |
    \scalerel*![[未标注的图片]](img/27422094c284abfe1a8a11ceda969b00.png)○ | \scalerel*![[未标注的图片]](img/70f4a3a35d505475655e6ae5e9f600ec.png)○
    | \scalerel*![[未标注的图片]](img/7da62b1a27dc560b9aab3696d525b3d5.png)○ | \scalerel*![[未标注的图片]](img/4b212f93c2a759a793d50a0831665edc.png)○
    |'
- en: '| Run Replay | \scalerel*![[Uncaptioned image]](img/74a0ba00b2bdb6a7a21ee9e8c705adae.png)○
    | \scalerel*![[Uncaptioned image]](img/3611d49bd88367e646a697beed83e6c1.png)○
    | \scalerel*![[Uncaptioned image]](img/7a24733d76c0ddd62812afe43a4eb44d.png)○
    | \scalerel*![[Uncaptioned image]](img/7683103db426eed0e40c7adc657b1122.png)○
    | \scalerel*![[Uncaptioned image]](img/a6e290ffa4e6f5d65b8c8cfa4d6a241e.png)○
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 运行重播 | \scalerel*![[未标注的图片]](img/74a0ba00b2bdb6a7a21ee9e8c705adae.png)○ |
    \scalerel*![[未标注的图片]](img/3611d49bd88367e646a697beed83e6c1.png)○ | \scalerel*![[未标注的图片]](img/7a24733d76c0ddd62812afe43a4eb44d.png)○
    | \scalerel*![[未标注的图片]](img/7683103db426eed0e40c7adc657b1122.png)○ | \scalerel*![[未标注的图片]](img/a6e290ffa4e6f5d65b8c8cfa4d6a241e.png)○
    |'
- en: '| Web Interface | \scalerel*![[Uncaptioned image]](img/ce9e2223f8752e76f8aacdabe8d33e3d.png)○
    | \scalerel*![[Uncaptioned image]](img/a48b13d672c5d0e840b4f2ac68e2e0aa.png)○
    | \scalerel*![[Uncaptioned image]](img/2b59f44436c212a175aee9be12fe2c5e.png)○
    | \scalerel*![[Uncaptioned image]](img/9e77cf51ccd2f3b1c9f1a7c56e590623.png)○
    | \scalerel*![[Uncaptioned image]](img/bbd1384b7a62e9c93f7d488628d9fade.png)○
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 网页界面 | \scalerel*![[未标注的图片]](img/ce9e2223f8752e76f8aacdabe8d33e3d.png)○ |
    \scalerel*![[未标注的图片]](img/a48b13d672c5d0e840b4f2ac68e2e0aa.png)○ | \scalerel*![[未标注的图片]](img/2b59f44436c212a175aee9be12fe2c5e.png)○
    | \scalerel*![[未标注的图片]](img/9e77cf51ccd2f3b1c9f1a7c56e590623.png)○ | \scalerel*![[未标注的图片]](img/bbd1384b7a62e9c93f7d488628d9fade.png)○
    |'
- en: '| Fully Open Source | \scalerel*![[Uncaptioned image]](img/8f5764a08b9480b6972aece02c7b7198.png)○
    | \scalerel*![[Uncaptioned image]](img/3985d287b586b2d8fa698b506c395221.png)○
    | \scalerel*![[Uncaptioned image]](img/57bda214e76ee18b44a425485033ace1.png)○
    | \scalerel*![[Uncaptioned image]](img/90ae8fc98faf11c83e013964c6e35d6f.png)○
    | \scalerel*![[Uncaptioned image]](img/31abdf3b3462a855142bbc398fd5c463.png)○
    |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 完全开源 | \scalerel*![[未标注的图片]](img/8f5764a08b9480b6972aece02c7b7198.png)○ |
    \scalerel*![[未标注的图片]](img/3985d287b586b2d8fa698b506c395221.png)○ | \scalerel*![[未标注的图片]](img/57bda214e76ee18b44a425485033ace1.png)○
    | \scalerel*![[未标注的图片]](img/90ae8fc98faf11c83e013964c6e35d6f.png)○ | \scalerel*![[未标注的图片]](img/31abdf3b3462a855142bbc398fd5c463.png)○
    |'
- en: 'Table 1: A feature comparison between ReDel and competing toolkits. ReDel is
    the only fully open-source toolkit that supports dynamic multi-agent systems with
    a rich event-driven base and web interface.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1：ReDel 与竞争工具包的功能比较。ReDel 是唯一一个完全开源的工具包，支持动态多代理系统，具有丰富的事件驱动基础和网页界面。
- en: 3 System Design
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3 系统设计
- en: 'ReDel consists of two main parts: a Python package to define recursive delegation
    systems, log events, and run experiments, and a web interface to quickly and interactively
    iterate on defined systems or analyze experiment logs. In the following sections,
    we discuss these components in more detail.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: ReDel 包括两个主要部分：一个 Python 包，用于定义递归委派系统、记录事件和运行实验；一个网页界面，用于快速和互动地迭代已定义的系统或分析实验日志。在接下来的部分中，我们将更详细地讨论这些组件。
- en: 3.1 Tool Usage
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.1 工具使用
- en: In ReDel, a “tool” is a group of functions, written in Python, that is exposed
    to an agent. The agent may generate requests to call appropriate functions from
    this tool, which interact with the environment (e.g. searching the Internet).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ReDel 中，“工具”是一个函数组，用 Python 编写，并对代理暴露。代理可以生成请求，调用该工具中的适当函数，这些函数与环境互动（例如，搜索互联网）。
- en: 'Developers can define tools in any Python file, and a tool’s methods can be
    implemented by any Python code. ReDel is implemented in pure Python, and method
    bodies will not be sent to an agent’s underlying language model, so there is no
    limit to a tool’s implementation complexity or length. Similarly, a tool can use
    functionality defined in any other external library, allowing developers to utilize
    existing application code. An example of a basic tool that provides a function
    for making HTTP requests is in Figure [2](#S3.F2 "Figure 2 ‣ 3.1 Tool Usage ‣
    3 System Design ‣ ReDel: A Toolkit for LLM-Powered Recursive Multi-Agent Systems").'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '开发者可以在任何 Python 文件中定义工具，工具的方法可以通过任何 Python 代码实现。ReDel 是用纯 Python 实现的，方法体不会发送到代理的底层语言模型，因此工具的实现复杂性或长度没有限制。同样，工具可以使用任何其他外部库中定义的功能，使开发者能够利用现有的应用代码。提供
    HTTP 请求功能的基本工具示例见图 [2](#S3.F2 "图 2 ‣ 3.1 工具使用 ‣ 3 系统设计 ‣ ReDel: 一个 LLM 驱动的递归多代理系统工具包")。'
- en: ReDel comes bundled with a web browsing tool and email tool as examples, and
    we encourage developers to implement domain-specific tools for their own purposes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: ReDel 附带了一个网页浏览工具和一个邮件工具作为示例，我们鼓励开发者实现特定领域的工具以满足自己的需求。
- en: 'class  MyHTTPTool(ToolBase):@ai_function()def  get(self,  url:  str):"""Get  the  contents  of  a  webpage,and  return  the  raw  HTML."""resp  =  requests.get(url)return  resp.text'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 'class  MyHTTPTool(ToolBase):@ai_function()def  get(self,  url:  str):"""获取网页内容并返回原始
    HTML。"""resp  =  requests.get(url)return  resp.text'
- en: 'Figure 2: An example of a simple ReDel tool that exposes an HTTP GET function
    to any agent equipped with the tool.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '图 2: 一个简单的 ReDel 工具示例，它向任何配备该工具的代理提供 HTTP GET 功能。'
- en: 3.2 Delegation Schemes
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.2 委派方案
- en: A delegation scheme is the strategy used by an agent to send tasks to sub-agents.
    In ReDel, delegation schemes are implemented as a special type of tool that an
    LLM agent (the “parent”) can call with task instructions as an argument. These
    instructions are sent to a new sub-agent (the “child”), which can either complete
    them if they are simple enough, or break them up into smaller parts and recursively
    delegate again.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 委派方案是代理用于将任务发送给子代理的策略。在 ReDel 中，委派方案被实现为一种特殊类型的工具，LLM 代理（“父代理”）可以通过任务指令作为参数调用这些工具。这些指令被发送给一个新的子代理（“子代理”），子代理可以完成这些任务（如果任务足够简单），或者将其拆分成更小的部分并递归地再次委派。
- en: 'Taking inspiration from common process management paradigms found in operating
    systems, ReDel comes with two delegation schemes:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 受操作系统中常见进程管理范式的启发，ReDel 提供了两种委派方案：
- en: •
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'DelegateOne: Block parent agent’s execution until child agent returns its result.'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'DelegateOne: 阻塞父代理的执行直到子代理返回其结果。'
- en: •
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'DelegateWait: Do not block parent agent’s execution. Instead, provide a separate
    function to retrieve the result of a particular child.'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'DelegateWait: 不阻塞父代理的执行。相反，提供一个单独的功能来检索特定子代理的结果。'
- en: The DelegateOne scheme is well-suited for LLMs with parallel function calling
    as it allows ReDel to let a group of spawned child agents run in parallel, and
    return their results once they all complete.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: DelegateOne 方案非常适合具有并行功能调用的 LLM，因为它允许 ReDel 让一组生成的子代理并行运行，并在它们全部完成后返回结果。
- en: In contrast, the DelegateWait scheme is well-suited for LLMs without parallel
    function calling, as it lets these models spawn multiple agents before deciding
    to wait on any one agent’s result. The drawback is that this runs the risk of
    creating zombie agents if the parent agent never retrieves the results of a particular
    child agent.³³3From our testing, this is a fairly rare occurrence. As far as we
    are aware, ReDel is the first system to implement this type of deferred delegation
    scheme.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，DelegateWait 方案非常适合没有并行功能调用的 LLM，因为它允许这些模型在决定等待任何一个代理的结果之前，先生成多个子代理。缺点是，如果父代理未能检索到某个特定子代理的结果，则有可能创建僵尸代理。根据我们的测试，这种情况相当少见。就我们所知，ReDel
    是第一个实现这种延迟委派方案的系统。
- en: 'Developers can also implement their own delegation schemes modularly in a fashion
    similar to defining tools which can enable more complex behaviour like multi-turn
    delegation. We include an example of how to define a delegation scheme in Appendix
    [A](#A1 "Appendix A Custom Delegation Scheme ‣ ReDel: A Toolkit for LLM-Powered
    Recursive Multi-Agent Systems").'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '开发者还可以以类似于定义工具的方式模块化实现自己的委派方案，这样可以启用更复杂的行为，如多回合委派。我们在附录 [A](#A1 "附录 A 自定义委派方案
    ‣ ReDel: 一个 LLM 驱动的递归多代理系统工具包") 中包含了如何定义委派方案的示例。'
- en: '#  define  a  custom  eventclass  CustomToolEvent(BaseEvent):type:  Literal["custom_event"]  =  "custom_event"id:  str  #  the  ID  of  the  dispatching  agentfoo:  str  #  some  other  data\par#  define  a  tool  that  dispatches  the  eventclass  MyTool(ToolBase):@ai_function()def  my_cool_function(self):self.app.dispatch(CustomToolEvent(id=self.kani.id,  foo="bar"))#  other  behaviour  here  …'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '#  定义  自定义事件类  CustomToolEvent(BaseEvent):type:  Literal["custom_event"]  =  "custom_event"id:  str  #  发送代理的
    IDfoo:  str  #  其他一些数据\par#  定义  一个  触发事件的工具类  MyTool(ToolBase):@ai_function()def  my_cool_function(self):self.app.dispatch(CustomToolEvent(id=self.kani.id,  foo="bar"))#  其他行为  …'
- en: 'Figure 3: Using ReDel to define a custom event and dispatch it from a tool.
    Custom events can be used to add observability deep within a system and can be
    queried post-hoc for rich data analysis.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3：使用 ReDel 定义自定义事件并从工具中触发它。自定义事件可以用来在系统内部添加可观察性，并可以在事后查询以进行丰富的数据分析。
- en: prompt_toks  =  Counter()out_toks  =  Counter()\parfor  event  in  read_jsonl("/path/to/events.jsonl"):if  event["type"]  ==  "tokens_used":eid  =  event["id"]prompt_toks[eid]  +=  event["prompt_tokens"]out_toks[eid]  +=  event["completion_tokens"]
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: prompt_toks  =  Counter()out_toks  =  Counter()\parfor  event  in  read_jsonl("/path/to/events.jsonl"):if  event["type"]  ==  "tokens_used":eid  =  event["id"]prompt_toks[eid]  +=  event["prompt_tokens"]out_toks[eid]  +=  event["completion_tokens"]
- en: 'Figure 4: Every event in a ReDel system, builtin or custom, is logged to a
    JSONL file. Developers can use data analysis tools of their choice to analyze
    event logs post-hoc. This example demonstrates token counting.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4：ReDel 系统中的每个事件，无论是内置的还是自定义的，都会被记录到 JSONL 文件中。开发人员可以使用他们选择的数据分析工具在事后分析事件日志。这个例子演示了
    token 计数。
- en: '![Refer to caption](img/935063ecb309b10232d30f50742ee390.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/935063ecb309b10232d30f50742ee390.png)'
- en: (a) The home page of the ReDel web interface.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: (a) ReDel Web 界面的主页。
- en: '![Refer to caption](img/9917c5163bb1cc3739c897741668e19d.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/9917c5163bb1cc3739c897741668e19d.png)'
- en: (b) ReDel’s interactive view allows users to quickly iterate on prompts and
    tool design, and test end-to-end performance.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: (b) ReDel 的交互视图允许用户快速迭代提示和工具设计，并测试端到端性能。
- en: '![Refer to caption](img/f324172c8b71bfe032ec8eb974e90887.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/f324172c8b71bfe032ec8eb974e90887.png)'
- en: (c) The save browser displays logs found in configured directories on the filesystem.
    It allows developers to search for and review previous runs of ReDel systems.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: (c) 保存浏览器显示在文件系统上配置目录中找到的日志。它允许开发人员搜索和查看 ReDel 系统的先前运行记录。
- en: '![Refer to caption](img/b9d9084161fe7971d3a9536a7f59bf98.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/b9d9084161fe7971d3a9536a7f59bf98.png)'
- en: (d) ReDel’s replay view allows developers to replay saved runs of ReDel systems,
    giving events temporal context when analyzing or debugging a system’s performance.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: (d) ReDel 的重播视图允许开发人员重播 ReDel 系统的已保存运行记录，为事件分析或调试系统性能提供时间上下文。
- en: 'Figure 5: The four views of the ReDel web interface: Home (a), Interactive
    (b), Save Browser (c), and Replay (d).'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5：ReDel Web 界面的四个视图：主页 (a)、交互式 (b)、保存浏览器 (c) 和重播 (d)。
- en: 3.3 Events & Logging
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.3 事件与日志
- en: 'ReDel operates as an event-driven framework, with comprehensive built-in events
    and the ability to define custom events. An event can be defined as anything from
    the creation of a sub-agent to the usage of a particular tool. Whenever ReDel
    catches an event, it logs the event to a JSONL file. This file essentially acts
    as an execution trace for a system run and users can use standard data analysis
    tools to inspect this trace and debug their runs. Figure [4](#S3.F4 "Figure 4
    ‣ 3.2 Delegation Schemes ‣ 3 System Design ‣ ReDel: A Toolkit for LLM-Powered
    Recursive Multi-Agent Systems") shows how a basic Python script can be used to
    count a system’s token usage post-hoc.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 'ReDel 作为一个事件驱动的框架运行，具备全面的内置事件和定义自定义事件的能力。事件可以定义为从创建子代理到使用特定工具的任何事情。每当 ReDel
    捕捉到一个事件时，它会将事件记录到 JSONL 文件中。这个文件本质上充当了系统运行的执行跟踪，用户可以使用标准的数据分析工具来检查这个跟踪并调试他们的运行记录。图
    [4](#S3.F4 "Figure 4 ‣ 3.2 Delegation Schemes ‣ 3 System Design ‣ ReDel: A Toolkit
    for LLM-Powered Recursive Multi-Agent Systems") 显示了如何使用基本的 Python 脚本在事后统计系统的 token
    使用情况。'
- en: 'Furthermore, using just the built-in events, ReDel is able to interactively
    play back any response through our web interface for extra visual debugging aid
    (see Section [3.4](#S3.SS4 "3.4 Web Interface ‣ 3 System Design ‣ ReDel: A Toolkit
    for LLM-Powered Recursive Multi-Agent Systems")). In Section [4](#S4 "4 Evaluation
    & Case Study ‣ ReDel: A Toolkit for LLM-Powered Recursive Multi-Agent Systems")
    we show a case study of how this can be used to debug complex query failures.
    We provide the set of built-in default events in Appendix [B](#A2 "Appendix B
    Application Events ‣ ReDel: A Toolkit for LLM-Powered Recursive Multi-Agent Systems")
    and an example of defining a custom event in Figure [3](#S3.F3 "Figure 3 ‣ 3.2
    Delegation Schemes ‣ 3 System Design ‣ ReDel: A Toolkit for LLM-Powered Recursive
    Multi-Agent Systems").'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '此外，仅使用内置事件，ReDel 就能够通过我们的网页界面交互式地回放任何响应，以提供额外的可视调试帮助（参见第 [3.4](#S3.SS4 "3.4
    Web Interface ‣ 3 System Design ‣ ReDel: A Toolkit for LLM-Powered Recursive Multi-Agent
    Systems") 节）。在第 [4](#S4 "4 Evaluation & Case Study ‣ ReDel: A Toolkit for LLM-Powered
    Recursive Multi-Agent Systems") 节中，我们展示了如何利用这一点来调试复杂查询失败的案例研究。我们在附录 [B](#A2 "Appendix
    B Application Events ‣ ReDel: A Toolkit for LLM-Powered Recursive Multi-Agent
    Systems") 中提供了内置默认事件的集合，并在图 [3](#S3.F3 "Figure 3 ‣ 3.2 Delegation Schemes ‣ 3
    System Design ‣ ReDel: A Toolkit for LLM-Powered Recursive Multi-Agent Systems")
    中展示了定义自定义事件的示例。'
- en: 3.4 Web Interface
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.4 网页界面
- en: 'The web interface consists of four main views:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 网页界面由四个主要视图组成：
- en: Home Page.
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 主页。
- en: 'The home page (Figure [5(a)](#S3.F5.sf1 "In Figure 5 ‣ 3.2 Delegation Schemes
    ‣ 3 System Design ‣ ReDel: A Toolkit for LLM-Powered Recursive Multi-Agent Systems"))
    is the default view when starting the interface for the first time. Users can
    transition to the interactive view by sending a message in the chat bar, or use
    the provided buttons to load a saved replay or read more about ReDel. The sidebar
    lets users switch between interactive sessions they have started, start new sessions,
    or load saved replays.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '主页（图 [5(a)](#S3.F5.sf1 "In Figure 5 ‣ 3.2 Delegation Schemes ‣ 3 System Design
    ‣ ReDel: A Toolkit for LLM-Powered Recursive Multi-Agent Systems")）是首次启动界面时的默认视图。用户可以通过在聊天栏中发送消息或使用提供的按钮来加载保存的回放或了解更多有关
    ReDel 的信息来切换到交互视图。侧边栏允许用户在已启动的交互会话之间切换，开始新的会话或加载保存的回放。'
- en: Interactive View.
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 交互视图。
- en: 'In the interactive view (Figure [5(b)](#S3.F5.sf2 "In Figure 5 ‣ 3.2 Delegation
    Schemes ‣ 3 System Design ‣ ReDel: A Toolkit for LLM-Powered Recursive Multi-Agent
    Systems")), users can send messages to the root node to interact with the system.
    While the system is running, the top right panel contains the delegation graph:
    a visual representation of each agent in the system, their parent and children,
    and what their current status is: running (green), waiting (yellow), or done (grey).
    Users can further inspect each node in the delegation graph by clicking it, which
    displays its full message history in the bottom right panel. ReDel supports streaming,
    and LLM generations appear in real-time for every agent.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '在交互视图中（图 [5(b)](#S3.F5.sf2 "In Figure 5 ‣ 3.2 Delegation Schemes ‣ 3 System
    Design ‣ ReDel: A Toolkit for LLM-Powered Recursive Multi-Agent Systems")），用户可以向根节点发送消息以与系统互动。在系统运行时，右上角面板包含委托图：系统中每个代理的可视化表示，包括其父节点和子节点以及其当前状态：运行（绿色）、等待（黄色）或完成（灰色）。用户可以通过点击委托图中的每个节点进一步检查其，底部右侧面板会显示其完整的消息历史。ReDel
    支持流式传输，LLM 生成的内容实时出现在每个代理中。'
- en: '|  | FanOutQA | TravelPlanner | WebArena |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '|  | FanOutQA | TravelPlanner | WebArena |'
- en: '| System | Loose | Model Judge | CS-Micro | H-Micro | Final | SR | SR (AC)
    | SR (UA) |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 系统 | 松散 | 模型评判 | CS-Micro | H-Micro | 最终 | SR | SR (AC) | SR (UA) |'
- en: '| ReDel (GPT-4o) | 0.687 | 0.494 | 67.49 | 9.52 | 2.78 | 0.203 | 0.179 | 0.643
    |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| ReDel (GPT-4o) | 0.687 | 0.494 | 67.49 | 9.52 | 2.78 | 0.203 | 0.179 | 0.643
    |'
- en: '| ReDel (GPT-3.5-turbo) | 0.300 | 0.087 | 54.58 | 0 | 0 | 0.092 | 0.066 | 0.571
    |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| ReDel (GPT-3.5-turbo) | 0.300 | 0.087 | 54.58 | 0 | 0 | 0.092 | 0.066 | 0.571
    |'
- en: '| Baseline (GPT-4o) | 0.650 | 0.394 | 50.83 | 18.81 | 0 | 0.162 | 0.128 | 0.786
    |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 基准 (GPT-4o) | 0.650 | 0.394 | 50.83 | 18.81 | 0 | 0.162 | 0.128 | 0.786 |'
- en: '| Baseline (GPT-3.5-turbo) | 0.275 | 0.077 | 48.75 | 0.24 | 0 | 0.085 | 0.058
    | 0.571 |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 基准 (GPT-3.5-turbo) | 0.275 | 0.077 | 48.75 | 0.24 | 0 | 0.085 | 0.058 | 0.571
    |'
- en: '| Published SotA | 0.580 | 0.365 | 61.1 | 15.2 | 1.11 | 0.358 | — | — |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 已发布的 SotA | 0.580 | 0.365 | 61.1 | 15.2 | 1.11 | 0.358 | — | — |'
- en: 'Table 2: Systems’ performance on FanOutQA, TravelPlanner, and WebArena. The
    SotA models are GPT-4o on FanOutQA, GPT-4-turbo/Gemini Pro on TravelPlanner, and
    SteP on WebArena. We see that ReDel outperforms the corresponding single-agent
    baselines across all benchmarks and improves over published SotA in two of three.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '表2: 系统在FanOutQA、TravelPlanner和WebArena上的性能。SotA模型是FanOutQA上的GPT-4o、TravelPlanner上的GPT-4-turbo/Gemini
    Pro以及WebArena上的SteP。我们看到ReDel在所有基准测试中都优于相应的单代理基线，并且在三项中有两项超过了发布的SotA。'
- en: Save Browser.
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 保存浏览器。
- en: 'The save browser (Figure [5(c)](#S3.F5.sf3 "In Figure 5 ‣ 3.2 Delegation Schemes
    ‣ 3 System Design ‣ ReDel: A Toolkit for LLM-Powered Recursive Multi-Agent Systems"))
    allows users to select replays to view from the list of previous sessions. This
    allows researchers to run experiments in batches while saving their logs, and
    use the interface to review the system’s behaviour at a later date. The save list
    contains all the saves that the ReDel server found in the provided save directories,
    their titles, number of events, and when they were last edited. Users can search
    for keywords in a save’s title and can also sort saves by name, edit time, or
    number of events – the latter allowing users to quickly find outliers at a glance.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 保存浏览器（图 [5(c)](#S3.F5.sf3 "在图5 ‣ 3.2 委托方案 ‣ 3 系统设计 ‣ ReDel：一个用于LLM驱动递归多代理系统的工具包")）允许用户从之前会话的列表中选择重播进行查看。这使研究人员能够批量运行实验，同时保存日志，并使用界面在稍后日期回顾系统的行为。保存列表包含ReDel服务器在提供的保存目录中找到的所有保存项、其标题、事件数量以及最后编辑时间。用户可以在保存标题中搜索关键字，也可以按名称、编辑时间或事件数量排序保存项——后者使用户能够快速找到异常值。
- en: Replay View.
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 重播视图。
- en: 'With just the built-in default events (see Appendix [B](#A2 "Appendix B Application
    Events ‣ ReDel: A Toolkit for LLM-Powered Recursive Multi-Agent Systems")) ReDel
    saves enough information about a session to fully recreate it in a replay setting.
    Thus, the replay view (Figure [5(d)](#S3.F5.sf4 "In Figure 5 ‣ 3.2 Delegation
    Schemes ‣ 3 System Design ‣ ReDel: A Toolkit for LLM-Powered Recursive Multi-Agent
    Systems")) allows users to step through every event (both built-in and custom)
    dispatched by the system during a particular session and visualize each event’s
    impact on the system.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 仅使用内置默认事件（见附录 [B](#A2 "附录B 应用事件 ‣ ReDel：一个用于LLM驱动递归多代理系统的工具包")），ReDel可以保存关于会话的足够信息，以在重播设置中完全重建它。因此，重播视图（图
    [5(d)](#S3.F5.sf4 "在图5 ‣ 3.2 委托方案 ‣ 3 系统设计 ‣ ReDel：一个用于LLM驱动递归多代理系统的工具包")）允许用户逐步查看系统在特定会话期间派发的每个事件（包括内置和自定义事件），并可视化每个事件对系统的影响。
- en: The layout of the replay view is virtually identical to the interactive view
    except with the message bar replaced by replay controls. Users can use these controls
    to jump between messages in the root node, selected node in the delegation graph,
    or seek events using the slider. The message history and delegation graph update
    in real time as users seek through the replay.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 重播视图的布局与交互视图几乎相同，只是消息栏被重播控制替换。用户可以使用这些控制在根节点、委托图中选定的节点之间跳转，或使用滑块查找事件。用户在重播过程中查找时，消息历史和委托图会实时更新。
- en: 4 Evaluation & Case Study
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4 评估与案例研究
- en: To evaluate ReDel, we compare its performance to a baseline single-agent system
    and to the published state-of-the-art system on three different benchmarks. We
    include the logs and source code for all experiments in our code release.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了评估ReDel，我们将其性能与基准单一代理系统以及发布的最新技术系统在三个不同的基准测试上进行比较。我们在代码发布中包含了所有实验的日志和源代码。
- en: 4.1 Experimental Setup
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.1 实验设置
- en: Benchmarks.
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基准测试。
- en: 'To properly evaluate ReDel we had to choose only datasets that contained sufficiently
    complex tasks. For our benchmarks we therefore chose the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确评估ReDel，我们必须选择包含足够复杂任务的数据集。因此，我们选择了以下基准：
- en: '1.'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: 'FanOutQA: Zhu et al. ([2024](#bib.bib18)) Agents must compile data from many
    Wikipedia articles to answer complex information-seeking queries.'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'FanOutQA: Zhu等（[2024](#bib.bib18)）代理需要从多个维基百科文章中汇总数据，以回答复杂的信息检索查询。'
- en: '2.'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: 'TravelPlanner: Xie et al. ([2024](#bib.bib14)) Agents must create travel plans
    using tools to search flights, restaurant, and attraction databases.'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'TravelPlanner: Xie等（[2024](#bib.bib14)）代理需要使用工具创建旅行计划，搜索航班、餐馆和景点数据库。'
- en: '3.'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: 'WebArena: Zhou et al. ([2024](#bib.bib16)) Agents must do complex web tasks
    such as adding products to a shopping cart or commenting on GitLab.'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'WebArena: Zhou等（[2024](#bib.bib16)）代理需要执行复杂的网页任务，如将产品添加到购物车或在GitLab上评论。'
- en: 'Due to cost constraints we limited our evaluation to roughly 100-300 examples
    from each benchmark (see Appendix [C](#A3 "Appendix C Benchmark Comparison ‣ ReDel:
    A Toolkit for LLM-Powered Recursive Multi-Agent Systems")).'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '由于成本限制，我们将评估限制在每个基准测试大约100-300个示例（见附录[C](#A3 "附录 C 基准比较 ‣ ReDel: 一个用于LLM驱动的递归多代理系统的工具包")）。'
- en: Models.
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 模型。
- en: For our main two ReDel systems we used GPT-4o OpenAI ([2024](#bib.bib7)) and
    GPT-3.5-turbo OpenAI ([2022](#bib.bib6)) as the underlying models. In all setups,
    root nodes are not given tool usage capabilities and use the DelegateOne delegation
    scheme.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的主要两个ReDel系统，我们使用了GPT-4o OpenAI ([2024](#bib.bib7))和GPT-3.5-turbo OpenAI
    ([2022](#bib.bib6))作为基础模型。在所有设置中，根节点没有被赋予工具使用能力，并使用DelegateOne委派方案。
- en: For the two baseline systems, we used the GPT-4o and GPT-3.5-turbo models as-is.
    All models were given equal access to all tools and no few-shot prompting or fine-tuning
    was performed.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于两个基线系统，我们使用了原始的GPT-4o和GPT-3.5-turbo模型。所有模型都被给予了对所有工具的平等访问权限，并且没有进行少样本提示或微调。
- en: 4.2 Results
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.2 结果
- en: 'In Table [2](#S3.T2 "Table 2 ‣ Interactive View. ‣ 3.4 Web Interface ‣ 3 System
    Design ‣ ReDel: A Toolkit for LLM-Powered Recursive Multi-Agent Systems") we report
    the results of our evaluation. We see that, across all benchmarks, our recursive
    delegation system significantly outperforms its corresponding single-agent baseline.
    We even present an improvement over the previous state of the art systems in both
    FanOutQA and TravelPlanner.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '在表格[2](#S3.T2 "表格 2 ‣ 交互视图 ‣ 3.4 网页界面 ‣ 3 系统设计 ‣ ReDel: 一个用于LLM驱动的递归多代理系统的工具包")中，我们报告了我们的评估结果。我们看到，在所有基准测试中，我们的递归委派系统明显优于其对应的单代理基线。我们甚至在FanOutQA和TravelPlanner中展示了相对于先前最先进系统的改进。'
- en: Furthermore, we see that the gap between ReDel and the baseline system gets
    larger as the capabilities of the underlying model improves. We believe that this
    bodes well for the application of such techniques to future, more powerful models.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们看到随着基础模型能力的提升，ReDel和基线系统之间的差距变得更大。我们认为这对将这种技术应用于未来更强大的模型是一个好兆头。
- en: In the few cases where ReDel fails, namely H-Micro on TravelPlanner and SR on
    WebArena, these are attributable to metric failures and unequal comparisons. In
    the TravelPlanner case, on further inspection, we find that recursive systems
    tend to make more commonsense inputs for meals (e.g. “on the flight” or “packed
    lunch”) – which causes the TravelPlanner evaluation script to give a score of
    0 on the Hard Constraint metric. As for the WebArena result, the published SotA
    SteP model uses few-shot, chain-of-thought prompting, whereas our systems all
    use zero-shot prompting.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在ReDel失败的少数几种情况下，即H-Micro在TravelPlanner上和SR在WebArena上，这些都归因于度量失败和不平等比较。在TravelPlanner的案例中，经进一步检查，我们发现递归系统往往会为餐食生成更多常识性输入（例如“在航班上”或“打包午餐”），这导致TravelPlanner评估脚本在Hard
    Constraint度量上得分为0。至于WebArena结果，已发布的SotA SteP模型使用了少样本链式思维提示，而我们的系统都使用了零样本提示。
- en: 5 Using ReDel for Error Analysis
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5 使用ReDel进行错误分析
- en: 'For our error analysis, we took the saved log files for each benchmark and
    manually investigated the logs of both the successful runs as well as the failed
    runs through the replay view of the ReDel web interface. Through this investigation
    we observed two common failure cases in recursive multi-agent systems. These cases
    are as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的错误分析中，我们保存了每个基准测试的日志文件，并通过ReDel网页界面的重放视图手动调查了成功运行和失败运行的日志。通过这项调查，我们观察到递归多代理系统中有两种常见的失败情况。这些情况如下：
- en: •
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'Overcommitment: The agent attempts to complete an overly-complex task itself.'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 过度承诺：代理尝试独自完成过于复杂的任务。
- en: •
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'Undercommitment: The agent performs no work and re-delegates the task it was
    given.'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不足承诺：代理没有进行任何工作，并重新委派了它收到的任务。
- en: 'We find that overcommitment commonly occurs when an agent performs multiple
    tool calls and fills its context window with retrieved information. This often,
    but not always, leads to failures due to the retrieved information truncating
    the original task from its context. In the ReDel web interface, this manifests
    as an abnormally small delegation graph, often consisting of only two nodes: the
    root node, and a single child which the root delegates to and which subsequently
    overcommits.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现，当代理执行多个工具调用并将其上下文窗口填充已检索的信息时，过度承诺通常会发生。这通常，但不总是，导致由于检索的信息截断了原始任务的上下文而导致的失败。在ReDel网页界面中，这表现为异常小的委派图，通常只包含两个节点：根节点和一个子节点，根节点将任务委派给该子节点，而该子节点随后过度承诺。
- en: 'In contrast, we find that undercommitment commonly happens when the model incorrectly
    decides that it does not have the necessary tools to solve the problem and instead
    assumes that its future child will possess the required tools to solve the problem.
    In all three benchmarks, this led to failure as agents entered an infinite loop
    of delegation until they reached a configured depth limit or timed out. In the
    web interface, this manifests as a line of nodes in the delegation graph (Figure
    [6](#S5.F6 "Figure 6 ‣ 5 Using ReDel for Error Analysis ‣ ReDel: A Toolkit for
    LLM-Powered Recursive Multi-Agent Systems")).'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '相比之下，我们发现当模型错误地判断自己没有解决问题所需的工具时，通常会发生不足委托，并且假设其未来的子代理会拥有解决问题所需的工具。在所有三个基准测试中，这导致了失败，因为代理进入了委托的无限循环，直到达到配置的深度限制或超时。在网页界面中，这表现为委托图中的一条节点链（图[6](#S5.F6
    "Figure 6 ‣ 5 Using ReDel for Error Analysis ‣ ReDel: A Toolkit for LLM-Powered
    Recursive Multi-Agent Systems")）。'
- en: 'In Table [3](#S5.T3 "Table 3 ‣ 5 Using ReDel for Error Analysis ‣ ReDel: A
    Toolkit for LLM-Powered Recursive Multi-Agent Systems") we tabulate the over-
    and undercommitment rates of ReDel with both GPT-4o and GPT-3.5-turbo for each
    benchmark. We did this heuristically by counting any delegation graph with two
    or fewer agents as overcommitted and any delegation graph with a chain of three
    or more agents with exactly zero or one children as undercommitted. We see that
    as models get stronger they have a stronger propensity to delegate. However, that
    propensity to delegate may lead to undercommitment.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '在表格[3](#S5.T3 "Table 3 ‣ 5 Using ReDel for Error Analysis ‣ ReDel: A Toolkit
    for LLM-Powered Recursive Multi-Agent Systems")中，我们列出了ReDel在每个基准测试中的GPT-4o和GPT-3.5-turbo的过度委托和不足委托率。我们通过启发式方法进行了此操作，即将任何代理数为两或更少的委托图视为过度委托，将任何具有三个或更多代理且有零个或一个子代理的链视为不足委托。我们发现，随着模型的增强，它们有更强的委托倾向。然而，这种委托倾向可能会导致不足委托。'
- en: '|  | FOQA | TP | WA |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '|  | FOQA | TP | WA |'
- en: '| System | OC | UC | OC | UC | OC | UC |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| 系统 | OC | UC | OC | UC | OC | UC |'
- en: '| RD (4o) | 22.7 | 11.3 | 41.1 | 0.5 | 31.3 | 44.8 |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| RD (4o) | 22.7 | 11.3 | 41.1 | 0.5 | 31.3 | 44.8 |'
- en: '| RD (3.5-t) | 40.8 | 1.1 | 96.7 | 0 | 54.6 | 17.7 |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| RD (3.5-t) | 40.8 | 1.1 | 96.7 | 0 | 54.6 | 17.7 |'
- en: 'Table 3: The overcommitment (OC) and undercommitment (UC) rates, in percent,
    of the two recursive multi-agent systems we tested, by benchmark.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 表3：我们测试的两个递归多代理系统的过度委托（OC）和不足委托（UC）率，以百分比表示，按基准测试分类。
- en: Given the prevalence of these two issues, we hypothesize that recursive multi-agent
    systems may still see further improvements to performance from interventions that
    target these behaviors. For example, one could fine-tune or prompt agents with
    domain-specific instructions that detail when the models should delegate and when
    they should perform tasks on their own.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这两个问题的普遍存在，我们假设递归多代理系统可能还会通过针对这些行为的干预进一步提高性能。例如，可以对代理进行微调或提供领域特定的指令，详细说明模型何时应进行委托，何时应自行执行任务。
- en: While implementing such improvements is beyond the scope of this paper, we believe
    that this case study helps to demonstrate the strengths of the ReDel system. Using
    the delegation graph view, it is easy to identify and characterize errors in recursive
    multi-agent systems and we hope that through ReDel more research can be done to
    further refine such systems for maximum utility.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然实现这些改进超出了本文的范围，但我们相信这个案例研究有助于展示ReDel系统的优势。使用委托图视图，可以轻松识别和表征递归多代理系统中的错误，我们希望通过ReDel能够进行更多的研究，以进一步完善这些系统以实现最大效用。
- en: '![Refer to caption](img/b0ec1cfcb064f2c26a22682ed8c35c00.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/b0ec1cfcb064f2c26a22682ed8c35c00.png)'
- en: 'Figure 6: Recursive systems exhibiting undercommitment produce long chains
    of agents (blue boxes), as seen in the ReDel delegation graph.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图6：递归系统表现出不足委托时，会产生长链的代理（蓝色框），如ReDel委托图所示。
- en: 6 Conclusion
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6 结论
- en: We present ReDel, a novel toolkit for working with recursive multi-agent systems.
    ReDel allows academic developers to quickly build, iterate on, and run experiments
    involving dynamic multi-agent systems. It offers a modular interface to create
    tools for agents to use, an event framework to instrument experiments for later
    analysis, and a free and open-source web interface to interact with and explore
    developer-defined systems. We use ReDel to demonstrate recursive multi-agent systems’
    performance on three diverse benchmarks, and we include the full logs of these
    runs in our demo release for reproducibility and further exploration⁴⁴4[https://datasets.mechanus.zhu.codes/redel-dist.zip](https://datasets.mechanus.zhu.codes/redel-dist.zip).
    ReDel opens the door for a new paradigm of recursive multi-agent systems, and
    we are excited to see how developers can utilize our system in the future.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了 ReDel，一个用于处理递归多智能体系统的新工具包。ReDel 允许学术开发者快速构建、迭代和运行涉及动态多智能体系统的实验。它提供了一个模块化的接口来创建智能体使用的工具，一个事件框架用于仪器化实验以便后续分析，以及一个免费且开源的网络接口来与开发者定义的系统进行交互和探索。我们使用
    ReDel 演示了递归多智能体系统在三个不同基准上的表现，并在我们的演示版本中包含了这些运行的完整日志，以确保可重复性和进一步探索⁴⁴4[https://datasets.mechanus.zhu.codes/redel-dist.zip](https://datasets.mechanus.zhu.codes/redel-dist.zip)。ReDel
    为递归多智能体系统的新范式打开了大门，我们期待看到开发者未来如何利用我们的系统。
- en: References
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: References
- en: Campos et al. (2023) Nuno Campos, William FH, Vadym Barda, and Harrison Chase.
    2023. [LangGraph](https://github.com/langchain-ai/langgraph).
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Campos et al. (2023) Nuno Campos, William FH, Vadym Barda, 和 Harrison Chase.
    2023. [LangGraph](https://github.com/langchain-ai/langgraph)。
- en: 'Hong et al. (2024) Sirui Hong, Mingchen Zhuge, Jonathan Chen, Xiawu Zheng,
    Yuheng Cheng, Jinlin Wang, Ceyao Zhang, Zili Wang, Steven Ka Shing Yau, Zijuan
    Lin, Liyang Zhou, Chenyu Ran, Lingfeng Xiao, Chenglin Wu, and Jürgen Schmidhuber.
    2024. [MetaGPT: Meta programming for a multi-agent collaborative framework](https://openreview.net/forum?id=VtmBAGCN7o).
    In *The Twelfth International Conference on Learning Representations*.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Hong et al. (2024) Sirui Hong, Mingchen Zhuge, Jonathan Chen, Xiawu Zheng,
    Yuheng Cheng, Jinlin Wang, Ceyao Zhang, Zili Wang, Steven Ka Shing Yau, Zijuan
    Lin, Liyang Zhou, Chenyu Ran, Lingfeng Xiao, Chenglin Wu, 和 Jürgen Schmidhuber.
    2024. [MetaGPT: 用于多智能体协作框架的元编程](https://openreview.net/forum?id=VtmBAGCN7o)。发表于
    *第十二届国际学习表征会议*。'
- en: 'Khot et al. (2023) Tushar Khot, Harsh Trivedi, Matthew Finlayson, Yao Fu, Kyle
    Richardson, Peter Clark, and Ashish Sabharwal. 2023. [Decomposed prompting: A
    modular approach for solving complex tasks](https://openreview.net/forum?id=_nGgzQjzaRy).
    In *The Eleventh International Conference on Learning Representations*.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Khot et al. (2023) Tushar Khot, Harsh Trivedi, Matthew Finlayson, Yao Fu, Kyle
    Richardson, Peter Clark, 和 Ashish Sabharwal. 2023. [分解提示：解决复杂任务的模块化方法](https://openreview.net/forum?id=_nGgzQjzaRy)。发表于
    *第十一届国际学习表征会议*。
- en: 'Lee and Kim (2023) Soochan Lee and Gunhee Kim. 2023. [Recursion of thought:
    A divide-and-conquer approach to multi-context reasoning with language models](https://doi.org/10.18653/v1/2023.findings-acl.40).
    In *Findings of the Association for Computational Linguistics: ACL 2023*, pages
    623–658, Toronto, Canada. Association for Computational Linguistics.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lee 和 Kim (2023) Soochan Lee 和 Gunhee Kim. 2023. [思维的递归：一种分治法用于多上下文推理的语言模型](https://doi.org/10.18653/v1/2023.findings-acl.40)。发表于
    *计算语言学协会：ACL 2023 会议成果*，页码 623–658，多伦多，加拿大。计算语言学协会。
- en: Liu et al. (2022) Jerry Liu, Logan, and Simon Siu. 2022. [LlamaIndex](https://doi.org/10.5281/zenodo.1234).
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Liu et al. (2022) Jerry Liu, Logan, 和 Simon Siu. 2022. [LlamaIndex](https://doi.org/10.5281/zenodo.1234)。
- en: 'OpenAI (2022) OpenAI. 2022. [ChatGPT: Optimizing Language Models for Dialogue](https://openai.com/blog/chatgpt).'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'OpenAI (2022) OpenAI. 2022. [ChatGPT: 为对话优化语言模型](https://openai.com/blog/chatgpt)。'
- en: OpenAI (2024) OpenAI. 2024. [Hello GPT-4o](https://openai.com/index/hello-gpt-4o/).
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenAI (2024) OpenAI. 2024. [Hello GPT-4o](https://openai.com/index/hello-gpt-4o/)。
- en: 'Parisi et al. (2022) Aaron Parisi, Yao Zhao, and Noah Fiedel. 2022. [TALM:
    tool augmented language models](https://arxiv.org/abs/2205.12255). *Preprint*,
    arXiv:2205.12255.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Parisi et al. (2022) Aaron Parisi, Yao Zhao, 和 Noah Fiedel. 2022. [TALM: 工具增强语言模型](https://arxiv.org/abs/2205.12255)。*预印本*，arXiv:2205.12255。'
- en: 'Prasad et al. (2024) Archiki Prasad, Alexander Koller, Mareike Hartmann, Peter
    Clark, Ashish Sabharwal, Mohit Bansal, and Tushar Khot. 2024. [ADaPT: As-needed
    decomposition and planning with language models](https://doi.org/10.18653/v1/2024.findings-naacl.264).
    In *Findings of the Association for Computational Linguistics: NAACL 2024*, pages
    4226–4252, Mexico City, Mexico. Association for Computational Linguistics.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '普拉萨德等人（2024）阿尔基基·普拉萨德、亚历山大·科勒、玛瑞克·哈特曼、彼得·克拉克、阿希什·萨巴尔瓦尔、莫希特·班萨尔、和图沙尔·科特。2024年。[ADaPT:
    根据需要的分解和规划与语言模型](https://doi.org/10.18653/v1/2024.findings-naacl.264)。在 *计算语言学协会发现：NAACL
    2024*，第4226–4252页，墨西哥城，墨西哥。计算语言学协会。'
- en: 'Qiao et al. (2024) Shuofei Qiao, Ningyu Zhang, Runnan Fang, Yujie Luo, Wangchunshu
    Zhou, Yuchen Eleanor Jiang, Chengfei Lv, and Huajun Chen. 2024. [AutoAct: automatic
    agent learning from scratch for qa via self-planning](https://arxiv.org/abs/2401.05268).
    In *Proceedings of the 62nd Annual Meeting of the Association for Computational
    Linguistics (ACL 2024)*, Bangkok, Thailand. Association for Computational Linguistics.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '乔等人（2024）乔硕飞、张宁宇、方润楠、罗雨洁、周望春舒、江玉辰、吕成飞、和陈华军。2024年。[AutoAct: 从零开始自动学习智能体以进行 QA
    通过自我规划](https://arxiv.org/abs/2401.05268)。在 *第62届计算语言学协会年会（ACL 2024）*，泰国曼谷。计算语言学协会。'
- en: 'Schick et al. (2023) Timo Schick, Jane Dwivedi-Yu, Roberto Dessi, Roberta Raileanu,
    Maria Lomeli, Eric Hambro, Luke Zettlemoyer, Nicola Cancedda, and Thomas Scialom.
    2023. [Toolformer: Language models can teach themselves to use tools](https://openreview.net/forum?id=Yacmpz84TH).
    In *Thirty-seventh Conference on Neural Information Processing Systems*.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Schick 等人（2023）蒂莫·施克、简·德维维迪-余、罗伯托·德西、罗伯塔·赖勒努、玛利亚·洛梅利、埃里克·汉布罗、卢克·泽特尔莫耶、尼古拉·坎切达、和托马斯·斯西亚隆。2023年。[Toolformer:
    语言模型可以自学使用工具](https://openreview.net/forum?id=Yacmpz84TH)。在 *第37届神经信息处理系统会议*。'
- en: Significant Gravitas (2023) Significant Gravitas. 2023. [AutoGPT](https://github.com/Significant-Gravitas/AutoGPT).
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Significant Gravitas（2023）Significant Gravitas。2023年。[AutoGPT](https://github.com/Significant-Gravitas/AutoGPT)。
- en: 'Wu et al. (2023) Qingyun Wu, Gagan Bansal, Jieyu Zhang, Yiran Wu, Beibin Li,
    Erkang Zhu, Li Jiang, Xiaoyun Zhang, Shaokun Zhang, Jiale Liu, Ahmed Hassan Awadallah,
    Ryen W White, Doug Burger, and Chi Wang. 2023. [AutoGen: enabling next-gen llm
    applications via multi-agent conversation](https://arxiv.org/abs/2308.08155).
    *Preprint*, arXiv:2308.08155.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '吴等人（2023）吴清云、加根·班萨尔、张杰宇、吴怡然、李贝彬、朱尔康、江磊、张小云、张绍坤、刘佳乐、艾哈迈德·哈桑·阿瓦达拉赫、瑞恩·W·怀特、道格·伯杰、和王驰。2023年。[AutoGen:
    通过多智能体对话实现下一代 LLM 应用](https://arxiv.org/abs/2308.08155)。*预印本*，arXiv:2308.08155。'
- en: 'Xie et al. (2024) Jian Xie, Kai Zhang, Jiangjie Chen, Tinghui Zhu, Renze Lou,
    Yuandong Tian, Yanghua Xiao, and Yu Su. 2024. TravelPlanner: A benchmark for real-world
    planning with language agents. In *Forty-first International Conference on Machine
    Learning*.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '谢等人（2024）谢坚、张凯、陈江洁、朱廷辉、楼任泽、田远东、肖扬华、和苏瑜。2024年。TravelPlanner: 用于真实世界规划的语言智能体基准。在
    *第41届国际机器学习会议*。'
- en: 'Zhang et al. (2024) Ceyao Zhang, Kaijie Yang, Siyi Hu, Zihao Wang, Guanghe
    Li, Yihang Sun, Cheng Zhang, Zhaowei Zhang, Anji Liu, Song-Chun Zhu, Xiaojun Chang,
    Junge Zhang, Feng Yin, Yitao Liang, and Yaodong Yang. 2024. [Proagent: Building
    proactive cooperative agents with large language models](https://doi.org/10.1609/aaai.v38i16.29710).
    *Proceedings of the AAAI Conference on Artificial Intelligence*, 38(16):17591–17599.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '张等人（2024）张策尧、杨凯杰、胡思宜、王子豪、李光赫、孙意航、张程、张照伟、刘安纪、朱松春、常晓军、张军阁、尹锋、梁亦涛、和杨尧东。2024年。[Proagent:
    利用大型语言模型构建主动合作的智能体](https://doi.org/10.1609/aaai.v38i16.29710)。*AAAI 人工智能会议论文集*，38(16):17591–17599。'
- en: 'Zhou et al. (2024) Shuyan Zhou, Frank F. Xu, Hao Zhu, Xuhui Zhou, Robert Lo,
    Abishek Sridhar, Xianyi Cheng, Tianyue Ou, Yonatan Bisk, Daniel Fried, Uri Alon,
    and Graham Neubig. 2024. [Webarena: A realistic web environment for building autonomous
    agents](https://openreview.net/forum?id=oKn9c6ytLx). In *The Twelfth International
    Conference on Learning Representations*.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '周等人（2024）周书燕、弗兰克·F·徐、朱浩、周旭辉、罗伯特·洛、阿比谢克·斯里达、程显义、欧天跃、约纳坦·比斯克、丹尼尔·弗里德、乌里·阿隆、和格雷厄姆·纽比格。2024年。[Webarena:
    一个现实的网页环境用于构建自主智能体](https://openreview.net/forum?id=oKn9c6ytLx)。在 *第十二届国际学习表示会议*。'
- en: 'Zhu et al. (2023) Andrew Zhu, Liam Dugan, Alyssa Hwang, and Chris Callison-Burch.
    2023. [Kani: A lightweight and highly hackable framework for building language
    model applications](https://doi.org/10.18653/v1/2023.nlposs-1.8). In *Proceedings
    of the 3rd Workshop for Natural Language Processing Open Source Software (NLP-OSS
    2023)*, pages 65–77, Singapore. Association for Computational Linguistics.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Zhu et al. (2023) Andrew Zhu, Liam Dugan, Alyssa Hwang, and Chris Callison-Burch.
    2023. [Kani: 轻量级且高度可破解的构建语言模型应用的框架](https://doi.org/10.18653/v1/2023.nlposs-1.8)。在
    *第三届自然语言处理开源软件研讨会（NLP-OSS 2023）论文集* 中，第 65–77 页，新加坡。计算语言学协会。'
- en: 'Zhu et al. (2024) Andrew Zhu, Alyssa Hwang, Liam Dugan, and Chris Callison-Burch.
    2024. FanOutQA: a multi-hop, multi-document question answering benchmark for large
    language models. In *Proceedings of the 62nd Annual Meeting of the Association
    for Computational Linguistics (ACL 2024)*, Bangkok, Thailand. Association for
    Computational Linguistics.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Zhu et al. (2024) Andrew Zhu, Alyssa Hwang, Liam Dugan, and Chris Callison-Burch.
    2024. FanOutQA: 针对大语言模型的多跳、多文档问答基准。在 *第 62 届计算语言学协会年会（ACL 2024）论文集* 中，泰国曼谷。计算语言学协会。'
- en: Appendix A Custom Delegation Scheme
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录 A 自定义委托方案
- en: The following annotated code snippet shows how to use the ReDel Python package
    to define a delegation scheme – the delegation scheme here is a reproduction of
    the bundled DelegateOne scheme.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 下列带注释的代码片段展示了如何使用 ReDel Python 包来定义一个委托方案——这里的委托方案是捆绑的 DelegateOne 方案的复现。
- en: 'class  DelegateOne(DelegationBase):@ai_function()async  def  delegate(instructions:  str):"""(Insert  your  prompt  for  the  model  here.)"""\par#  request  a  new  agent  instance  from  the  systemsubagent  =  await  self.create_delegate_kani(instructions)\par#  set  the  state  of  the  delegator  agent  to  be  waiting  on  the  delegatewith  self.kani.run_state(RunState.WAITING):#  buffer  the  delegate’s  response  as  a  list  of  strings,  filtering  for  ASSISTANT  messages#  use  full_round_stream  so  that  the  app  automatically  dispatches  streaming  eventsresult  =  []async  for  stream  in  subagent.full_round_stream(instructions):msg  =  await  stream.message()if  msg.role  ==  ChatRole.ASSISTANT  and  msg.content:result.append(msg.content)\par#  clean  up  any  of  the  delegate’s  ephemeral  state  and  return  result  to  callerawait  subagent.cleanup()return  "\n".join(result)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 'class  DelegateOne(DelegationBase):@ai_function()async  def  delegate(instructions:  str):"""（在此插入你对模型的提示。）"""\par#  从系统请求一个新的代理实例subagent  =  await  self.create_delegate_kani(instructions)\par#  将委托代理的状态设置为等待delegatewith  self.kani.run_state(RunState.WAITING):#  作为字符串列表缓冲代理的响应，过滤
    ASSISTANT 消息#  使用 full_round_stream，以便应用程序自动调度流事件result  =  []async  for  stream  in  subagent.full_round_stream(instructions):msg  =  await  stream.message()if  msg.role  ==  ChatRole.ASSISTANT  and  msg.content:result.append(msg.content)\par#  清理任何代理的短暂状态并将结果返回给调用者await  subagent.cleanup()return  "\n".join(result)'
- en: 'Figure 7: Using ReDel to define a custom delegation scheme. Delegation tools
    are responsible for the lifecycle of any agent they create.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '图 7: 使用 ReDel 定义自定义委托方案。委托工具负责其创建的任何代理的生命周期。'
- en: Appendix B Application Events
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录 B 应用事件
- en: The following table lists the built-in default events that will be emitted on
    every run of a ReDel system. Each event has a type key which is used to determine
    what kind of event it is, and a timestamp key.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 下表列出了每次运行 ReDel 系统时都会发出的内置默认事件。每个事件都有一个类型键，用于确定事件的种类，以及一个时间戳键。
- en: '| Event Name | Key | Description |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| 事件名称 | 键 | 描述 |'
- en: '| Agent Spawned | kani_spawn | A new agent was spawned. The data attached to
    the event contains the full state of the agent at the time it was spawned, which
    includes its ID, relations to other agents, a description of the LLM powering
    it, the tools it has access to, and any system prompts. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| 代理生成 | kani_spawn | 一个新的代理已被生成。与事件相关的数据包含代理在生成时的完整状态，包括其 ID、与其他代理的关系、支持它的
    LLM 的描述、它可以访问的工具以及任何系统提示。 |'
- en: '| Agent State Change | kani_state_change | The running state of an agent changed
    (e.g. from RUNNING to WAITING). Contains the ID of the agent and its new state.
    |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 代理状态变化 | kani_state_change | 代理的运行状态发生了变化（例如，从 RUNNING 到 WAITING）。包含代理的 ID
    和其新的状态。 |'
- en: '| Tokens Used | tokens_used | An agent made a call to the language model powering
    it. Contains the ID of the agent, the number of tokens in the prompt it sent,
    and the number of tokens in the completion the LLM returned. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| 使用的令牌 | tokens_used | 代理调用了支持它的语言模型。包含代理的 ID、它发送的提示中的令牌数以及 LLM 返回的完成中的令牌数。
    |'
- en: '| Agent Message | kani_message | An agent added a new message to its chat history.
    Contains the ID of the agent and the message’s role (e.g. USER or ASSISTANT) and
    content. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| 代理消息 | kani_message | 代理向其聊天记录中添加了新消息。包含代理的 ID 和消息的角色（例如 用户 或 助手）及内容。|'
- en: '| Root Message | root_message | Similar to Agent Message, but only fires for
    messages in the root node. This is fired in addition to an Agent Message event.
    |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| 根消息 | root_message | 类似于代理消息，但仅在根节点中的消息触发。这是在代理消息事件之外触发的。|'
- en: '| Round Complete | round_complete | Fired when the root node completes a full
    chat round (i.e. there are no running children and it has generated a response
    to a user query). |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| 回合完成 | round_complete | 当根节点完成一次完整的聊天回合（即没有正在进行的子节点且已生成对用户查询的响应）时触发。|'
- en: 'Table 4: A list of events built-in to the ReDel toolkit.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4：ReDel 工具包中内置事件的列表。
- en: Appendix C Benchmark Comparison
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录 C 基准比较
- en: Here, we tabulate each of the benchmarks tested in our experiments.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们列出了在实验中测试的每个基准。
- en: '| Benchmark | Split | # | Example | Metrics |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| 基准 | 划分 | # | 示例 | 指标 |'
- en: '| FanOutQA Zhu et al. ([2024](#bib.bib18)) | dev | 310 | What is the total
    number of employees in the five largest banks in the world? | Loose: The average
    proportion of reference strings found in the generated answer. Model Judge: Whether
    the reference answer and generated answer are equivalent, judged by GPT-4 (gpt-4-0613).
    |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| FanOutQA Zhu et al. ([2024](#bib.bib18)) | 开发 | 310 | 世界上五家最大银行的总员工数是多少？|
    Loose：在生成的答案中找到的参考字符串的平均比例。 Model Judge：参考答案和生成答案是否等效，由 GPT-4 (gpt-4-0613) 判断。|'
- en: '| TravelPlanner Xie et al. ([2024](#bib.bib14)) | val | 180 | Please help me
    plan a trip from St. Petersburg to Rockford spanning 3 days from March 16th to
    March 18th, 2022\. The travel should be planned for a single person with a budget
    of $1,700. | CS-Micro: The proportion of elements in a generated travel plan that
    do not demonstrate a commonsense error (e.g. visiting the same attraction twice).
    H-Micro: The proportion of elements in a generated travel plan that do not violate
    a constraint set by the user or a physical constraint (e.g. budget overruns, non-existent
    restaurants).'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '| TravelPlanner Xie et al. ([2024](#bib.bib14)) | val | 180 | 请帮助我计划从圣彼得堡到洛克福德的为期
    3 天的旅行，时间从 2022 年 3 月 16 日到 3 月 18 日。旅行应计划为一个人的预算为 1700 美元。| CS-Micro：生成的旅行计划中不显示常识性错误的元素比例（例如，重复参观相同的景点）。
    H-Micro：生成的旅行计划中不违反用户或物理约束条件的元素比例（例如，超出预算、虚不存在的餐馆）。'
- en: 'Final: The proportion of generated travel plans in which there are no exhibited
    commonsense errors and all constraints are met (i.e., valid travel plans). |'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 最终：生成的旅行计划中没有表现出常识性错误且所有约束条件都满足的比例（即有效旅行计划）。|
- en: '| WebArena Zhou et al. ([2024](#bib.bib16)) | test | 271 | Show me the ergonomic
    chair with the best rating | SR: Whether the task is successfully completed or
    correctly marked as unachievable. SR (AC): Whether the task is successfully completed,
    only among tasks that are achievable.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '| WebArena Zhou et al. ([2024](#bib.bib16)) | 测试 | 271 | 向我展示评分最高的符合人体工程学的椅子
    | SR：任务是否成功完成或正确标记为无法实现。 SR (AC)：任务是否成功完成，仅在可实现的任务中。'
- en: 'SR (UA): Whether the task is correctly marked as unachievable, only among tasks
    that are unachievable. |'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: SR (UA)：是否任务被正确标记为无法实现，仅在无法实现的任务中。|
- en: 'Table 5: The dataset split, number of queries, and example queries from each
    of the benchmarks we test.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 表 5：我们测试的每个基准的 数据集划分、查询数量和示例查询。
- en: Appendix D Additional Design Notes
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录 D 额外设计说明
- en: D.1 Prompts
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: D.1 提示
- en: In this section, we provide the prompts used for each benchmark. We use zero-shot
    prompts for each benchmark, and provide the necessary tools as defined in each
    benchmark’s paper.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们提供了每个基准使用的提示。我们为每个基准使用零样本提示，并提供了每个基准论文中定义的必要工具。
- en: '|  | Prompt |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '|  | 提示 |'
- en: '| FanOutQA Zhu et al. ([2024](#bib.bib18)) | USER: {question} |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| FanOutQA Zhu et al. ([2024](#bib.bib18)) | 用户：{问题} |'
- en: '| TravelPlanner Xie et al. ([2024](#bib.bib14)) | SYSTEM: Based on the user’s
    query, make the best travel plan for the user and save it. Do not ask follow-up
    questions. USER: {question} |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| TravelPlanner Xie et al. ([2024](#bib.bib14)) | 系统：根据用户的查询，为用户制定最佳旅行计划并保存。不要提出后续问题。
    用户：{问题} |'
- en: '| WebArena Zhou et al. ([2024](#bib.bib16)) | SYSTEM: You are an autonomous
    intelligent agent tasked with navigating a web browser. You will be given web-based
    tasks. These tasks will be accomplished through the use of specific functions
    you can call. Here’s the information you’ll have:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '| WebArena Zhou 等 ([2024](#bib.bib16)) | 系统: 你是一个自主智能代理，负责浏览器的操作。你将被分配基于网页的任务。这些任务将通过你可以调用的特定功能来完成。这里是你将拥有的信息:'
- en: 'The user’s objective: This is the task you’re trying to complete.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '用户的目标: 这是你要完成的任务。'
- en: 'The current web page’s accessibility tree: This is a simplified representation
    of the webpage, providing key information.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '当前网页的可访问性树: 这是网页的简化表示，提供了关键信息。'
- en: 'The current web page’s URL: This is the page you’re currently navigating.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '当前网页的 URL: 这是你当前正在浏览的页面。'
- en: 'The open tabs: These are the tabs you have open. Homepage: If you want to visit
    other websites, check out the homepage at http://homepage.com. It has a list of
    websites you can visit. USER: BROWSER STATE: {observation}'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '打开的标签: 这些是你打开的标签页。主页: 如果你想访问其他网站，可以查看 [主页](http://homepage.com)。它列出了你可以访问的网站。用户:
    浏览器状态: {observation}'
- en: 'URL: {url}'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 'URL: {url}'
- en: 'OBJECTIVE: {objective} |'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '目标: {objective} |'
- en: 'Table 6: The prompts used for each benchmark in our evaluation.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '表 6: 我们评估中用于每个基准的提示。'
- en: D.2 Identical Delegation Prevention
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: D.2 相同委托预防
- en: By default, the delegation schemes bundled in ReDel will prevent an agent from
    delegating instructions that are the same as the instructions that were given
    to it. If an agent attempts to do so, the delegation function returns a message
    instructing the agent to either attempt the task itself or break it into smaller
    pieces before delegating again. We implemented this as an early mitigation for
    undercommitment, but some undercommitment still occurs.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，ReDel 中捆绑的委托方案会防止代理委托与其收到的指令相同的指令。如果代理尝试这样做，委托功能会返回一条消息，指示代理要么自己尝试完成任务，要么在重新委托之前将任务拆分成更小的部分。我们将其作为对低承诺的早期缓解措施，但仍然会发生一些低承诺。
