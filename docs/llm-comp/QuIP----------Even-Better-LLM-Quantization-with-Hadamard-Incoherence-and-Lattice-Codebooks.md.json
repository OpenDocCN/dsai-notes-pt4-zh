["```\n   ([3, 1, 1, 1, 3, 3, 3, 3] [1, 3, 1, 1, 3, 3, 3, 3] [1, 1, 3, 1, 3, 3, 3, 3]\n    [1, 1, 1, 3, 3, 3, 3, 3] [3, 3, 3, 1, 3, 3, 1, 1] [3, 3, 3, 1, 3, 1, 3, 1]\n    [3, 3, 3, 1, 1, 3, 3, 1] [3, 3, 3, 1, 3, 1, 1, 3] [3, 3, 3, 1, 1, 3, 1, 3]\n    [3, 3, 3, 1, 1, 1, 3, 3] [3, 3, 1, 3, 3, 3, 1, 1] [3, 3, 1, 3, 3, 1, 3, 1]\n    [3, 3, 1, 3, 1, 3, 3, 1] [3, 3, 1, 3, 3, 1, 1, 3] [3, 3, 1, 3, 1, 3, 1, 3]\n    [3, 3, 1, 3, 1, 1, 3, 3] [3, 1, 3, 3, 3, 3, 1, 1] [3, 1, 3, 3, 3, 1, 3, 1]\n    [3, 1, 3, 3, 1, 3, 3, 1] [3, 1, 3, 3, 3, 1, 1, 3] [3, 1, 3, 3, 1, 3, 1, 3]\n    [1, 3, 3, 3, 1, 1, 3, 3] [1, 3, 3, 3, 3, 3, 1, 1] [1, 3, 3, 3, 3, 1, 3, 1]\n    [1, 3, 3, 3, 1, 3, 3, 1] [1, 3, 3, 3, 3, 1, 1, 3] [1, 3, 3, 3, 1, 3, 1, 3]\n    [1, 1, 3, 3, 1, 3, 3, 3] [3, 3, 1, 1, 3, 3, 3, 1] ) / 2\n\n```", "```\n#include <cuda.h>\n#include <cuda_runtime.h>\n\n__global__ void matrixMultiply(float *A, float *B, float *C, int rowsA, int co\nlsA, int rowsB, int colsB) {\n  int i = blockIdx.x * blockDim.x + threadIdx.x;\n  int j = blockIdx.y * blockDim.y + threadIdx.y;\n  if (i < rowsA && j < colsB) {\n    float sum = 0;\n    for (int k = 0; k < rowsB; k++) {\n      sum += A[i + k * colsA] * B[k + j * rowsB];\n    }\n    C[i + j * rowsB] = sum;\n  }\n}\n\nint main() {\n  int rowsA = 3;\n  int colsA = 3;\n  int rowsB = 3;\n\n```"]