- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-09-08 18:52:02'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-09-08 18:52:02
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Unlocking Hardware Security Assurance: The Potential of LLMs'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解锁硬件安全保障：大语言模型的潜力
- en: 来源：[https://ar5iv.labs.arxiv.org/html/2308.11042](https://ar5iv.labs.arxiv.org/html/2308.11042)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://ar5iv.labs.arxiv.org/html/2308.11042](https://ar5iv.labs.arxiv.org/html/2308.11042)
- en: Xingyu Meng1, Amisha Srivastava1, Ayush Arunachalam1, Avik Ray2,
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 孟星宇1、Amisha Srivastava1、Ayush Arunachalam1、Avik Ray2，
- en: 'Pedro Henrique Silva3, Rafail Psiakis3, Yiorgos Makris1 and Kanad Basu1 This
    research is supported by Technology Innovation Institute, Abu Dhabi, United Arab
    Emirates. (Corresponding Author:Xingyu Meng, Email: xxm150930@utdallas.edu). 1University
    of Texas at Dallas, 2Amazon Alexa, 3Technology Innovation Institute'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Pedro Henrique Silva3、Rafail Psiakis3、Yiorgos Makris1 和 Kanad Basu1 本研究得到阿布扎比技术创新研究所（Technology
    Innovation Institute）、阿拉伯联合酋长国的支持。（通讯作者：孟星宇，电子邮件：xxm150930@utdallas.edu）。1德克萨斯大学达拉斯分校，2亚马逊Alexa，3技术创新研究所
- en: Abstract
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 摘要
- en: System-on-Chips (SoCs) form the crux of modern computing systems. SoCs enable
    high-level integration through the utilization of multiple Intellectual Property
    (IP) cores. However, the integration of multiple IP cores also presents unique
    challenges owing to their inherent vulnerabilities, thereby compromising the security
    of the entire system. Hence, it is imperative to perform hardware security validation
    to address these concerns. The efficiency of this validation procedure is contingent
    on the quality of the SoC security properties provided. However, generating security
    properties with traditional approaches often requires expert intervention and
    is limited to a few IPs, thereby resulting in a time-consuming and non-robust
    process. To address this issue, we, for the first time, propose a novel and automated
    Natural Language Processing (NLP)-based Security Property Generator (NSPG). Specifically,
    our approach utilizes hardware documentation in order to propose the first hardware
    security-specific language model, HS-BERT, for extracting security properties
    dedicated to hardware design. To evaluate our proposed technique, we trained the
    HS-BERT model using sentences from RISC-V, OpenRISC, MIPS, OpenSPARC, and OpenTitan
    SoC documentation. When assessed on five untrained OpenTitan hardware IP documents,
    NSPG was able to extract 326 security properties from 1723 sentences. This, in
    turn, aided in identifying eight security bugs in the OpenTitan SoC design presented
    in the hardware hacking competition, Hack@DAC 2022.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 系统芯片（SoCs）构成了现代计算系统的核心。SoCs 通过利用多个知识产权（IP）核心实现了高水平的集成。然而，多个 IP 核心的集成也带来了独特的挑战，由于其固有的脆弱性，从而危及整个系统的安全性。因此，必须进行硬件安全验证以解决这些问题。这一验证过程的效率依赖于提供的
    SoC 安全属性的质量。然而，传统方法生成安全属性通常需要专家干预，并且仅限于少数 IP，这导致了一个耗时且不够稳健的过程。为了解决这个问题，我们首次提出了一种新型的、基于自然语言处理（NLP）的自动化安全属性生成器（NSPG）。具体来说，我们的方法利用硬件文档，提出了第一个专门针对硬件设计的安全性语言模型
    HS-BERT，用于提取专门针对硬件设计的安全属性。为了评估我们提出的技术，我们使用来自 RISC-V、OpenRISC、MIPS、OpenSPARC 和
    OpenTitan SoC 文档的句子训练了 HS-BERT 模型。在对五个未经训练的 OpenTitan 硬件 IP 文档进行评估时，NSPG 能够从 1723
    个句子中提取出 326 个安全属性。这反过来有助于在硬件黑客竞赛 Hack@DAC 2022 中识别出 OpenTitan SoC 设计中的八个安全漏洞。
- en: I Introduction
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: I 引言
- en: Modern computing systems are built on System-on-Chips (SoCs), as they offer
    a high level of integration through the use of multiple Intellectual Property
    (IP) cores [[24](#bib.bib24)]. However, this also presents new security challenges,
    since vulnerabilities in one IP core may affect the security of the entire system [[21](#bib.bib21)].
    While software and firmware patches can address many hardware security vulnerabilities,
    some cannot be fixed and require extensive security assurance during the design
    process. Hence, hardware security validation is imperative to ensure the security
    and trustworthiness of the design. MITRE’s Common Weakness Enumeration (CWE) for
    hardware categorizes commonly encountered security weaknesses in hardware designs,
    including issues with security flow, privilege and access control, reset control,
    memory and storage, peripherals and on-chip fabric, and debugging and test [[1](#bib.bib1)].
    Commercial verification tools, such as JasperGold Security Path Verification,
    Mentor Questa Secure Check, and Tortuga Logic Radix, have been proposed for SoC
    security verification [[20](#bib.bib20), [8](#bib.bib8), [10](#bib.bib10)]. However,
    the effectiveness of these tools depends on the quality of the security properties.
    Therefore, these properties are critical components that provide resources for
    detecting vulnerabilities during SoC development.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现代计算系统建立在系统芯片（SoC）之上，因为它们通过使用多个知识产权（IP）核心提供了高水平的集成[[24](#bib.bib24)]。然而，这也带来了新的安全挑战，因为一个IP核心中的漏洞可能会影响整个系统的安全[[21](#bib.bib21)]。虽然软件和固件补丁可以解决许多硬件安全漏洞，但有些漏洞无法修复，需要在设计过程中进行
    extensive 安全保障。因此，硬件安全验证对确保设计的安全性和可靠性至关重要。MITRE的硬件通用弱点枚举（CWE）对硬件设计中常见的安全弱点进行了分类，包括安全流、特权和访问控制、复位控制、内存和存储、外围设备和片上结构、调试和测试[[1](#bib.bib1)]。商业验证工具，如JasperGold安全路径验证、Mentor
    Questa Secure Check和Tortuga Logic Radix，已被提出用于SoC安全验证[[20](#bib.bib20), [8](#bib.bib8),
    [10](#bib.bib10)]。然而，这些工具的有效性取决于安全属性的质量。因此，这些属性是提供资源以在SoC开发过程中检测漏洞的关键组件。
- en: '![Refer to caption](img/989a26ee78d8e563454cac07b560f53d.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![参见标题](img/989a26ee78d8e563454cac07b560f53d.png)'
- en: 'Figure 1: Security property generation from documents.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：来自文档的安全属性生成。
- en: 'Generating appropriate security properties for each specific design can be
    a challenge. Traditional approaches, which often require the experience of developers,
    are time-intensive and non-robust [[21](#bib.bib21)]. Hence, a technique that
    is capable of systematically generating security properties for SoCs is needed
    to address this issue. On the other hand, major organizations such as RISC-V,
    MSP, and Arduino usually provide documentation describing processor functionalities
    and operation behaviors with explicit details [[7](#bib.bib7), [9](#bib.bib9)].
    Therefore, as shown in Figure [1](#S1.F1 "Figure 1 ‣ I Introduction ‣ Unlocking
    Hardware Security Assurance: The Potential of LLMs"), we reason that it is possible
    to generate numerous security properties by analyzing operation details from these
    documents, which can be converted into security constraints at the Register-Transfer
    Level (RTL). We aim to achieve this by creating a language-based machine learning
    framework to extract essential information from the documentation.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '为每个特定设计生成适当的安全属性可能是一个挑战。传统方法通常需要开发者的经验，既耗时又不够稳健[[21](#bib.bib21)]。因此，需要一种能够系统生成SoC安全属性的技术来解决这个问题。另一方面，像RISC-V、MSP和Arduino这样的主要组织通常提供描述处理器功能和操作行为的详细文档[[7](#bib.bib7),
    [9](#bib.bib9)]。因此，如图[1](#S1.F1 "Figure 1 ‣ I Introduction ‣ Unlocking Hardware
    Security Assurance: The Potential of LLMs")所示，我们推测可以通过分析这些文档中的操作细节生成大量安全属性，这些属性可以转化为寄存器传输级别（RTL）的安全约束。我们旨在通过创建一个基于语言的机器学习框架来从文档中提取关键信息。'
- en: 'Existing research in the biomedical field, such as BioBERT, has shown that
    text and documents can provide essential information in specialized domains to
    fine-tune the general Bidirectional Encoder Representations from Transformers
    (BERT) language model for text generation and phrase classification [[15](#bib.bib15),
    [35](#bib.bib35)]. Similarly, security property-related sentences in hardware
    documentation also furnish domain-specific terminology. Hence, we intend to apply
    this concept to the hardware security domain and develop an automatic security
    property extraction framework built on the BERT model, which is fine-tuned with
    domain-specific data, as shown in Figure [2](#S1.F2 "Figure 2 ‣ I Introduction
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs"). Our aim is to
    utilize this framework to extract each sentence in the documentation that can
    be potentially converted into security properties. To this end, we developed a
    fully automatic hardware security property generator called NLP-based Security
    Property Generator (NSPG). NSPG applies data augmentation and masked language
    model to enhance the dataset and improve the learning process. We compared the
    output of NSPG with the expected information flow policies of these designs and
    found that the generated specifications were accurate and comprehensive, and if
    followed, would protect the designs from known and potential future attacks. To
    the best of our knowledge, NSPG is the first property generation technique utilizing
    the NLP model and SoC documentation to generate security properties for hardware
    designs. Our contributions are summarized as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '现有的生物医学领域研究，如BioBERT，已显示文本和文档能够在专业领域提供重要信息，从而微调通用的双向编码器表示（BERT）语言模型，用于文本生成和短语分类[[15](#bib.bib15),
    [35](#bib.bib35)]。类似地，硬件文档中的安全属性相关句子也提供了领域特定的术语。因此，我们打算将这一概念应用于硬件安全领域，并开发一个基于BERT模型的自动安全属性提取框架，该模型经过领域特定数据的微调，如图[2](#S1.F2
    "Figure 2 ‣ I Introduction ‣ Unlocking Hardware Security Assurance: The Potential
    of LLMs")所示。我们的目标是利用这个框架提取文档中每一个可能转化为安全属性的句子。为此，我们开发了一种完全自动的硬件安全属性生成器，称为基于NLP的安全属性生成器（NSPG）。NSPG应用数据增强和掩码语言模型来增强数据集并改善学习过程。我们将NSPG的输出与这些设计的预期信息流策略进行了比较，发现生成的规范准确且全面，如果遵循，可以保护设计免受已知和潜在的未来攻击。尽我们所知，NSPG是首个利用NLP模型和SoC文档生成硬件设计安全属性的属性生成技术。我们的贡献总结如下：'
- en: '1.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: We propose an NLP-based security property generation framework, NSPG, to automatically
    mine security property-related sentences from the SoC documents, assisting in
    the detection of security vulnerabilities in RTL.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们提出了一种基于NLP的安全属性生成框架NSPG，自动从SoC文档中挖掘安全属性相关句子，以帮助检测RTL中的安全漏洞。
- en: '2.'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: We present a complete end-to-end framework with hardware domain-specific knowledge
    and data modification techniques to improve the performance of the proposed HS-BERT
    model by analyzing hardware documentation.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们提出了一个完整的端到端框架，结合了硬件领域特定知识和数据修改技术，通过分析硬件文档来提升所提HS-BERT模型的性能。
- en: '3.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: NSPG is evaluated on five unseen OpenTitan design documents and all generated
    security properties are validated. Furthermore, we apply these properties to search
    for security violations in the OpenTitan design used in Hack@DAC 2022 and identify
    eight bugs [[3](#bib.bib3)].
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NSPG在五份未见过的OpenTitan设计文档上进行评估，所有生成的安全属性均已验证。此外，我们将这些属性应用于Hack@DAC 2022中使用的OpenTitan设计以寻找安全漏洞，并发现了八个漏洞[[3](#bib.bib3)]。
- en: '4.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '4.'
- en: When compared with ChatGPT, NSPG shows 15% improvement on identifying security
    properties in OpenTitan SoC documentation [[4](#bib.bib4)].
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与ChatGPT相比，NSPG在识别OpenTitan SoC文档中的安全属性方面提高了15%[[4](#bib.bib4)]。
- en: '![Refer to caption](img/49beafa09f2d8e3218c4893d40ee84c2.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![请参见说明](img/49beafa09f2d8e3218c4893d40ee84c2.png)'
- en: 'Figure 2: Domain-specific BERT model.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图2：领域特定的BERT模型。
- en: 'The rest of this paper is organized as follows. Section [II](#S2 "II Background
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs") introduces the
    background of hardware security, and techniques in the NLP domain. Section [III](#S3
    "III Can Leveraging Large Language Models Foster Hardware Security Assurance?
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs") includes the
    proposed technique. Section [IV](#S4 "IV OpenTitan SoC and Threat Model ‣ Unlocking
    Hardware Security Assurance: The Potential of LLMs") introduces the SoC architecture,
    threat model, and security objectives used in this work. Section [V](#S5 "V Experiments
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs") demonstrates
    the evaluation of the proposed technique. Section [VI](#S6 "VI Discussion ‣ Unlocking
    Hardware Security Assurance: The Potential of LLMs") discusses the capabilities
    of the proposed technique. Section [VII](#S7 "VII Related Work ‣ Unlocking Hardware
    Security Assurance: The Potential of LLMs") presents the related works on security
    property generation. Finally, Section [VIII](#S8 "VIII Conclusion ‣ Unlocking
    Hardware Security Assurance: The Potential of LLMs") concludes our paper.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '本文的其余部分组织如下。第[II](#S2 "II Background ‣ Unlocking Hardware Security Assurance:
    The Potential of LLMs")节介绍了硬件安全的背景以及NLP领域的技术。第[III](#S3 "III Can Leveraging Large
    Language Models Foster Hardware Security Assurance? ‣ Unlocking Hardware Security
    Assurance: The Potential of LLMs")节包括所提出的技术。第[IV](#S4 "IV OpenTitan SoC and Threat
    Model ‣ Unlocking Hardware Security Assurance: The Potential of LLMs")节介绍了本工作中使用的SoC架构、威胁模型和安全目标。第[V](#S5
    "V Experiments ‣ Unlocking Hardware Security Assurance: The Potential of LLMs")节展示了对所提出技术的评估。第[VI](#S6
    "VI Discussion ‣ Unlocking Hardware Security Assurance: The Potential of LLMs")节讨论了所提出技术的能力。第[VII](#S7
    "VII Related Work ‣ Unlocking Hardware Security Assurance: The Potential of LLMs")节介绍了安全属性生成的相关工作。最后，第[VIII](#S8
    "VIII Conclusion ‣ Unlocking Hardware Security Assurance: The Potential of LLMs")节总结了我们的论文。'
- en: II Background
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: II 背景
- en: In this section, we will provide some background on hardware security verification,
    NLP, and the SoC designs used for developing the proposed NSPG framework.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将提供有关硬件安全验证、NLP和用于开发建议的NSPG框架的SoC设计的一些背景信息。
- en: II-A Hardware Security
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: II-A 硬件安全
- en: II-A1 Hardware Security Verification
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: II-A1 硬件安全验证
- en: 'A plethora of techniques have been developed to ensure the security of software
    applications, either through source code or binary operations [[21](#bib.bib21)].
    However, the availability of commercial Electronic Design Automation (EDA) tools,
    which are specifically crafted for hardware security, is rare. Hence, recently,
    researchers have focused on developing tools and methodologies to ensure hardware
    security. Nevertheless, all existing security verification techniques need robust
    security properties to validate the trustworthiness and robustness of the RTL [[21](#bib.bib21)].
    More details on hardware security verification approaches will be presented in
    Section [VII-A](#S7.SS1 "VII-A Hardware Security Verification Approaches ‣ VII
    Related Work ‣ Unlocking Hardware Security Assurance: The Potential of LLMs").'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '为确保软件应用的安全性，已经开发了大量的技术，涉及源代码或二进制操作 [[21](#bib.bib21)]。然而，专为硬件安全设计的商业电子设计自动化（EDA）工具的可用性却很少。因此，最近，研究人员集中于开发确保硬件安全的工具和方法。然而，所有现有的安全验证技术都需要强大的安全属性来验证RTL的可信度和稳健性 [[21](#bib.bib21)]。有关硬件安全验证方法的更多细节将在第[VII-A](#S7.SS1
    "VII-A Hardware Security Verification Approaches ‣ VII Related Work ‣ Unlocking
    Hardware Security Assurance: The Potential of LLMs")节中介绍。'
- en: '![Refer to caption](img/35100ddac7b77c60aab5744e2ff6fc27.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![参见标题](img/35100ddac7b77c60aab5744e2ff6fc27.png)'
- en: 'Figure 3: Proposed NSPG framework.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图3：建议的NSPG框架。
- en: II-A2 Hardware Design Documentation
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: II-A2 硬件设计文档
- en: In order to enhance the comprehensibility of the SoCs, it is imperative to have
    access to thorough SoC documentation, considering their complexity and dependence
    on reusable components. However, documentation is generally considered to provide
    limited value for any scientific analysis, and, thus overlooked by researchers.
    In reality, technical documentation is an important part of the overall product
    and should be prioritized along with the design and implementation stages. In
    more than one instance, insufficient documentation has been regarded as the major
    reason for design failure [[16](#bib.bib16)]. Additionally, various tools have
    been introduced to generate system documentation more efficiently. For instance,
    “Javadoc” and “CppDoc” generate API documentation in HTML from the comments in
    the source code [[5](#bib.bib5), [2](#bib.bib2)].
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高 SoCs 的可理解性，必须获得详尽的 SoC 文档，考虑到它们的复杂性和对可重用组件的依赖。然而，文档通常被认为对任何科学分析的价值有限，因此被研究人员忽视。实际上，技术文档是整体产品的重要组成部分，应与设计和实施阶段一起优先考虑。在多种情况下，不足的文档被认为是设计失败的主要原因[[16](#bib.bib16)]。此外，已经引入了各种工具，以更高效地生成系统文档。例如，“Javadoc”和“CppDoc”从源代码中的注释生成
    HTML 格式的 API 文档[[5](#bib.bib5), [2](#bib.bib2)]。
- en: II-A3 Hardware Security Property
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: II-A3 硬件安全属性
- en: The specification of security properties usually varies from the method of security
    analysis, producing specifications that are unique to the selected verification
    tools or models [[38](#bib.bib38)].
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 安全属性的规范通常与安全分析方法有所不同，生成的规范是特定于所选验证工具或模型的[[38](#bib.bib38)]。
- en: 'Listing 1: Security Property and SystemVerilog Assertion'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '列表 1: 安全属性和 SystemVerilog 断言'
- en: Security  Property  Description:If  the  AES  unit  wants  to  finish  encryption/decryptionof  a  data  block  but  the  previous  output  data  has  notyet  been  read  by  the  processor,  AES  unit  is  stalled.SystemVerilog  Assertion:assert  property  ( (posedge
    clk) disable iff (rst)// Security Property aes.done |-> aes.out==\$past(aes.key)
    ) else // Error Message \$error("\%m  previous  key  has  not  been  read");
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 安全属性描述：如果 AES 单元想要完成数据块的加密/解密，但之前的输出数据尚未被处理器读取，则 AES 单元将被阻塞。SystemVerilog 断言：assert
    property ( (posedge clk) disable iff (rst) // 安全属性 aes.done |-> aes.out==\$past(aes.key)
    ) else // 错误信息 \$error("\%m 先前的密钥尚未被读取");
- en: 'Listing [1](#LST1 "Listing 1 ‣ II-A3 Hardware Security Property ‣ II-A Hardware
    Security ‣ II Background ‣ Unlocking Hardware Security Assurance: The Potential
    of LLMs") presents an example of SystemVerilog assertion based on the description
    of the security property. It shows that in order to generate an appropriate term
    for a verification mechanism, the descriptions of security properties must contain
    strong reasoning and details of the operation. Listing [2](#LST2 "Listing 2 ‣
    II-A3 Hardware Security Property ‣ II-A Hardware Security ‣ II Background ‣ Unlocking
    Hardware Security Assurance: The Potential of LLMs") shows a paragraph from the
    OpenTitan AES document [[4](#bib.bib4)]. The sentences marked in blue are security
    related.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '列表[1](#LST1 "Listing 1 ‣ II-A3 Hardware Security Property ‣ II-A Hardware Security
    ‣ II Background ‣ Unlocking Hardware Security Assurance: The Potential of LLMs")
    展示了一个基于安全属性描述的 SystemVerilog 断言示例。它表明，为了生成适合的验证机制术语，安全属性的描述必须包含强有力的推理和操作细节。列表[2](#LST2
    "Listing 2 ‣ II-A3 Hardware Security Property ‣ II-A Hardware Security ‣ II Background
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs") 显示了 OpenTitan
    AES 文档中的一段内容[[4](#bib.bib4)]。用蓝色标记的句子与安全相关。'
- en: 'Listing 2: A example paragraph in AES Document'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '列表 2: AES 文档中的一段示例'
- en: Also,  there  is  a  back-pressure  mechanism  for  theoutput  data. If  the  AES  unit  wants  to  finish  theencryption/decryption  of  a  data  block  but  the  previousoutput  data  has  not  yet  been  read  by  the  processor,the  AES  unit  is  stalled.  It  hangs  and  does  not  dropdata.  The  order  in  which  the  output  registers  are  readdoes  not  matter.  Every  output  register  must  be  readat  least  once  for  the  AES  unit  to  continue.
    This  isthe  default  behavior.  It  can  be  disabled  by  settingthe  MANUAL_OPERATION  bit  in  CTRL_SHADOWED  to  1.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，输出数据有一个反向压力机制。如果 AES 单元想要完成数据块的加密/解密，但之前的输出数据还未被处理器读取，AES 单元将会被阻塞。它会挂起而不丢弃数据。输出寄存器的读取顺序并不重要。每个输出寄存器必须至少被读取一次，以便
    AES 单元可以继续。这是默认行为。可以通过将 CTRL_SHADOWED 中的 MANUAL_OPERATION 位设置为 1 来禁用该功能。
- en: 'It is obvious that the security properties have more distinguished contexts,
    such as the usage of relation conjunctions and domain-specific terms, compared
    to other sentences in the paragraph. Therefore, it is possible to distinguish
    the security property-related sentences, which present precise definitions of
    the schematic, keywords of the processes, or relations between several entities.
    Hence, we can emphasize these aspects when fine-tuning the language model by enhancing
    and identifying the security property-related context in each sentence. Further
    details about the security property extraction techniques utilized in our framework
    will be presented in Section [I](#S3.T1 "TABLE I ‣ III Can Leveraging Large Language
    Models Foster Hardware Security Assurance? ‣ Unlocking Hardware Security Assurance:
    The Potential of LLMs").'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '显然，安全属性具有更为显著的上下文特征，例如使用关系连接词和领域特定术语，相较于段落中的其他句子。因此，可以区分出与安全属性相关的句子，这些句子呈现了示意图的精确定义、过程中的关键词或多个实体之间的关系。因此，我们可以在微调语言模型时，通过增强和识别每个句子中的安全属性相关上下文来强调这些方面。有关我们框架中利用的安全属性提取技术的更多细节将在第[I](#S3.T1
    "TABLE I ‣ III Can Leveraging Large Language Models Foster Hardware Security Assurance?
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs")节中介绍。'
- en: II-B Natural Language Processing
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: II-B 自然语言处理
- en: NLP is a field of study that focuses on applying computational techniques to
    understand, learn, and generate human language content. NLP plays a crucial role
    in various industries and has a wide range of applications, ranging from real-time
    translation and social media search engines to sentiment analysis [[26](#bib.bib26)].
    In this section, we will discuss the NLP facets that are integrated into NSPG.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 自然语言处理（NLP）是一个专注于应用计算技术来理解、学习和生成自然语言内容的研究领域。NLP在各个行业中发挥着重要作用，并具有广泛的应用，从实时翻译和社交媒体搜索引擎到情感分析[[26](#bib.bib26)]。在这一节中，我们将讨论集成到NSPG中的NLP方面。
- en: II-B1 BERT Model
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: II-B1 BERT模型
- en: Most state-of-the-art natural language models are built on transformer architectures,
    such as Bidirectional Encoder Representations from Transformers (BERT), which
    are effective at modeling long-range dependencies in text [[27](#bib.bib27)].
    These models utilize a multi-layer, multi-head self-attention mechanism, and contextual
    embeddings which allow for efficient parallel computation on GPUs [[23](#bib.bib23)].
    We utilize the BERT masked language model to comprehend the hardware documentation
    and BERT sequence classification model to extract the security property-related
    sentences.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数最先进的自然语言模型基于变压器架构，例如双向编码器表示（BERT），这些模型在文本中建模长程依赖关系方面表现出色[[27](#bib.bib27)]。这些模型利用了多层、多头自注意力机制和上下文嵌入，从而实现了在GPU上高效的并行计算[[23](#bib.bib23)]。我们利用BERT掩码语言模型来理解硬件文档，并使用BERT序列分类模型来提取与安全属性相关的句子。
- en: II-B2 Data Augmentation
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: II-B2 数据增强
- en: 'Data augmentation (DA) is a method of enhancing the diversity of training data
    without collecting more data. It involves adding modified copies of existing data
    or creating synthetic data to act as a regularizer and reducing overfitting during
    the training of machine learning models [[26](#bib.bib26)]. Since this is the
    first work that utilizes design documentation for hardware security, our data
    samples are limited to open-source documentation. Thus, we will apply DA approaches,
    as discussed in Section [III](#S3 "III Can Leveraging Large Language Models Foster
    Hardware Security Assurance? ‣ Unlocking Hardware Security Assurance: The Potential
    of LLMs").'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '数据增强（DA）是一种在不收集更多数据的情况下提高训练数据多样性的方法。它包括添加修改过的现有数据副本或创建合成数据，以作为正则化器，并在机器学习模型训练过程中减少过拟合[[26](#bib.bib26)]。由于这是首次利用设计文档进行硬件安全工作的研究，我们的数据样本仅限于开源文档。因此，我们将应用如第[III](#S3
    "III Can Leveraging Large Language Models Foster Hardware Security Assurance?
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs")节中讨论的数据增强方法。'
- en: II-B3 Masked Language Modeling
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: II-B3 掩码语言建模
- en: 'Masked Language Modeling (MLM) is a self-supervised learning method used in
    state-of-the-art BERT models, such as SciBERT or RoBERTa [[15](#bib.bib15), [23](#bib.bib23)].
    MLM is used to improve the ability to comprehend the context and relationships
    between each word in a sequence, such as the security property demonstrated in
    Listing [1](#LST1 "Listing 1 ‣ II-A3 Hardware Security Property ‣ II-A Hardware
    Security ‣ II Background ‣ Unlocking Hardware Security Assurance: The Potential
    of LLMs"). We will utilize MLM to modify the sequences from the document and provide
    additional data for fine-tuning.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '掩码语言建模（MLM）是一种自监督学习方法，广泛应用于最先进的 BERT 模型，如 SciBERT 或 RoBERTa [[15](#bib.bib15),
    [23](#bib.bib23)]。MLM 用于提高理解上下文和序列中每个单词之间关系的能力，例如在列表 [1](#LST1 "Listing 1 ‣ II-A3
    Hardware Security Property ‣ II-A Hardware Security ‣ II Background ‣ Unlocking
    Hardware Security Assurance: The Potential of LLMs") 中展示的安全属性。我们将利用 MLM 修改文档中的序列，并提供额外的数据以进行微调。'
- en: II-B4 Sequence Classification Modeling
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: II-B4 序列分类建模
- en: Sequence Classification Modeling (SCM) divides sequences into predefined sentiment
    categories [[23](#bib.bib23)]. Our proposed framework, NSPG, will apply this model
    to categorize each sequence of sentences and identify if they belong to security
    property or non-property descriptions in the documents.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 序列分类建模（SCM）将序列划分为预定义的情感类别 [[23](#bib.bib23)]。我们提出的框架 NSPG 将应用此模型对每个句子序列进行分类，并确定它们是否属于文档中的安全属性或非属性描述。
- en: III Can Leveraging Large Language Models Foster Hardware Security Assurance?
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: III 大型语言模型的应用是否能促进硬件安全保障？
- en: 'TABLE I: Data Augmentation for sentence in documents. The first row shows the
    original sentence in the document, the rest shows an example sentence after the
    random swap, random deletion, synonym replacement, and random insertion.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 表 I：文档中句子的数据增强。第一行显示文档中的原始句子，其余行展示在随机交换、随机删除、同义词替换和随机插入后的示例句子。
- en: Sentence Original If some hang condition were to occur when in this mode, the
    main state machine debug register should be read. Original with RS If some hang
    condition were to occur, the main state machine debug register should be read
    when in this mode. Original with RD If [some] hang condition were to occur when
    in this mode, the main state machine debug register should be read. Original with
    SR If some hang condition were to happen when in this mode, the main state machine
    debug register should be read. Original with RI If some hang condition were to
    occur when in this mode, the main state machine debug register should be read
    [immediately].
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 句子 原始 如果在这种模式下发生某种挂起状态，应读取主状态机调试寄存器。原始与 RS 如果发生某种挂起状态，在这种模式下应读取主状态机调试寄存器。原始与
    RD 如果 [某些] 挂起状态发生在这种模式下，应读取主状态机调试寄存器。原始与 SR 如果在这种模式下发生某种挂起状态，应读取主状态机调试寄存器。原始与
    RI 如果在这种模式下发生某种挂起状态，应立即读取主状态机调试寄存器。
- en: 'In this section, we will demonstrate the details of each process flow in the
    proposed NSPG framework, as shown in Figure [3](#S2.F3 "Figure 3 ‣ II-A1 Hardware
    Security Verification ‣ II-A Hardware Security ‣ II Background ‣ Unlocking Hardware
    Security Assurance: The Potential of LLMs"). The first step involves comprehending
    the context of the hardware domain from the hardware design documentation of OpenTitan
    and RISC-V, and generating the hardware security-specific BERT model. Next, we
    alter them using data augmentation and hardware domain-specific modification to
    create an enhanced dataset for fine-tuning the pre-trained BERT model. We compare
    the performance of various modified datasets used to fine-tune the classification
    model and select the best one for security property extraction. The details of
    the data augmentation and pre-training hardware-domain BERT will be discussed
    in detail in Section [III-B](#S3.SS2 "III-B Comprehending the Hardware Domain
    ‣ III Can Leveraging Large Language Models Foster Hardware Security Assurance?
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs"). The domain-specific
    data modification process and security property classification will be described
    in detail in Section [III-C](#S3.SS3 "III-C Security Property Classification ‣
    III Can Leveraging Large Language Models Foster Hardware Security Assurance? ‣
    Unlocking Hardware Security Assurance: The Potential of LLMs").'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '在本节中，我们将展示所提出的NSPG框架中每个过程流程的详细信息，如图[3](#S2.F3 "Figure 3 ‣ II-A1 Hardware Security
    Verification ‣ II-A Hardware Security ‣ II Background ‣ Unlocking Hardware Security
    Assurance: The Potential of LLMs")所示。第一步是理解OpenTitan和RISC-V硬件设计文档中的硬件领域背景，并生成特定于硬件安全的BERT模型。接下来，我们使用数据增强和特定于硬件领域的修改来改变这些模型，以创建一个增强的数据集，用于微调预训练的BERT模型。我们比较了用于微调分类模型的各种修改数据集的性能，并选择最佳的数据集用于安全属性提取。数据增强和预训练硬件领域BERT的详细信息将在[III-B](#S3.SS2
    "III-B Comprehending the Hardware Domain ‣ III Can Leveraging Large Language Models
    Foster Hardware Security Assurance? ‣ Unlocking Hardware Security Assurance: The
    Potential of LLMs")节中详细讨论。特定领域数据修改过程和安全属性分类将在[III-C](#S3.SS3 "III-C Security Property
    Classification ‣ III Can Leveraging Large Language Models Foster Hardware Security
    Assurance? ‣ Unlocking Hardware Security Assurance: The Potential of LLMs")节中详细描述。'
- en: III-A Hardware Documentation Dataset
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: III-A 硬件文档数据集
- en: 'The sentences used for training and fine-tuning are extracted from various
    documentation and paragraphs similar to the example shown in Listing [2](#LST2
    "Listing 2 ‣ II-A3 Hardware Security Property ‣ II-A Hardware Security ‣ II Background
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs"). We create three
    datasets, as follows: (1) 15583 sentences from OpenTitan, RISC-V, OpenRISC, MIPS,
    and OpenSPARC documentation are used for pre-training the BERT model with MLM.
    This dataset will be called ${\mathcal{}{D}}_{pre}$.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '用于训练和微调的句子是从各种文档和段落中提取的，这些文档和段落类似于[2](#LST2 "Listing 2 ‣ II-A3 Hardware Security
    Property ‣ II-A Hardware Security ‣ II Background ‣ Unlocking Hardware Security
    Assurance: The Potential of LLMs")中所示的示例。我们创建了三个数据集，如下所示：（1）从OpenTitan、RISC-V、OpenRISC、MIPS和OpenSPARC文档中提取的15583个句子用于用MLM预训练BERT模型。这个数据集将被称为${\mathcal{}{D}}_{pre}$。'
- en: III-B Comprehending the Hardware Domain
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: III-B 理解硬件领域
- en: 'First, the language model needs to recognize the context differences between
    security properties and regular sentences. General BERT model has been applied
    in various industries and has a wide range of applications, ranging from real-time
    translation and social media search engines to sentiment analysis [[26](#bib.bib26)].
    Training the BERT model with its corresponding MLM could augment the performance
    of the language model by introducing contextual embeddings of the specific domain.
    As shown in Figure [4](#S3.F4 "Figure 4 ‣ III-B Comprehending the Hardware Domain
    ‣ III Can Leveraging Large Language Models Foster Hardware Security Assurance?
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs"), during training,
    a certain percentage of tokens are randomly selected and replaced with a special
    token ([MASK] in Masked sentence). After training, the fine-tuned MLM will predict
    the original tokens based on the context provided by the remaining unmasked tokens,
    thus completing the in-domain sentence with appropriate phrases. The primary objective
    is to minimize the cross-entropy loss between the predicted tokens and their original
    counterparts. For instance, in SciBERT and RoBERTa, by default, 15% of the input
    tokens are chosen for masking, with 80% probability of being replaced by [MASK],
    10% left unchanged and 10% randomly replaced by another token from the vocabulary [[15](#bib.bib15),
    [23](#bib.bib23)]. Therefore, pre-training BERT model with hardware domain documentation
    will help it learn to represent the in-domain words based on the context of the
    other words in the sentence. However, since we have limited data samples for hardware
    domain-specific documentation (compared to 1.14M papers from Semantic Scholar
    to train Sci-Bert), data augmentation is needed to improve the dataset[[15](#bib.bib15)].'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '首先，语言模型需要识别安全属性和普通句子之间的上下文差异。通用的BERT模型已在多个行业中应用，并且具有广泛的应用范围，从实时翻译和社交媒体搜索引擎到情感分析[[26](#bib.bib26)]。通过用相应的MLM训练BERT模型，可以通过引入特定领域的上下文嵌入来增强语言模型的性能。如图[4](#S3.F4
    "Figure 4 ‣ III-B Comprehending the Hardware Domain ‣ III Can Leveraging Large
    Language Models Foster Hardware Security Assurance? ‣ Unlocking Hardware Security
    Assurance: The Potential of LLMs")所示，在训练过程中，某些百分比的标记会被随机选择并替换为特殊标记（[MASK]在掩码句子中）。训练完成后，微调的MLM将根据剩余未掩盖标记提供的上下文预测原始标记，从而用适当的短语完成领域内句子。主要目标是最小化预测标记与原始标记之间的交叉熵损失。例如，在SciBERT和RoBERTa中，默认情况下，15%的输入标记会被选择进行掩码，其中80%被替换为[MASK]，10%保持不变，10%随机替换为词汇表中的其他标记[[15](#bib.bib15),
    [23](#bib.bib23)]。因此，用硬件领域文档进行BERT模型的预训练将有助于其基于句子中其他单词的上下文学习领域内词汇。然而，由于我们在硬件领域特定文档中的数据样本有限（相比于用1.14M篇文献训练Sci-Bert），需要数据增强以改善数据集[[15](#bib.bib15)]。'
- en: '![Refer to caption](img/f810cc6cc575732d4b85351fdf42274d.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/f810cc6cc575732d4b85351fdf42274d.png)'
- en: 'Figure 4: Masked language model.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '图4: 掩码语言模型。'
- en: III-B1 Data Augmentation for Hardware Documentation
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: III-B1 硬件文档的数据增强
- en: Many DA techniques have been proposed for NLP, including rule-based manipulations
    and generative approaches. Ideal DA techniques should be implemented seamlessly
    in order to further improve model performance. Techniques that use trained models
    are more expensive to implement. However, they introduce more variance in data,
    thereby resulting in enhanced model performance. Although model-based techniques
    are designed to boost performance in downstream tasks, they are difficult to develop
    and use. This may result in overfitting or performance degradation when trained
    on out-of-domain examples. DA is a key component for enhancing the quantity of
    in-domain data samples, which involves generating two correlated views of a data
    point in order to increase the amount and diversity of training data. Although
    it is important to ensure the diversity of the generated data, the structure,
    and synonym of the original sentence should not be modified.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 许多数据增强（DA）技术已被提出用于自然语言处理（NLP），包括基于规则的操作和生成性方法。理想的DA技术应该无缝实现，以进一步提高模型性能。使用训练模型的技术实现成本更高。然而，它们引入了更多的数据变异，从而提升了模型性能。尽管基于模型的技术旨在提高下游任务的性能，但它们的开发和使用较为困难。这可能导致过拟合或在域外样本上性能下降。DA是增强领域内数据样本数量的关键组成部分，它涉及生成数据点的两个相关视图，以增加训练数据的数量和多样性。尽管确保生成数据的多样性很重要，但原句的结构和同义词不应被修改。
- en: 'Most of the security properties involve the behaviors of two or more entities
    in the design. Therefore, the context of operational relations and hardware terminology
    needs to be preserved in fine-tuning MLM. We need to avoid the essential information
    of the operating entities and only apply DA to swap or replace the rest of the
    tokens in the sentence. We analyze four DA techniques: random swap, random deletion,
    synonym replacement, and random insertion. These are the most common data augmentation
    technique available for NLP model [[26](#bib.bib26)]. The closest sentiment texts
    are provided by Wordnet, a large lexical database of English, where synonyms are
    interconnected by means of conceptual-semantic, to generate the augmented data [[40](#bib.bib40)].
    The tokens in the texts are modified in the following ways to generate the augmented
    data. Table [I](#S3.T1 "TABLE I ‣ III Can Leveraging Large Language Models Foster
    Hardware Security Assurance? ‣ Unlocking Hardware Security Assurance: The Potential
    of LLMs") presents examples of the techniques applied to a sentence from the DA
    task, as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '大多数安全属性涉及设计中两个或多个实体的行为。因此，在微调 MLM 时需要保留操作关系和硬件术语的上下文。我们需要避免操作实体的基本信息，只对句子中其余的标记应用
    DA。我们分析了四种 DA 技术：随机交换、随机删除、同义词替换和随机插入。这些是 NLP 模型中最常见的数据增强技术 [[26](#bib.bib26)]。最接近的情感文本由
    WordNet 提供，这是一个大型英语词汇数据库，其中同义词通过概念语义进行互联，以生成增强数据 [[40](#bib.bib40)]。文本中的标记以以下方式进行修改以生成增强数据。表 [I](#S3.T1
    "TABLE I ‣ III Can Leveraging Large Language Models Foster Hardware Security Assurance?
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs")展示了应用于 DA 任务中句子的技术示例，如下所示：'
- en: 'Random Swap (RS): We exchange the positions of two randomly selected phrases
    such as nouns and conjunctions, while maintaining the operation behavior and the
    content of the original sentence. For example, as evident from Table [I](#S3.T1
    "TABLE I ‣ III Can Leveraging Large Language Models Foster Hardware Security Assurance?
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs"), RS takes parts
    of the sentence conjunction “when in this mode” and places them into a random
    spot, which is either before or at end of a conjunction in the original sentence.
    In case the sentence does not have multiple conjunctions, no augmented sentence
    will be generated.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '随机交换（RS）：我们交换两个随机选择的短语的位置，例如名词和连词，同时保持操作行为和原始句子的内容。例如，正如表 [I](#S3.T1 "TABLE
    I ‣ III Can Leveraging Large Language Models Foster Hardware Security Assurance?
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs")中所示，RS 将句子中的连词“when
    in this mode”的部分放到随机位置，可能是在原始句子中连词的前面或末尾。如果句子中没有多个连词，将不会生成增强句子。'
- en: 'Random Deletion (RD): To keep the essential context, we only delete one of
    the adjectives, determiners, or adverbs available in the sentence, which does
    not impact the operation descriptions. For example, RD removes the definition
    term “some” from the sentence in Table [I](#S3.T1 "TABLE I ‣ III Can Leveraging
    Large Language Models Foster Hardware Security Assurance? ‣ Unlocking Hardware
    Security Assurance: The Potential of LLMs"). When these terms are not found in
    the sentence, RD will not be applied.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '随机删除（RD）：为了保留基本上下文，我们只删除句子中的一个形容词、限定词或副词，这不会影响操作描述。例如，RD 从表 [I](#S3.T1 "TABLE
    I ‣ III Can Leveraging Large Language Models Foster Hardware Security Assurance?
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs")中的句子里移除了定义词“some”。当句子中未发现这些词时，将不会应用
    RD。'
- en: 'Synonym Replacement (SR): In order to preserve the hardware components described
    in the sentence, we only replace verbs in the sentence with their closest synonyms
    obtained from the WordNet database. It utilizes the database to find the closest
    semantic words for the sentence and replace the verb with the new ones. For example,
    in Table [I](#S3.T1 "TABLE I ‣ III Can Leveraging Large Language Models Foster
    Hardware Security Assurance? ‣ Unlocking Hardware Security Assurance: The Potential
    of LLMs"), “occur” is replaced with its synonym “happen”, and the sentence still
    presents the same operation. When the sentence only contains verbs such as “is”
    or “are”, no augmented sentence will be generated.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '同义词替换（SR）：为了保留句子中描述的硬件组件，我们只用从 WordNet 数据库中获得的最接近的同义词替换句中的动词。它利用数据库找到句子的最接近的语义词，并用新的动词进行替换。例如，在表 [I](#S3.T1
    "TABLE I ‣ III Can Leveraging Large Language Models Foster Hardware Security Assurance?
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs")中，“occur” 被替换为其同义词“happen”，句子仍然呈现相同的操作。当句子仅包含动词如“is”或“are”时，将不会生成增强句子。'
- en: 'Random Insertion (RI): For this operation, we first summarize all the adverbs
    that are used in the documentation, and randomly select one to insert into the
    sentence near verbs. To avoid altering the context, we randomly choose the most
    common adverb used in the documents. For instance, insert the adverb ’immediately’
    before or after a randomly selected verb in the sentence, as shown in Table [I](#S3.T1
    "TABLE I ‣ III Can Leveraging Large Language Models Foster Hardware Security Assurance?
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs").'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '随机插入（RI）：对于这一操作，我们首先总结文档中使用的所有副词，然后随机选择一个副词插入到接近动词的句子中。为了避免改变上下文，我们随机选择文档中最常用的副词。例如，将副词“immediately”插入到句子中一个随机选择的动词前面或后面，如表[I](#S3.T1
    "TABLE I ‣ III Can Leveraging Large Language Models Foster Hardware Security Assurance?
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs")所示。'
- en: Each method tends to introduce diversity in the original sentence and increase
    possible word usage, thereby reducing data overfitting and boosting the generalization
    ability of the model. We train four BERT models using different augmented data
    (in combination with the original data) and evaluate their performance to determine
    the best model.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 每种方法都倾向于在原始句子中引入多样性，增加可能的词汇使用，从而减少数据过拟合，提高模型的泛化能力。我们使用不同的增强数据（结合原始数据）训练了四个 BERT
    模型，并评估它们的性能以确定最佳模型。
- en: III-B2 Pre-training BERT with MLM
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: III-B2 使用 MLM 对 BERT 进行预训练
- en: 'TABLE II: The performances of HS-BERT models with the original sentence from
    ${\mathcal{}{D}}_{pre}$ and after the random swap, random deletion, synonym replacement,
    and random insertion.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 表 II：HS-BERT 模型在使用来自 ${\mathcal{}{D}}_{pre}$ 的原始句子以及经过随机交换、随机删除、同义词替换和随机插入后的表现。
- en: Dataset Training Samples Runtime Perplexity Original Documents 12472 57 mins
    6.018 Original & RS 24065 109 mins 5.018 Original & RD 24946 114 mins 5.046 Original
    & SR 24208 110 mins 5.029 Original & RI 24931 113 mins 4.795
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集 训练样本 运行时间 困惑度 原始文档 12472 57 分钟 6.018 原始 & RS 24065 109 分钟 5.018 原始 & RD
    24946 114 分钟 5.046 原始 & SR 24208 110 分钟 5.029 原始 & RI 24931 113 分钟 4.795
- en: 'The purpose of MLM is to understand the detail of each sentence demonstrated
    in the document and predict the masked content. Hence, we will select the model
    having the lowest perplexity, where a lower score indicates that the model has
    a better comprehension of the hardware domain and prediction of the masked word
    in the in-domain sentences [[41](#bib.bib41)]. We split the samples from ${\mathcal{}{D}}_{pre}$
    into training and validation datasets with a ratio of 80% and 20%. Each model
    is trained with samples from the OpenTitan, RISC-V, OpenRISC, MIPS, and OpenSPARC
    documentation, which consist of 12473 sentences and additional data from the DA
    task. Table [II](#S3.T2 "TABLE II ‣ III-B2 Pre-training BERT with MLM ‣ III-B
    Comprehending the Hardware Domain ‣ III Can Leveraging Large Language Models Foster
    Hardware Security Assurance? ‣ Unlocking Hardware Security Assurance: The Potential
    of LLMs") shows the runtime, and perplexity for each DA approach, as described
    in Section [III-B1](#S3.SS2.SSS1 "III-B1 Data Augmentation for Hardware Documentation
    ‣ III-B Comprehending the Hardware Domain ‣ III Can Leveraging Large Language
    Models Foster Hardware Security Assurance? ‣ Unlocking Hardware Security Assurance:
    The Potential of LLMs"). Note that the runtime differences are caused by different
    numbers of augmented data samples since the operation details of original sentences
    need to be preserved. We evaluate each pre-trained BERT model with the validation
    dataset consisting of 3112 sentences. As shown in Table [II](#S3.T2 "TABLE II
    ‣ III-B2 Pre-training BERT with MLM ‣ III-B Comprehending the Hardware Domain
    ‣ III Can Leveraging Large Language Models Foster Hardware Security Assurance?
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs"), the DA task
    significantly improves the performance of the BERT model comprehension (lower
    perplexity) with scalable runtime increase. Random insertion operation performs
    the best among all four approaches with a perplexity score of 5. Therefore, we
    use the BERT model pre-trained with data from RI for further processes. This BERT
    model will be called Hardware Security-specific BERT (HS-BERT).'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 'MLM 的目的是理解文档中每个句子的细节，并预测被掩盖的内容。因此，我们将选择困惑度最低的模型，分数越低表示模型对硬件领域的理解和对掩盖词的预测能力越好[[41](#bib.bib41)]。我们将样本从
    ${\mathcal{}{D}}_{pre}$ 按 80% 和 20% 的比例拆分为训练集和验证集。每个模型都使用来自 OpenTitan、RISC-V、OpenRISC、MIPS
    和 OpenSPARC 文档的样本进行训练，这些文档包括 12473 个句子，以及 DA 任务的额外数据。表 [II](#S3.T2 "TABLE II ‣
    III-B2 Pre-training BERT with MLM ‣ III-B Comprehending the Hardware Domain ‣
    III Can Leveraging Large Language Models Foster Hardware Security Assurance? ‣
    Unlocking Hardware Security Assurance: The Potential of LLMs") 显示了每种 DA 方法的运行时间和困惑度，如第
    [III-B1](#S3.SS2.SSS1 "III-B1 Data Augmentation for Hardware Documentation ‣ III-B
    Comprehending the Hardware Domain ‣ III Can Leveraging Large Language Models Foster
    Hardware Security Assurance? ‣ Unlocking Hardware Security Assurance: The Potential
    of LLMs") 节所述。请注意，运行时间差异是由于不同数量的增强数据样本造成的，因为需要保留原句的操作细节。我们使用包含 3112 个句子的验证集对每个预训练的
    BERT 模型进行评估。如表 [II](#S3.T2 "TABLE II ‣ III-B2 Pre-training BERT with MLM ‣ III-B
    Comprehending the Hardware Domain ‣ III Can Leveraging Large Language Models Foster
    Hardware Security Assurance? ‣ Unlocking Hardware Security Assurance: The Potential
    of LLMs") 所示，DA 任务显著提高了 BERT 模型的理解能力（困惑度降低），且运行时间可扩展性增加。在所有四种方法中，随机插入操作的表现最佳，困惑度分数为
    5。因此，我们使用基于 RI 数据预训练的 BERT 模型进行进一步处理。该 BERT 模型将被称为硬件安全专用 BERT (HS-BERT)。'
- en: III-C Security Property Classification
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: III-C 安全属性分类
- en: 'TABLE III: Sentence pre-processing methods and examples.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 表 III：句子预处理方法及示例。
- en: Sentence Original If KEYMGR is at the conclusion of the operation, KEYMGR.CTRL.STATUS
    stays in the same state, begins again. Verb Swapping If KEYMGR is at the conclusion
    of the operation, KEYMGR.CTRL.STATUS [remain] in the same state, [starts] again.
    Noun Swapping If [condition] is at the conclusion of the operation, [register]
    stays in the same state, begins again. Fragment Removal If KEYMGR is at the conclusion
    of the operation, KEYMGR.CTRL.STATUS stays in the same state. [ begins again.]
    Fragment Addition If KEYMGR is at the conclusion of the operation, KEYMGR.CTRL.STATUS
    stays in the same state, [system sampling] begins again.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 句子原文 如果 KEYMGR 在操作结束时，KEYMGR.CTRL.STATUS 保持相同状态，再次开始。 动词互换 如果 KEYMGR 在操作结束时，KEYMGR.CTRL.STATUS
    [保持] 相同状态，[重新] 开始。 名词互换 如果 [条件] 在操作结束时，[寄存器] 保持相同状态，再次开始。 碎片移除 如果 KEYMGR 在操作结束时，KEYMGR.CTRL.STATUS
    保持相同状态。[ 再次开始。] 碎片添加 如果 KEYMGR 在操作结束时，KEYMGR.CTRL.STATUS 保持相同状态，[系统采样] 再次开始。
- en: 'In this section, we will explain the process of security property classification
    from the design documentation utilizing the Sequence Classification Model (SCM),
    as mentioned in Section [II-B4](#S2.SS2.SSS4 "II-B4 Sequence Classification Modeling
    ‣ II-B Natural Language Processing ‣ II Background ‣ Unlocking Hardware Security
    Assurance: The Potential of LLMs"). Figure [5](#S3.F5 "Figure 5 ‣ III-C Security
    Property Classification ‣ III Can Leveraging Large Language Models Foster Hardware
    Security Assurance? ‣ Unlocking Hardware Security Assurance: The Potential of
    LLMs") illustrates the training procedure of NSPG framework, which consists of
    three stages. In the first stage, we obtain the HS-BERT model with sentences from
    hardware design documentation. In the second stage, we will modify the labeled
    ${\mathcal{}{D}}_{cls}$ and utilize the best-performing one to generate security
    properties from the documents.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将解释如何利用序列分类模型（SCM）对设计文档中的安全属性进行分类，如第[II-B4](#S2.SS2.SSS4 "II-B4 序列分类建模
    ‣ II-B 自然语言处理 ‣ II 背景 ‣ 解锁硬件安全保障：LLMs的潜力")节中提到的那样。图[5](#S3.F5 "图5 ‣ III-C 安全属性分类
    ‣ III 大型语言模型是否能促进硬件安全保障？ ‣ 解锁硬件安全保障：LLMs的潜力")展示了NSPG框架的训练过程，该过程分为三个阶段。在第一阶段，我们使用来自硬件设计文档的句子获得HS-BERT模型。在第二阶段，我们将修改标记的${\mathcal{}{D}}_{cls}$，并利用性能最佳的模型从文档中生成安全属性。
- en: '![Refer to caption](img/8f94eb8b6276f7e432b3a2dc8ff9cee9.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![参见标题](img/8f94eb8b6276f7e432b3a2dc8ff9cee9.png)'
- en: 'Figure 5: HS-BERT model training process.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图5：HS-BERT模型训练过程。
- en: ${\mathcal{}{D}}_{cls}$ as unseen in-domain documentation, and evaluate the
    performances of the fine-tuned SCM model for security property generation. Each
    BERT sequence classification model is trained with different combinations of the
    original and modified training datasets to evaluate the classification performance
    based on accuracy, recall, precision, and F1-score.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: ${\mathcal{}{D}}_{cls}$作为未见过的领域内文档，评估微调后的SCM模型在安全属性生成中的表现。每个BERT序列分类模型都使用不同组合的原始和修改训练数据集进行训练，以评估基于准确率、召回率、精确度和F1分数的分类性能。
- en: 'Since our priority is to maximize the generation of security properties, we
    can tolerate the presence of a few non-property-related sentences (*i.e.*, False
    Positives), which can be removed with further analysis. Therefore, accuracy and
    recall are the key metrics to determine the performance of sentence modification
    and SCM in NSPG. Higher values of accuracy and recall indicate better performance
    of the modification method and SCM model. The details will be discussed in Section [III-C4](#S3.SS3.SSS4
    "III-C4 Fine-tuning SCM model ‣ III-C Security Property Classification ‣ III Can
    Leveraging Large Language Models Foster Hardware Security Assurance? ‣ Unlocking
    Hardware Security Assurance: The Potential of LLMs"). In this work, we employ
    the SciBERT and general BERT model (“bert-base-uncased”), and compare their performances
    against HS-BERT in Section [III-C3](#S3.SS3.SSS3 "III-C3 General BERT vs SciBERT
    vs HS-BERT ‣ III-C Security Property Classification ‣ III Can Leveraging Large
    Language Models Foster Hardware Security Assurance? ‣ Unlocking Hardware Security
    Assurance: The Potential of LLMs").'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的优先任务是最大化安全属性的生成，因此我们可以容忍一些与属性无关的句子（*即*，误报），这些句子可以通过进一步分析来去除。因此，准确率和召回率是评估NSPG中句子修改和SCM性能的关键指标。准确率和召回率的值越高，表明修改方法和SCM模型的性能越好。详细信息将在第[III-C4](#S3.SS3.SSS4
    "III-C4 调整SCM模型 ‣ III-C 安全属性分类 ‣ III 大型语言模型是否能促进硬件安全保障？ ‣ 解锁硬件安全保障：LLMs的潜力")节中讨论。在这项工作中，我们使用SciBERT和通用BERT模型（“bert-base-uncased”），并在第[III-C3](#S3.SS3.SSS3
    "III-C3 通用BERT与SciBERT与HS-BERT比较 ‣ III-C 安全属性分类 ‣ III 大型语言模型是否能促进硬件安全保障？ ‣ 解锁硬件安全保障：LLMs的潜力")节中将其性能与HS-BERT进行比较。
- en: '![Refer to caption](img/b2cff89d3a05d4ecab34061f4d38a21b.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![参见标题](img/b2cff89d3a05d4ecab34061f4d38a21b.png)'
- en: 'Figure 6: Sentence modification in documents. The first row represents the
    original sentence in the document. The second row shows each fragment of the original
    sentence. The third row adds [Mask] token into the fragment for missing components.
    The fourth row demonstrates the process of reconstructing the missing components
    of each fragment, and the last row shows the sentence after constructing the missing
    components.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图6：文档中的句子修改。第一行表示文档中的原始句子。第二行显示原始句子的每个片段。第三行在片段中添加[Mask]标记以表示缺失的部分。第四行演示了重建每个片段缺失部分的过程，最后一行显示了构建缺失部分后的句子。
- en: III-C1 Data Modification for Property Classification
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: III-C1 属性分类的数据修改
- en: 'TABLE IV: Performance comparison between general BERT, SciBERT and HS-BERT
    with data modifications from ${\mathcal{}{D}}_{cls}$.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 表 IV：通用 BERT、SciBERT 和 HS-BERT 在数据修改后的性能比较，数据来自 ${\mathcal{}{D}}_{cls}$。
- en: General BERT SciBERT HS-BERT Accuracy Recall Precision F1-Score Accuracy Recall
    Precision F1-Score Accuracy Recall Precision F1-Score Baseline 83.1% 81% 49.4%
    65.1% 83.2% 98% 46% 61.7% 84% 97% 45% 63% MT 83.2% 93.5% 51.8% 65.8% 82.2% 96%
    49% 65% 85.1% 97.3% 48.7% 64.7% MOT 86% 96.4% 46.7% 63% 88.1% 98% 45% 62% 90.1%
    98.3% 49% 65% MTT 81.2% 83.4% 50.4% 61.2% 87.1% 95% 44% 60% 88.1% 97.5% 48% 64%
    MOTMT 83.2% 70.6% 35.5% 71% 87.5% 97% 44% 59% 88.5% 98.1% 48% 64%
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通用 BERT SciBERT HS-BERT 准确率 召回率 精确率 F1-得分 准确率 召回率 精确率 F1-得分 准确率 召回率 精确率 F1-得分
    基线 83.1% 81% 49.4% 65.1% 83.2% 98% 46% 61.7% 84% 97% 45% 63% MT 83.2% 93.5% 51.8%
    65.8% 82.2% 96% 49% 65% 85.1% 97.3% 48.7% 64.7% MOT 86% 96.4% 46.7% 63% 88.1%
    98% 45% 62% 90.1% 98.3% 49% 65% MTT 81.2% 83.4% 50.4% 61.2% 87.1% 95% 44% 60%
    88.1% 97.5% 48% 64% MOTMT 83.2% 70.6% 35.5% 71% 87.5% 97% 44% 59% 88.5% 98.1%
    48% 64%
- en: Data pre-processing and data cleansing are utilized to generate unbiased data,
    which in turn is critical to furnish reliable machine learning algorithms [[25](#bib.bib25)].
    Studies have shown that biased learning can result from training on imbalanced
    or noisy data [[46](#bib.bib46), [34](#bib.bib34)]. Therefore, significant consideration
    should be provided to the data cleansing process and detailing the methods used
    in our studies. BERT model tokenizer is used to tokenize the sentences by its
    data pre-processing technique [[23](#bib.bib23)]. In order to improve the performance
    of sequence classification, we propose a hardware domain-specific modification
    to further differentiate the features of each sentence in the documents, which
    enforces the BERT model to recognize more contextual dependencies. For instance,
    sentences including hardware operations and behavior are considered in-domain,
    while common descriptions are regarded as out-of-domain.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 数据预处理和数据清洗用于生成无偏数据，这对于提供可靠的机器学习算法至关重要[[25](#bib.bib25)]。研究表明，偏见学习可能源于对不平衡或噪声数据的训练[[46](#bib.bib46),
    [34](#bib.bib34)]。因此，应对数据清洗过程给予充分考虑，并详细说明我们研究中使用的方法。使用 BERT 模型分词器通过其数据预处理技术对句子进行分词[[23](#bib.bib23)]。为了提高序列分类的性能，我们提出了一种硬件领域特定的修改，以进一步区分文档中每个句子的特征，这迫使
    BERT 模型识别更多的上下文依赖。例如，包括硬件操作和行为的句子被视为领域内的，而常见描述被视为领域外的。
- en: 'Although a plethora of data pre-processing approaches have been proposed to
    improve the performances of machine learning techniques in text mining and image
    classification [[28](#bib.bib28), [32](#bib.bib32)], most language models are
    pre-trained with a wide range of documentation in a different domain. In this
    work, we consider some data modification methods with hardware security-domain
    context and validate their impact on model performances. As shown in Table [III](#S3.T3
    "TABLE III ‣ III-C Security Property Classification ‣ III Can Leveraging Large
    Language Models Foster Hardware Security Assurance? ‣ Unlocking Hardware Security
    Assurance: The Potential of LLMs"), we apply several alternative methods, including
    verb swapping, noun swapping, fragment deletion, and fragment insertion, to preprocess
    all sentences in the dataset, described as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '尽管已经提出了大量的数据预处理方法来提高文本挖掘和图像分类中机器学习技术的性能[[28](#bib.bib28), [32](#bib.bib32)]，但大多数语言模型都是在不同领域的大量文档上进行预训练的。在这项工作中，我们考虑了一些具有硬件安全领域背景的数据修改方法，并验证了它们对模型性能的影响。如表格 [III](#S3.T3
    "TABLE III ‣ III-C Security Property Classification ‣ III Can Leveraging Large
    Language Models Foster Hardware Security Assurance? ‣ Unlocking Hardware Security
    Assurance: The Potential of LLMs")所示，我们应用了包括动词替换、名词替换、片段删除和片段插入在内的几种替代方法，对数据集中的所有句子进行预处理，具体如下：'
- en: 'Verb Swapping: This approach substitutes the verbs in the sentence with semantic
    pre-defined hardware domain-related verbs. For example, in Table [III](#S3.T3
    "TABLE III ‣ III-C Security Property Classification ‣ III Can Leveraging Large
    Language Models Foster Hardware Security Assurance? ‣ Unlocking Hardware Security
    Assurance: The Potential of LLMs"), “stay” and “begins” in each sentence are replaced
    with “remain” and “starts” to formalize the usage of verbs.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '动词替换：这种方法将句子中的动词替换为语义预定义的硬件领域相关动词。例如，在表格 [III](#S3.T3 "TABLE III ‣ III-C Security
    Property Classification ‣ III Can Leveraging Large Language Models Foster Hardware
    Security Assurance? ‣ Unlocking Hardware Security Assurance: The Potential of
    LLMs")中，每个句子中的“stay”和“begins”被替换为“remain”和“starts”，以规范动词的使用。'
- en: 'Noun Swapping: This method intends to remove the arbitrary term used in each
    sentence, such as “KEYMGR” and “KEYMGR.CTRL.STATUS” in Table [III](#S3.T3 "TABLE
    III ‣ III-C Security Property Classification ‣ III Can Leveraging Large Language
    Models Foster Hardware Security Assurance? ‣ Unlocking Hardware Security Assurance:
    The Potential of LLMs"), and replace them with more generalized terminology in
    the hardware domain such as “condition” and “register”.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '名词交换：此方法旨在移除每个句子中使用的任意术语，如表[III](#S3.T3 "TABLE III ‣ III-C Security Property
    Classification ‣ III Can Leveraging Large Language Models Foster Hardware Security
    Assurance? ‣ Unlocking Hardware Security Assurance: The Potential of LLMs")中的“KEYMGR”和“KEYMGR.CTRL.STATUS”，并用硬件领域中更为通用的术语如“condition”和“register”进行替换。'
- en: 'Fragment Deletion: Some fragments of the sentence are not directly related
    to operation details. In this case, we intend to break the sentence into multiple
    conjunctions and remove the small fragments such as “begin again” in Table [III](#S3.T3
    "TABLE III ‣ III-C Security Property Classification ‣ III Can Leveraging Large
    Language Models Foster Hardware Security Assurance? ‣ Unlocking Hardware Security
    Assurance: The Potential of LLMs"), while retaining the more essential content
    of hardware operations.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '片段删除：句子中的一些片段与操作细节无直接关系。在这种情况下，我们打算将句子分解为多个连词，并移除小片段，如表[III](#S3.T3 "TABLE
    III ‣ III-C Security Property Classification ‣ III Can Leveraging Large Language
    Models Foster Hardware Security Assurance? ‣ Unlocking Hardware Security Assurance:
    The Potential of LLMs")中的“begin again”，同时保留更为重要的硬件操作内容。'
- en: 'Fragment Insertion: This approach adds information to the incomplete sentence.
    Typically, we consider a complete sentence consists of two (noun, verb) or three
    components (noun, verb, and noun). For each incomplete fragment in the sentence,
    we will construct them with a similar structure.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 片段插入：此方法向不完整的句子中添加信息。通常，我们认为一个完整的句子由两个（名词、动词）或三个组成部分（名词、动词和名词）构成。对于句子中的每个不完整片段，我们将用类似结构进行构建。
- en: III-C2 Fragment Insertion Modification
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: III-C2 片段插入修改
- en: Through our initial analysis, the other data modification approaches furnished
    sub-par classification performance of up to 55% accuracy, we have included and
    described the results pertaining to the fragment insertion technique. Therefore,
    we determine that only fragment insertion improves the performance of the classification
    model. While noun swapping and verb swapping do not significantly affect performance,
    fragment removal degrades performance. The primary reason is that fragment insertion
    adds more in-domain context to the original sentence, which helps the SCM identify
    the operation context. Therefore, we can infer that instead of simplifying the
    data, the NLP model tends to require more information and complete structure in
    each sentence to learn the subjects more accurately. Intuitively, the prevailing
    assumption is that using more in-domain text in the training datasets should help
    with domain-specific classification. Although each sentence in the document is
    constructed differently, we will explore this concept by adding domain-specific
    portions for each sentence.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过我们的初步分析，其他数据修改方法提供的分类性能最多达到55%准确率，我们已包含并描述了与片段插入技术相关的结果。因此，我们确定只有片段插入能提高分类模型的性能。虽然名词交换和动词交换对性能没有显著影响，但片段移除会降低性能。主要原因是片段插入为原句添加了更多领域内的上下文，这有助于SCM识别操作上下文。因此，我们可以推断，相较于简化数据，NLP模型更倾向于在每个句子中需要更多的信息和完整的结构以更准确地学习主题。直观上，普遍的假设是使用更多领域内的文本在训练数据集中应有助于领域特定的分类。尽管文档中的每个句子的构造方式不同，我们将通过为每个句子添加领域特定的部分来探讨这一概念。
- en: 'Figure [6](#S3.F6 "Figure 6 ‣ III-C Security Property Classification ‣ III
    Can Leveraging Large Language Models Foster Hardware Security Assurance? ‣ Unlocking
    Hardware Security Assurance: The Potential of LLMs") shows an example of modifying
    a sentence in the document with fragment insertion. First, we break the sentence
    “When resetting, if 0, allow requests to pass through the host-side FIFO with
    no clock delay.” into fragments by identifying each conjunction “When”, “if”,
    and “to” in the sentence, and separating the sentence into fragments as: “When
    resetting”, “if 0”, “allow requests”, and “to pass through the host-side FIFO
    with no clock delay”. In these fragments, “When resetting”, and “allow requests”
    are missing nouns, “if 0” is missing noun and verb, and “to pass through the host-side
    FIFO with no clock delay” is complete. We will add these missing components into
    the fragments by adding a [Mask] token into the fragment and applying the pre-trained
    HS-BERT to place appropriate in-domain terms for each [Mask] token. Hence, “When
    resetting”, “if 0”, and “allow requests” will be transformed into “When system
    is resetting”, “if value is set 0”, and “module allows requests”. Since the other
    data modification approaches furnished sub-par classification performance of up
    to 55% accuracy, we have included and described the results pertaining to the
    fragment insertion technique.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '图[6](#S3.F6 "Figure 6 ‣ III-C Security Property Classification ‣ III Can Leveraging
    Large Language Models Foster Hardware Security Assurance? ‣ Unlocking Hardware
    Security Assurance: The Potential of LLMs")展示了一个通过片段插入修改文档中句子的示例。首先，我们将句子“When
    resetting, if 0, allow requests to pass through the host-side FIFO with no clock
    delay.”按每个连词“When”、“if”和“to”拆分成片段，并将句子拆分为：“When resetting”、“if 0”、“allow requests”和“to
    pass through the host-side FIFO with no clock delay”。在这些片段中，“When resetting”和“allow
    requests”缺少名词，“if 0”缺少名词和动词，而“to pass through the host-side FIFO with no clock
    delay”是完整的。我们将通过在片段中添加一个[Mask]标记并应用预训练的 HS-BERT 来为每个[Mask]标记放置适当的领域术语，从而添加这些缺失的组件。因此，“When
    resetting”、“if 0”和“allow requests”将被转换为“When system is resetting”、“if value is
    set 0”和“module allows requests”。由于其他数据修改方法提供的分类性能最高为55%的准确率，我们已包含并描述了与片段插入技术相关的结果。'
- en: III-C3 General BERT vs SciBERT vs HS-BERT
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: III-C3 通用 BERT vs SciBERT vs HS-BERT
- en: 'In this section, we will discuss the available pre-trained BERT models and
    motivate our choice of the proposed HS-BERT, as shown in Section [III-B2](#S3.SS2.SSS2
    "III-B2 Pre-training BERT with MLM ‣ III-B Comprehending the Hardware Domain ‣
    III Can Leveraging Large Language Models Foster Hardware Security Assurance? ‣
    Unlocking Hardware Security Assurance: The Potential of LLMs"), for its inclusion
    in NSPG. General BERT utilizes WordPiece [[49](#bib.bib49)] for unsupervised tokenization
    of input sequences, building its vocabulary with the most frequently used words
    or sub-word units. SciBERT, on the other hand, is constructed with a new WordPiece
    vocabulary on a scientific corpus using the SentencePiece1 library [[45](#bib.bib45)].
    The token overlap between BERT and SciBERT vocabulary is 42%, indicating a substantial
    difference in the frequently used words between scientific and general domain
    texts. SciBERT was trained on a dataset comprising 1.14M papers from Semantic
    Scholar, where 82% of the papers belong to the biomedical domain, while the remaining
    18% pertain to computer science [[12](#bib.bib12)].'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '在本节中，我们将讨论可用的预训练 BERT 模型，并说明我们选择提议的 HS-BERT（如[III-B2](#S3.SS2.SSS2 "III-B2
    Pre-training BERT with MLM ‣ III-B Comprehending the Hardware Domain ‣ III Can
    Leveraging Large Language Models Foster Hardware Security Assurance? ‣ Unlocking
    Hardware Security Assurance: The Potential of LLMs")节中所示）作为 NSPG 的原因。通用 BERT 使用
    WordPiece [[49](#bib.bib49)] 对输入序列进行无监督分词，通过最常用的词汇或子词单元来构建词汇表。而 SciBERT 则使用 SentencePiece1
    库 [[45](#bib.bib45)] 在科学语料库上构建了一个新的 WordPiece 词汇表。BERT 和 SciBERT 词汇表之间的标记重叠率为42%，表明科学领域和通用领域文本之间的常用词有显著差异。SciBERT
    在包含114万篇论文的 Semantic Scholar 数据集上进行训练，其中82%的论文属于生物医学领域，其余18%属于计算机科学领域 [[12](#bib.bib12)]。'
- en: 'Table [IV](#S3.T4 "TABLE IV ‣ III-C1 Data Modification for Property Classification
    ‣ III-C Security Property Classification ‣ III Can Leveraging Large Language Models
    Foster Hardware Security Assurance? ‣ Unlocking Hardware Security Assurance: The
    Potential of LLMs") shows the comparison between the general BERT model, SciBERT,
    and the proposed HS-BERT, training the same data modification method and the same
    3927 samples from ${\mathcal{}{D}}_{cls}$ are used for validation. Modifications
    are applied to both in-domain and out-of-domain sentences. The baseline refers
    to no modification on both training and testing data. We have considered the following
    cases for modification: MT refers to only modifying training data. MTT refers
    to modifying training and testing data. Note that the modification only changes
    the content of testing sentences and does not increase the size of test samples.
    MOT refers to both modified and original training data. MOTMT refers to the original
    training data, its modified counterpart, and modified testing data. The results
    indicate that all three BERT models demonstrate improved performance in comparison
    to their baseline models, with an average increase of 0.6% accuracy with General
    BERT, 3.1% accuracy with SciBERT, and 3.95% accuracy with HS-BERT. For each data
    modification method, the largest effects of fine-tuning were observed in the MOT
    (+6.1% accuracy with HS-BERT, +4.9% accuracy with SciBERT, and +2.9% accuracy
    with General BERT) and MOTOT (+4.9% accuracy with SciBERT and +0.1% accuracy with
    General BERT). While little effect was seen on recall, precision, and F1-score
    for HS-BERT and SciBERT, General BERT gains a significant improvement in recall
    when applying MOT (+15.4%). However, HS-BERT, with fine-tuning, outperforms the
    state of art General BERT and SciBERT model on accuracy and recall, while performing
    similarly on precision and F1-score. Based on these observations, we determine
    that HS-BERT is more suitable for extracting potential security properties, which
    we have subsequently incorporated in NSPG.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '表 [IV](#S3.T4 "TABLE IV ‣ III-C1 Data Modification for Property Classification
    ‣ III-C Security Property Classification ‣ III Can Leveraging Large Language Models
    Foster Hardware Security Assurance? ‣ Unlocking Hardware Security Assurance: The
    Potential of LLMs") 显示了通用 BERT 模型、SciBERT 和提出的 HS-BERT 之间的比较。使用相同的数据修改方法和来自 ${\mathcal{}{D}}_{cls}$
    的 3927 个样本进行验证。修改应用于领域内和领域外的句子。基线指的是训练和测试数据都没有修改。我们考虑了以下修改情况：MT 指仅修改训练数据。MTT 指修改训练和测试数据。注意，修改仅更改测试句子的内容，不增加测试样本的数量。MOT
    指修改过和原始的训练数据。MOTMT 指原始训练数据、其修改后的对应数据和修改后的测试数据。结果表明，所有三个 BERT 模型在与基线模型相比时表现出性能提升，其中通用
    BERT 提高了 0.6% 的准确率，SciBERT 提高了 3.1% 的准确率，HS-BERT 提高了 3.95% 的准确率。对于每种数据修改方法，微调的最大效果出现在
    MOT（HS-BERT 提高了 +6.1% 的准确率，SciBERT 提高了 +4.9% 的准确率，通用 BERT 提高了 +2.9% 的准确率）和 MOTOT（SciBERT
    提高了 +4.9% 的准确率，通用 BERT 提高了 +0.1% 的准确率）。虽然 HS-BERT 和 SciBERT 对召回率、精确度和 F1 分数的影响较小，但通用
    BERT 在应用 MOT 时召回率有显著提高（+15.4%）。然而，经过微调的 HS-BERT 在准确率和召回率上优于最先进的通用 BERT 和 SciBERT
    模型，而在精确度和 F1 分数上表现相似。根据这些观察，我们确定 HS-BERT 更适合提取潜在的安全属性，这一点我们已经在 NSPG 中加以应用。'
- en: 'TABLE V: Sequence Classification for ${\mathcal{}{D}}_{val}$. Each row represents
    the accuracy, recall, and F1-score for different HS-BERT models and different
    modified labeled datasets.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '表 V: ${\mathcal{}{D}}_{val}$ 的序列分类。每一行表示不同 HS-BERT 模型和不同修改标记数据集的准确率、召回率和 F1
    分数。'
- en: OpenTitan RISCV Openrisc Accuracy Recall Accuracy Recall Accuracy Recall Base-HS-BERT
    70.6% 72.8% 71.9% 71.2% 80.3% 80.2% MT-HS-BERT 74.5% 80.4% 75.8% 79.2% 83.6% 82.6%
    MOT-HS-BERT 81.5% 93% 79.1% 90.1% 88.3% 87% MTT-HS-BERT 75% 85% 74.3% 83.5% 86.3%
    82.6% MOTMT-HS-BERT 76% 84.1% 73.3% 80.5% 87% 84.7%
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: OpenTitan RISCV Openrisc 准确率 召回率 准确率 召回率 准确率 召回率 Base-HS-BERT 70.6% 72.8% 71.9%
    71.2% 80.3% 80.2% MT-HS-BERT 74.5% 80.4% 75.8% 79.2% 83.6% 82.6% MOT-HS-BERT 81.5%
    93% 79.1% 90.1% 88.3% 87% MTT-HS-BERT 75% 85% 74.3% 83.5% 86.3% 82.6% MOTMT-HS-BERT
    76% 84.1% 73.3% 80.5% 87% 84.7%
- en: III-C4 Fine-tuning SCM model
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: III-C4 微调 SCM 模型
- en: 'In this stage, NSPG will apply fine-tuned HS-BERT SCM to identify the security
    properties in the SoC documentation. In order to emulate this scenario in which
    the SCM is applied on an unseen document to determine whether the sentence is
    a security property or not, we will test each trained sequence classification
    model on ${\mathcal{}{D}}_{val}$. Table [V](#S3.T5 "TABLE V ‣ III-C3 General BERT
    vs SciBERT vs HS-BERT ‣ III-C Security Property Classification ‣ III Can Leveraging
    Large Language Models Foster Hardware Security Assurance? ‣ Unlocking Hardware
    Security Assurance: The Potential of LLMs") shows the results for HS-BERT performance
    with no modification and the data modification approach, as described in Section [III-C3](#S3.SS3.SSS3
    "III-C3 General BERT vs SciBERT vs HS-BERT ‣ III-C Security Property Classification
    ‣ III Can Leveraging Large Language Models Foster Hardware Security Assurance?
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs"). Base-HS-BERT
    refers to the SCM performance fine-tuned with no data modification. The HS-BERT
    model trained with the MOT modification performs the best with an average of 82%
    accuracy, and 90% recall score. Since this method consists of both the original
    and the modified sentences, it improves the diversity of the training dataset,
    which helps the model to learn more features and context of a property-related
    sentence. Therefore, we will use MOT modification as our final data modification
    approach for the SCM model.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '在这个阶段，NSPG将应用微调后的HS-BERT SCM来识别SoC文档中的安全属性。为了模拟这种场景，即在一个未见过的文档上应用SCM以确定句子是否为安全属性，我们将测试每个训练过的序列分类模型在${\mathcal{}{D}}_{val}$上的表现。表 [V](#S3.T5
    "TABLE V ‣ III-C3 General BERT vs SciBERT vs HS-BERT ‣ III-C Security Property
    Classification ‣ III Can Leveraging Large Language Models Foster Hardware Security
    Assurance? ‣ Unlocking Hardware Security Assurance: The Potential of LLMs")展示了HS-BERT在未修改和数据修改方法下的性能结果，如第[III-C3节](#S3.SS3.SSS3
    "III-C3 General BERT vs SciBERT vs HS-BERT ‣ III-C Security Property Classification
    ‣ III Can Leveraging Large Language Models Foster Hardware Security Assurance?
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs")所述。Base-HS-BERT指的是未修改数据的微调SCM性能。使用MOT修改训练的HS-BERT模型表现最佳，准确率平均为82%，召回率为90%。由于这种方法包括原始句子和修改句子，它提高了训练数据集的多样性，这有助于模型学习更多关于属性相关句子的特征和上下文。因此，我们将使用MOT修改作为SCM模型的最终数据修改方法。'
- en: 'Input: Document Files, Labeled Dataset'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 输入：文档文件，标注数据集
- en: 'Output: Property, Non-Property'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：属性，非属性
- en: Algorithm 1 Sentence Formalization
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 算法 1 句子形式化
- en: 1:MLM.train(Document Files)2:Initialize Enhanced Labeled Dataset3:for each Sentence
    in Labeled Dataset do4:     Split(Sentence) $\rightarrow$Sentence12:end for13:SCM.train(Enhanced
    Labeled Dataset)14:for each Sentence in Document do15:     if SC.predict(Sentence)
     Non-Property19:end for
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 1:MLM.train(文档文件)2:初始化增强标注数据集3:对于标注数据集中的每个句子4:     分割(句子) $\rightarrow$句子12:结束循环13:SCM.train(增强标注数据集)14:对于文档中的每个句子15:     如果
    SC.predict(句子)  非属性19:结束循环
- en: III-C5 NSPG Framework Summary
  id: totrans-109
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: III-C5 NSPG框架总结
- en: 'After validating each procedure in training, we will construct the pipeline
    of our proposed framework NSPG. It comprises data augmentation, data modification,
    fine-tuning masked language model, and sequence classification model. The fine-tuned
    sequence classification model is used to analyze the unseen documents, and extract
    the security properties which contain essential information about operation behaviors,
    and register interactions. Algorithm [1](#alg1 "Algorithm 1 ‣ III-C4 Fine-tuning
    SCM model ‣ III-C Security Property Classification ‣ III Can Leveraging Large
    Language Models Foster Hardware Security Assurance? ‣ Unlocking Hardware Security
    Assurance: The Potential of LLMs") demonstrates the details of each stage for
    the training and security property generation process. These extracted security
    properties can be further utilized by commercial hardware verification approaches,
    such as Cadence Jaspergold, and detect potential vulnerabilities in the design.
    The generated security properties as well as their application in detecting SoC
    vulnerabilities will be evaluated in Section [V](#S5 "V Experiments ‣ Unlocking
    Hardware Security Assurance: The Potential of LLMs").'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '在培训中验证每个程序后，我们将构建我们提出的框架 NSPG 的流程。它包括数据增强、数据修改、微调掩码语言模型和序列分类模型。微调后的序列分类模型用于分析未见过的文档，并提取包含有关操作行为和注册交互的关键信息的安全属性。算法[1](#alg1
    "Algorithm 1 ‣ III-C4 Fine-tuning SCM model ‣ III-C Security Property Classification
    ‣ III Can Leveraging Large Language Models Foster Hardware Security Assurance?
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs")展示了培训和安全属性生成过程的每个阶段的细节。这些提取的安全属性可以进一步用于商业硬件验证方法，如
    Cadence Jaspergold，检测设计中的潜在漏洞。生成的安全属性及其在检测 SoC 漏洞中的应用将在第[V](#S5 "V Experiments
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs")节中进行评估。'
- en: IV OpenTitan SoC and Threat Model
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IV OpenTitan SoC 和威胁模型
- en: IV-A OpenTitan SoC
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IV-A OpenTitan SoC
- en: Since we do not have access to commercial designs, our framework has been developed
    using open-source SoCs, such as OpenSPARC, MIPS, OpenRISC, RISC-V and OpenTitan.
    In this work, while the OpenTitan design documentation is utilized for both training
    and validation, the other documents are only used for training. The OpenTitan
    document considered in our study corresponds to a buggy design, which was used
    in the Hack@DAC 2022 hardware hacking competition [[3](#bib.bib3)].
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们无法访问商业设计，我们的框架使用了开源 SoC，如 OpenSPARC、MIPS、OpenRISC、RISC-V 和 OpenTitan。在这项工作中，虽然
    OpenTitan 设计文档用于培训和验证，但其他文档仅用于培训。我们研究中考虑的 OpenTitan 文档对应于一个有缺陷的设计，这个设计曾在 Hack@DAC
    2022 硬件黑客竞赛中使用[[3](#bib.bib3)]。
- en: IV-B Threat Model
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IV-B 威胁模型
- en: 'Our threat model is similar to the one used in Hack@DAC 2022\. The attack scenarios
    considered are as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的威胁模型类似于 Hack@DAC 2022 中使用的模型。考虑的攻击场景如下：
- en: •
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: An unprivileged software adversary that can access the core in user mode, with
    control over user-space interfaces and the ability to issue unprivileged system
    instructions and request feedback.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个无特权的软件对手，可以在用户模式下访问核心，控制用户空间接口，并能够发出无特权的系统指令和请求反馈。
- en: •
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: A privileged software adversary that can execute malicious code with supervisor
    privilege but may target higher privilege levels or bypass security countermeasures.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个特权软件对手，可以以监督特权执行恶意代码，但可能会针对更高的特权级别或绕过安全对策。
- en: •
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: An authorized debug adversary which is capable of unlocking and debugging production
    devices.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个授权的调试对手，能够解锁和调试生产设备。
- en: The aim of the adversary is to exploit any potential vulnerabilities in the
    SoC in order to bypass any security objective.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 对手的目的是利用 SoC 中的任何潜在漏洞，以绕过任何安全目标。
- en: IV-C Security Objectives and Features
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IV-C 安全目标和特性
- en: 'The security objectives of OpenTitan are as follows [[3](#bib.bib3)]:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: OpenTitan 的安全目标如下[[3](#bib.bib3)]：
- en: •
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'SO1: Preventing privilege level compromise due to unprivileged code running
    in the core.'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'SO1: 防止由于无特权代码在核心中运行而导致的特权级别泄露。'
- en: •
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'SO2: Protecting system debug interface from malicious or unauthorized debugger.'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'SO2: 保护系统调试接口免受恶意或未经授权的调试器攻击。'
- en: •
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'SO3: Protecting device integrity and preventing exploits from a software adversary.'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'SO3: 保护设备完整性，防止来自软件对手的利用。'
- en: Various security features have been developed for the OpenTitan SoC to support
    the aforementioned security objectives, including privileged access control to
    peripherals, write and read locks on registers to protect the privilege integrity
    from unprivileged instruction, and reset to flush sensitive information in cryptographic
    processors.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持上述安全目标，OpenTitan SoC 已开发出各种安全功能，包括对外围设备的特权访问控制、寄存器的读写锁定以保护特权完整性免受非特权指令的影响，以及重置以清除加密处理器中的敏感信息。
- en: V Experiments
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: V 实验
- en: In this section, we will demonstrate the evaluation of our framework NSPG with
    five OpenTitan IP documents, and discuss its performance on security property
    extraction. Furthermore, these extracted properties will be utilized with verification
    methods to detect vulnerabilities in the design.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将展示如何使用五个 OpenTitan IP 文档评估我们的框架 NSPG，并讨论其在安全属性提取上的性能。此外，这些提取的属性将与验证方法结合使用，以检测设计中的漏洞。
- en: V-A Experimental Setup
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: V-A 实验设置
- en: 'TABLE VI: Number of processed sentences, security properties generated, and
    properties covered and not covered by design verification (DV) documentation.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '表 VI: 处理的句子数量、安全属性生成数量，以及设计验证 (DV) 文档覆盖和未覆盖的属性。'
- en: Hardware IP Sentences Extracted Properties Covered by DV Not covered by DV Key
    Manager 241 51 47 40 7 LC Controller 375 79 76 65 11 HMAC 170 28 27 19 8 KMAC
    367 84 74 60 14 OTP Controller 570 105 102 84 18 Total 1723 347 326 268 58
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件 IP 句子 提取的属性 被 DV 覆盖 未被 DV 覆盖 密钥管理器 241 51 47 40 7 LC 控制器 375 79 76 65 11
    HMAC 170 28 27 19 8 KMAC 367 84 74 60 14 OTP 控制器 570 105 102 84 18 总计 1723 347
    326 268 58
- en: 'TABLE VII: Examples of security properties generated from the framework.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '表 VII: 从框架生成的安全属性示例。'
- en: Module Constructed Security Properties HW CWE Category Key Manager Upon Disabled
    entry, the internal key is updated with KMAC computed random values; however,
    previously generated sideload key slots and software key slots are preserved.
    Improper Zeroization of Hardware Register - (1239) Invalid state is entered whenever
    key manager is deactivated through the life cycle connection or when an operation
    encounters a fault . Improper Finite State Machines (FSMs) in Hardware Logic -
    (1245) When an illegal operation is supplied, the err_code is updated and the
    operation is flagged as done with error. Improper Protection for Outbound Error
    Messages and Alert Signals - (1320) When the life cycle controller deactivates
    the key manager, the key manager transitions to the Invalid state. Improper Finite
    State Machines (FSMs) in Hardware Logic - (1245) LC Controller fatal_bus_integ_error_q
    is triggered when a fatal TL-UL bus integrity fault is detected. Improper Protection
    for Outbound Error Messages and Alert Signals - (1320) fatal_bus_integ_error_q
    is set to 1 if a fatal bus integrity fault is detected. Improper Protection for
    Outbound Error Messages and Alert Signals - (1320) HMAC If SW wants to convert
    the message byte order, SW should set CFG.endian_swap to 1. Expected Behavior
    Violation - (440) When the SHA engine is disabled the digest is cleared. Sensitive
    Information in Resource Not Removed Before Reuse - (226) If CPU writes value into
    the register, the value is used to randomize internal variables such as secret
    key, internal state machine, or hash value. Sensitive Information in Resource
    Not Removed Before Reuse - (226) KMAC If the EnMasking parameter is not set, the
    second share is always zero. Improper Zeroization of Hardware Register - (1239)
    If EnMasking is not defined, the KMAC merges the shared key to the unmasked form
    before uses the key. Sensitive Information in Resource Not Removed Before Reuse
    - (226) If the EnMasking parameter is set and CFG_SHADOWED.msg_mask is enabled,
    the message is masked upon loading into the Keccak core using the internal entropy
    generator. Security Primitives and Cryptography Issues - (1205) OTP Controller
    The otp_lc_data_o.secrets_valid signal is a multibit valid signal that is set
    to lc_ctrl_pkg::On if the SECRET2 partition containing the root keys has been
    locked with a digest. Improper Prevention of Lock Bit Modification - (1231) Read
    transactions through the CSR window will error out if they are out of bounds,
    or if read access is locked. Improper Access Control for Register Interface -
    (1262)
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 模块构建安全属性 HW CWE 类别 密钥管理器在禁用条目时，内部密钥会更新为KMAC计算的随机值；但之前生成的侧加载密钥槽和软件密钥槽会被保留。硬件寄存器的不当清零
    - (1239) 每当通过生命周期连接禁用密钥管理器或操作遇到故障时，会进入无效状态。硬件逻辑中的有限状态机（FSMs）不当 - (1245) 当提供非法操作时，err_code会更新，并且操作会被标记为出错完成。对外部错误消息和警报信号的不当保护
    - (1320) 当生命周期控制器禁用密钥管理器时，密钥管理器会过渡到无效状态。硬件逻辑中的有限状态机（FSMs）不当 - (1245) 当检测到致命的TL-UL总线完整性故障时，会触发LC控制器fatal_bus_integ_error_q。对外部错误消息和警报信号的不当保护
    - (1320) 如果检测到致命总线完整性故障，则fatal_bus_integ_error_q会设置为1。对外部错误消息和警报信号的不当保护 - (1320)
    HMAC 如果SW想要转换消息字节顺序，SW应将CFG.endian_swap设置为1。预期行为违反 - (440) 当SHA引擎被禁用时，摘要会被清除。资源中敏感信息在重用前未被移除
    - (226) 如果CPU将值写入寄存器，该值会用于随机化内部变量，如密钥、内部状态机或哈希值。资源中敏感信息在重用前未被移除 - (226) KMAC 如果EnMasking参数未设置，第二份共享值始终为零。硬件寄存器的不当清零
    - (1239) 如果未定义EnMasking，KMAC会在使用密钥前将共享密钥合并为未掩码形式。资源中敏感信息在重用前未被移除 - (226) 如果设置了EnMasking参数且CFG_SHADOWED.msg_mask启用，消息在加载到Keccak核心时会使用内部熵生成器进行掩码处理。安全原语和密码学问题
    - (1205) OTP控制器 otp_lc_data_o.secrets_valid信号是一个多位有效信号，如果包含根密钥的SECRET2分区已用摘要锁定，则设置为lc_ctrl_pkg::On。防止锁定位修改的不当措施
    - (1231) 如果CSR窗口内的读事务超出范围或读访问被锁定，将会出错。寄存器接口的不当访问控制 - (1262)
- en: 'All of our experiments are run on a server consisting of 40 CPUs of 64-bit
    Intel(R) Xeon(R) E5-2698 v4 @ 2.20GHz. Our NSPG framework is implemented in Python.
    We intend to release our framework in GitHub soon, for use by other researchers.
    The entire SoC documentation comprises of 33 IP design specifications, with 10865
    sentences. Each IP design documentation demonstrates information on register descriptions,
    functionalities, and operation processes, including the security features for
    various modules, that will be used for evaluating NSPG [[7](#bib.bib7)]. Among
    these, the contents of the operational processes or behaviors can be transformed
    into security properties, while the others are treated as non-properties. In the
    following subsections, we will evaluate each extracted sentence from five unseen
    IP documents and identify whether they can be transformed into security properties.
    Moreover, we will utilize these security properties to search for potential violations
    in relevant hardware IPs. Since the list of registers in SoC design is available
    to us, we craft the detailed security properties from the IP security specification
    and checklist of the OpenTitan SoC registers. The verification of SoC is based
    on the threat model and security objectives, as described in Section [IV-B](#S4.SS2
    "IV-B Threat Model ‣ IV OpenTitan SoC and Threat Model ‣ Unlocking Hardware Security
    Assurance: The Potential of LLMs") and [IV-C](#S4.SS3 "IV-C Security Objectives
    and Features ‣ IV OpenTitan SoC and Threat Model ‣ Unlocking Hardware Security
    Assurance: The Potential of LLMs"), respectively.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '我们所有的实验都在由40个64位Intel(R) Xeon(R) E5-2698 v4 @ 2.20GHz CPU组成的服务器上运行。我们的NSPG框架是用Python实现的。我们计划很快在GitHub上发布我们的框架，以供其他研究人员使用。整个SoC文档包括33份IP设计规范，共有10865个句子。每份IP设计文档展示了寄存器描述、功能和操作过程的信息，包括用于评估NSPG的各种模块的安全特性[[7](#bib.bib7)]。其中，操作过程或行为的内容可以转化为安全属性，而其他内容则被视为非属性。在以下小节中，我们将评估来自五个未见过的IP文档的每个提取句子，并确定它们是否可以转化为安全属性。此外，我们还将利用这些安全属性来寻找相关硬件IP中的潜在违规行为。由于我们可以访问SoC设计中的寄存器列表，我们根据IP安全规范和OpenTitan
    SoC寄存器的检查表制定详细的安全属性。SoC的验证基于威胁模型和安全目标，如[IV-B](#S4.SS2 "IV-B Threat Model ‣ IV
    OpenTitan SoC and Threat Model ‣ Unlocking Hardware Security Assurance: The Potential
    of LLMs")和[IV-C](#S4.SS3 "IV-C Security Objectives and Features ‣ IV OpenTitan
    SoC and Threat Model ‣ Unlocking Hardware Security Assurance: The Potential of
    LLMs")节中所述。'
- en: V-B NSPG Framework Evaluation
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: V-B NSPG 框架评估
- en: 'First, NSPG processes each text file consisting of sentences in the design
    documentation. It filters out any sentence having less than 10 words, since they
    usually do not contain enough information about operation behaviors. The rest
    of the sentences will be parsed through the trained HS-BERT sequence classification
    model discussed in Section [III](#S3 "III Can Leveraging Large Language Models
    Foster Hardware Security Assurance? ‣ Unlocking Hardware Security Assurance: The
    Potential of LLMs"), and the extracted sentences from each IP document will be
    listed in property text files. As shown in Table [VI](#S5.T6 "TABLE VI ‣ V-A Experimental
    Setup ‣ V Experiments ‣ Unlocking Hardware Security Assurance: The Potential of
    LLMs"), 1723 sentences are processed, and 344 sentences are extracted as potential
    security properties. Overall, 326 sentences (94% of the 347 extracted sentences)
    can be utilized to generate security properties for design validation. We compare
    the generated security properties with the test cases listed in the Design Verification
    (DV) documentation, which describes all the test cases and IP operations needed
    to be checked by the SoC designer. While 268 of our generated security properties
    are covered in DV, 58 properties are not covered in the test cases, which clearly
    demonstrate that NSPG is adept at accounting for specifications that are not covered
    in DV. This shows that our proposed framework, NSPG, is able to efficiently identify
    security properties in the documents. Next, we use these newly generated security
    properties to verify the bugs.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '首先，NSPG 处理设计文档中的每个文本文件，该文件由句子组成。它过滤掉任何少于 10 个单词的句子，因为这些句子通常不包含足够的操作行为信息。其余的句子将通过在第
    [III](#S3 "III Can Leveraging Large Language Models Foster Hardware Security Assurance?
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs") 节讨论的训练过的 HS-BERT
    序列分类模型进行解析，从每个 IP 文档中提取的句子将被列在属性文本文件中。如表 [VI](#S5.T6 "TABLE VI ‣ V-A Experimental
    Setup ‣ V Experiments ‣ Unlocking Hardware Security Assurance: The Potential of
    LLMs") 所示，共处理了 1723 个句子，其中 344 个句子被提取为潜在的安全属性。总体而言，326 个句子（347 个提取句子的 94%）可以用于生成设计验证的安全属性。我们将生成的安全属性与设计验证（DV）文档中列出的测试用例进行比较，该文档描述了
    SoC 设计师需要检查的所有测试用例和 IP 操作。虽然我们生成的 268 个安全属性在 DV 中有所涵盖，但 58 个属性在测试用例中没有涵盖，这清楚地表明
    NSPG 擅长考虑那些 DV 中未涵盖的规范。这表明我们提出的框架 NSPG 能够高效地识别文档中的安全属性。接下来，我们使用这些新生成的安全属性来验证漏洞。'
- en: V-C Effectiveness in Discovering Violations
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: V-C 在发现违规行为中的有效性
- en: 'TABLE VIII: Eight bugs found in Key Manager, LC controller, HMAC, KMAC, and
    OTP memory controller, the violated security objectives, CWE, CVSS, and security
    impacts.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 表 VIII：在密钥管理器、LC 控制器、HMAC、KMAC 和 OTP 内存控制器中发现的八个漏洞，违反的安全目标，CWE，CVSS 和安全影响。
- en: Vulnerability No. Module Sec Obj Violated CWE Category CVSS [[6](#bib.bib6)]
    Security Impact Bug 1 - Secret key is not wiped under a invalid state. Key Manager
    Device Integrity Sensitive Information in Resource Not Removed Before Reuse -
    (226) 3.3 Information Leakage Bug 2 - Secret key is not wiped during the operation
    state. Key Manager Device Integrity Sensitive Information Not Removed Before Reuse
    - (226) 4.4 Information Leakage Bug 3 - JTAG does not support bus integrity checks.
    LC Controller Device Integrity Improper Protection for Outbound Error Messages
    and Alert Signals - (1320) 4 Unexpected Behavior Bug 4 - The message byte order
    conversion is not operational. HMAC Device Integrity Expected Behavior Violation
    - (440) 3.1 Unexpected Behavior Bug 5 - Digest is not cleared when SHA is disabled.
    HMAC Device Integrity Sensitive Information in Resource Not Removed Before Reuse
    - (226) 4.8 Information Leakage Bug 6 - Key is not written with randomly generated
    value. HMAC Exploits from Software Sensitive Information in Resource Not Removed
    Before Reuse - (226) 2.8 Unprivileged Access Bug 7 - Software does not provide
    the key in masked form. KMAC Exploits from Software Security Primitives and Cryptography
    Issues - (1205) 4.2 Information Leakage Bug 8 - Lock control signal is bypassed
    with fault instruction. OTP Controller Unprivileged Code Improper Access Control
    for Register Interface - (1262) 5.8 Unprivileged Access
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞编号 模块 安全 对象 违反 CWE 类别 CVSS [[6](#bib.bib6)] 安全影响 错误 1 - 秘密密钥在无效状态下未被擦除。密钥管理器
    设备完整性 资源中的敏感信息在重用前未被移除 - (226) 3.3 信息泄露 错误 2 - 秘密密钥在操作状态下未被擦除。密钥管理器 设备完整性 敏感信息在重用前未被移除
    - (226) 4.4 信息泄露 错误 3 - JTAG 不支持总线完整性检查。LC 控制器 设备完整性 对外部错误消息和警报信号的保护不当 - (1320)
    4 意外行为 错误 4 - 消息字节顺序转换不可操作。HMAC 设备完整性 预期行为违反 - (440) 3.1 意外行为 错误 5 - 当 SHA 被禁用时，摘要未被清除。HMAC
    设备完整性 资源中的敏感信息在重用前未被移除 - (226) 4.8 信息泄露 错误 6 - 密钥未用随机生成的值进行写入。HMAC 来自软件的利用 资源中的敏感信息在重用前未被移除
    - (226) 2.8 未授权访问 错误 7 - 软件未以掩码形式提供密钥。KMAC 来自软件的利用 安全原语和加密问题 - (1205) 4.2 信息泄露
    错误 8 - 锁控制信号被故障指令绕过。OTP 控制器 未授权代码 对寄存器接口的访问控制不当 - (1262) 5.8 未授权访问
- en: 'The extracted security properties provide us with essential information to
    construct various constraints when generating test cases for vulnerable IP designs.
    We choose to transfer the properties into SystemVerilog assertion format. Figure [7](#S5.F7
    "Figure 7 ‣ V-C Effectiveness in Discovering Violations ‣ V Experiments ‣ Unlocking
    Hardware Security Assurance: The Potential of LLMs") shows an example of the process,
    transforming an extracted property into an assertion that can be applied for verification.
    It breaks the conjunctions of the sentence to identify the fragments of the operation
    relation. The nouns are transformed into RTL-level registers based on the IP register
    listing, and the verbs are converted into operators. Finally, the fragments rejoin
    to present a constraint for operation behavior, which can be asserted into the
    original RTL. Table [VII](#S5.T7 "TABLE VII ‣ V-A Experimental Setup ‣ V Experiments
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs") outlines a few
    security properties generated by our framework and their corresponding CWE categories,
    from which we discover some vulnerabilities in the design. By creating constraints
    based on the acquired security properties and generating test cases on the design,
    we are able to detect eight vulnerabilities in the buggy IP designs. Table [VIII](#S5.T8
    "TABLE VIII ‣ V-C Effectiveness in Discovering Violations ‣ V Experiments ‣ Unlocking
    Hardware Security Assurance: The Potential of LLMs") demonstrates the details
    of eight bugs we identified from the extracted security properties. It presents
    the security objectives violated, CVSS score [[6](#bib.bib6)] (ranges from 0 to
    10, a higher score refers to more severe vulnerabilities), CWE categories, and
    the potential security impacts on the system. We will discuss these vulnerabilities
    and their impacts on the system as follows.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '提取的安全属性为我们提供了在生成针对脆弱 IP 设计的测试用例时构建各种约束的关键信息。我们选择将属性转移到 SystemVerilog 断言格式中。图
    [7](#S5.F7 "Figure 7 ‣ V-C Effectiveness in Discovering Violations ‣ V Experiments
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs") 展示了这一过程的示例，将提取的属性转化为可用于验证的断言。它将句子的连接词拆分，以识别操作关系的片段。名词根据
    IP 寄存器列表转换为 RTL 级别的寄存器，动词转换为操作符。最后，片段重新组合以展示操作行为的约束，这些约束可以断言到原始 RTL 中。表 [VII](#S5.T7
    "TABLE VII ‣ V-A Experimental Setup ‣ V Experiments ‣ Unlocking Hardware Security
    Assurance: The Potential of LLMs") 概述了我们框架生成的一些安全属性及其对应的 CWE 类别，从中发现了设计中的一些漏洞。通过基于获取的安全属性创建约束并在设计上生成测试用例，我们能够检测到八个漏洞。表
    [VIII](#S5.T8 "TABLE VIII ‣ V-C Effectiveness in Discovering Violations ‣ V Experiments
    ‣ Unlocking Hardware Security Assurance: The Potential of LLMs") 展示了从提取的安全属性中识别出的八个漏洞的详细信息。它展示了违反的安全目标、CVSS
    分数 [[6](#bib.bib6)]（范围从 0 到 10，分数越高表示漏洞越严重）、CWE 类别以及对系统的潜在安全影响。我们将接下来讨论这些漏洞及其对系统的影响。'
- en: '![Refer to caption](img/ad1ec0a18cfe7d4b1ffc4daa0680760b.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![参考说明](img/ad1ec0a18cfe7d4b1ffc4daa0680760b.png)'
- en: 'Figure 7: Process of transforming a security property into an assertion. The
    first row breaks the sentences into relation conjunctions. The second row identifies
    the design components and the operations. The third row converts the texts into
    registers and operators. The forth row reconstructs them into the constraint for
    verification.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7：将安全属性转化为断言的过程。第一行将句子拆分成关系连接词。第二行识别设计组件和操作。第三行将文本转换为寄存器和操作符。第四行将它们重构成验证约束。
- en: 'A. Key Manager: The key manager implements the root key operation for the system
    and allows it to protect critical assets from malicious software. Two vulnerabilities
    are found in this IP: (1) The security property requires the key manager to wipe
    internal storage when it is in an invalid state. However, the implementation reverses
    the operation and wipes the key under a valid state. (2) It is required to continuously
    wipe the secret key with entropy during the operation state. However, the implementation
    does not replace the key registers, leaving sensitive information vulnerable.
    These vulnerabilities could potentially impact the confidentiality of the secret
    key, allowing the attacker to reveal the key information.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: A. 关键管理器：关键管理器负责实现系统的根密钥操作，并使其能够保护关键资产免受恶意软件的侵害。在该IP中发现了两个漏洞：(1) 安全属性要求关键管理器在处于无效状态时擦除内部存储。然而，实际实现却反转了操作，在有效状态下擦除密钥。(2)
    在操作状态下要求持续擦除密钥以保持熵。然而，实际实现没有替换密钥寄存器，使得敏感信息容易受到攻击。这些漏洞可能会影响密钥的机密性，允许攻击者揭示密钥信息。
- en: 'B. LC Controller: The life cycle (LC) controller controls the peripheral interactions
    on the chip interconnect bus. The security property requires the signal fatal_bus_integ_error_q
    to be set to one, when any bus integrity fault is detected. However, the boundary-scan
    test controller (JTAG) Test Access Port (TAP) does not provide a bus integrity
    check signal, which might cause integrity check failure in the life cycle controller
    and unexpected behavior in the system.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: B. LC控制器：生命周期（LC）控制器控制芯片互连总线上的外围设备交互。安全属性要求在检测到任何总线完整性故障时，将信号fatal_bus_integ_error_q设置为1。然而，边界扫描测试控制器（JTAG）测试访问端口（TAP）没有提供总线完整性检查信号，这可能导致生命周期控制器中的完整性检查失败和系统中的意外行为。
- en: 'C. HMAC: The HMAC module implements a SHA-256 hash-based authentication module
    to ensure the integrity of any incoming message and its encryption code from the
    secret key. Three security bugs are found in this IP: (1) The first bug occurs
    when the software wants to convert the message byte order. It is required to set
    CFG.endian_swap register to one. However, the implementation reverses the operation,
    making the IP convert the message, when CFG.endian_swap is zero. This will cause
    unexpected operations due to incorrect instructions for converting messages. (2)
    The second bug occurs when the SHA engine is disabled. Although it is required
    to clear the digest in HMAC, no implementation is built to satisfy this property.
    (3) The third bug involves key randomization when the CPU writes values to the
    secret key. The key is required to be wiped with randomly generated value; however,
    no implementation is addressed for this property.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: C. HMAC：HMAC模块实现了基于SHA-256哈希的认证模块，以确保任何传入消息及其来自密钥的加密代码的完整性。在该IP中发现了三个安全漏洞：(1)
    第一个漏洞发生在软件想要转换消息字节顺序时。要求将CFG.endian_swap寄存器设置为1。然而，实际实现反转了操作，使得当CFG.endian_swap为0时，IP会转换消息。这将导致由于转换消息的指令不正确而产生意外操作。(2)
    第二个漏洞发生在SHA引擎被禁用时。虽然要求在HMAC中清除摘要，但没有实现满足这一属性的机制。(3) 第三个漏洞涉及到当CPU向密钥写入值时的密钥随机化。密钥需要用随机生成的值进行擦除；然而，没有实现这一属性的机制。
- en: 'D. KMAC: The KMAC module is a Keccak-based message authentication code generator
    used to verify the incoming messages. It utilizes masked permutations to prevent
    side-channel attacks. The security property requires the software to provide the
    key in masked form when the EnMasking parameter is not set and the SwKeyMasked
    parameter is set. However, this mechanism is not correctly implemented, leaving
    the software with an unmasked key. This could cause key leakage through an unprivileged
    software adversary.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: D. KMAC：KMAC模块是基于Keccak的消息认证码生成器，用于验证传入的消息。它利用掩码置换来防止旁道攻击。安全属性要求在EnMasking参数未设置且SwKeyMasked参数已设置时，软件提供掩码形式的密钥。然而，这一机制未被正确实现，导致软件使用了未掩码的密钥。这可能导致通过未授权的软件对手泄露密钥。
- en: 'E. OTP Memory Controller: The OTP memory controller is a module that provides
    a device with a one-time programming functionality. The security property only
    allows the IP to respond and write into the readout register when the lock control
    is not active. However, the IP is implemented with a mechanism that allows it
    to bypass the read-and-write lock control signal every four clock cycles. This
    will cause unpredictable behavior of the controller and allow the software adversary
    to attack the integrity of the module.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: E. OTP存储器控制器：OTP存储器控制器是一个为设备提供一次性编程功能的模块。安全属性仅允许IP在锁定控制未激活时响应并写入读出寄存器。然而，IP实现了一个机制，使其能够每四个时钟周期绕过读写锁控制信号。这将导致控制器行为不可预测，并允许软件攻击者攻击模块的完整性。
- en: In summary, we have discovered eight vulnerabilities in five hardware IP designs
    from the 326 security properties we generated using NSPG. These vulnerabilities
    may cause information leakage, unexpected behavior, and unprivileged accesses
    in these IPs. It proves that these extracted security properties can provide valuable
    information to generate constraints for the hardware verification process.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，我们在使用NSPG生成的326个安全属性中发现了五个硬件IP设计中的八个漏洞。这些漏洞可能导致信息泄露、意外行为和在这些IP中的非特权访问。这证明了这些提取的安全属性能够提供有价值的信息，用于生成硬件验证过程中的约束条件。
- en: VI Discussion
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VI 讨论
- en: 'A. False Positives and False Negatives: We will show some examples of the false
    positives and false negatives that were encountered, represented as FP and FN,
    respectively. A few of the FPs are short sentences that furnish equations or incomplete
    register interactions such as “How often FSM wakes up from ADC PD mode to take
    a sample, measured in always on clock cycles.” Although the framework is able
    to identify the operations, there is not enough information in the sentence to
    construct a complete security property. In contrast, FNs usually involve the structure
    of the sentences such as “To this end, the processor has to set the SIDELOAD bit
    in CTRL_SHADOWED to 1”. Despite including two registers, the operation does not
    describe their behaviors separately, making it difficult for NSPG to classify
    them. Overall, the FP rate is 4%, and FN rate is 15% for the five IP documents.
    It should be mentioned that NSPG is the first work that utilizes NLP for hardware
    security property generation, and there are potentials for further improving its
    performance.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: A. 假阳性和假阴性：我们将展示一些遇到的假阳性和假阴性的例子，分别表示为FP和FN。一些FP是简短的句子，提供方程式或不完整的寄存器交互，例如“FSM从ADC
    PD模式中唤醒以采样的频率，以始终开启的时钟周期来测量。”虽然框架能够识别这些操作，但句子中没有足够的信息来构建完整的安全属性。相比之下，FN通常涉及句子的结构，例如“为此，处理器必须将CTRL_SHADOWED中的SIDELOAD位设置为1”。尽管包含了两个寄存器，但操作没有单独描述它们的行为，使得NSPG很难对其进行分类。总体而言，五个IP文档的FP率为4%，FN率为15%。需要提到的是，NSPG是首个利用NLP进行硬件安全属性生成的工作，还有进一步提高其性能的潜力。
- en: 'B. Compared to text classification models: We also explore standard text classification
    models such as TF-IDF and Bag-of-Words trained with ${\mathcal{}{D}}_{cls}$. Among
    them, TF-IDF achieved 70% accuracy for OpenTitan, and 61% accuracy for RISC-V,
    Bag-of-Words achieved 51% accuracy for OpenTitan, and 53.12% for RISC-V. Hence,
    we can conclude that HS-BERT is significantly more effective than standard text
    classifiers.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: B. 与文本分类模型相比：我们还探索了标准文本分类模型，如TF-IDF和Bag-of-Words，这些模型使用${\mathcal{}{D}}_{cls}$进行训练。其中，TF-IDF在OpenTitan上的准确率为70%，在RISC-V上的准确率为61%，Bag-of-Words在OpenTitan上的准确率为51%，在RISC-V上的准确率为53.12%。因此，我们可以得出结论，HS-BERT比标准文本分类器显著更有效。
- en: 'C. Compared to ChatGPT: In this section, we compare NSPG against ChatGPT [[4](#bib.bib4)],
    a popular chatbot based on the OpenAI Generative Pre-trained Transformer (GPT)-3.5
    language model that is adept at generating human-like text responses to any input
    in a conversational context [[44](#bib.bib44)]. We investigated if such a state-of-the-art
    off-the-shelf general LLM can outperform a small domain-specific BERT model in
    solving the security property identification task. We evaluated their performances
    on a reduced dataset of 50 sentences, which contained 25 property-related and
    25 non-property-related sentences (the dataset size was necessitated by resource
    limitations, since GPT-3.5 is not publicly available as an open-source model).
    ChatGPT’s evaluation resulted in numerous false positives and false negatives,
    with only 35 sentences correctly classified, many of which were unsuitable for
    SoC security verification. For example, sentences like “The ADC is continually
    powered on” and “In addition, they could potentially also be extracted when being
    transferred over the TL-UL bus interface” were incorrectly classified as properties.
    Conversely, sentences such as “For encryption or if the mode is set to CFB, OFB,
    or CTR, there is no such initial delay upon changing the key” and “The AES unit
    cannot recover from such an error and needs to be reset” were labeled as non-properties.
    The accuracy, recall and F1-score obtained by the ChatGPT model were 68%, 88%
    and 73%, respectively. On the contrary, NSPG outperforms ChatGPT by identifying
    all 25 property-related sentences, thereby furnishing an accuracy, recall, and
    F-1 score of 100%, respectively.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: C. 与 ChatGPT 的比较：在本节中，我们将 NSPG 与 ChatGPT [[4](#bib.bib4)] 进行比较，后者是基于 OpenAI
    生成预训练变换器 (GPT)-3.5 语言模型的流行聊天机器人，该模型擅长生成类似人类的文本响应以适应任何对话上下文 [[44](#bib.bib44)]。我们调查了这种最先进的现成通用
    LLM 是否能在解决安全属性识别任务中超越一个小型领域特定的 BERT 模型。我们在一个包含 50 个句子的缩减数据集上评估了它们的表现，该数据集包含 25
    个与属性相关的句子和 25 个与属性无关的句子（数据集的大小因资源限制而有所限制，因为 GPT-3.5 不是公开的开源模型）。ChatGPT 的评估结果显示出大量的假阳性和假阴性，只有
    35 个句子被正确分类，其中许多不适合 SoC 安全验证。例如，“ADC 持续供电”和“此外，它们可能在通过 TL-UL 总线接口传输时被提取”这类句子被错误地分类为属性。相反，“对于加密或当模式设置为
    CFB、OFB 或 CTR 时，切换密钥时没有初始延迟”和“AES 单元无法从此类错误中恢复，需要重置”这类句子被标记为非属性。ChatGPT 模型获得的准确率、召回率和
    F1 得分分别为 68%、88% 和 73%。相反，NSPG 通过识别所有 25 个与属性相关的句子表现优于 ChatGPT，从而分别提供了 100% 的准确率、召回率和
    F1 得分。
- en: VII Related Work
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VII 相关工作
- en: This section presents prior related work proposed for hardware security property
    generation and verification.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了为硬件安全属性生成和验证提出的相关工作。
- en: VII-A Hardware Security Verification Approaches
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: VII-A 硬件安全验证方法
- en: Information Flow Tracking (IFT) improves hardware security by identifying malicious
    input interfaces, regulating the use of counterfeit information, and verifying
    hardware operation flows [[47](#bib.bib47), [48](#bib.bib48), [42](#bib.bib42),
    [13](#bib.bib13), [43](#bib.bib43), [14](#bib.bib14)]. This approach has been
    demonstrated to effectively detect malicious attacks with security property-generated
    constraints. Theorem proving utilizes a language, VeriCoq, to automate the transformation
    of RTL into Coq theorem. This approach validates the converted language through
    the Proof-Carrying Hardware Intellectual Property (PCHIP) framework and ensures
    the robustness of a third-party IP with formal proofs of security properties [[36](#bib.bib36),
    [18](#bib.bib18)]. Assertion-based security verification employs formal and simulation-based
    methods to detect violations against assertions included in RTL designs [[19](#bib.bib19),
    [30](#bib.bib30)]. Property-specific information flow utilizes property specifications
    to generate information flow models that are catered to the pre-defined security
    properties. The models are verified by conducting a property-specific search and
    identifying security-critical paths [[31](#bib.bib31)]. Directed test generation
    has been developed to address state space explosion. Existing research, such as [[11](#bib.bib11),
    [37](#bib.bib37)], utilize control flow graphs on RTL models to ensure functional
    correctness. Symbolic techniques incorporating security properties and concolic
    testing can detect violations in RTL and conclusively verify designs [[39](#bib.bib39),
    [50](#bib.bib50)].
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 信息流跟踪（IFT）通过识别恶意输入接口、调节伪造信息的使用以及验证硬件操作流程来提升硬件安全性[[47](#bib.bib47), [48](#bib.bib48),
    [42](#bib.bib42), [13](#bib.bib13), [43](#bib.bib43), [14](#bib.bib14)]。这种方法已被证明能够有效地检测到恶意攻击，满足安全属性生成的约束条件。定理证明使用一种语言VeriCoq来自动将RTL转换为Coq定理。这种方法通过Proof-Carrying
    Hardware Intellectual Property (PCHIP)框架验证转换后的语言，并确保第三方IP的鲁棒性，提供安全属性的形式化证明[[36](#bib.bib36),
    [18](#bib.bib18)]。基于断言的安全验证采用形式化和模拟方法来检测RTL设计中断言违反的情况[[19](#bib.bib19), [30](#bib.bib30)]。特定属性信息流利用属性规范生成符合预定义安全属性的信息流模型。通过进行特定属性搜索并识别安全关键路径来验证这些模型[[31](#bib.bib31)]。定向测试生成已被开发以应对状态空间爆炸。现有研究，如[[11](#bib.bib11),
    [37](#bib.bib37)]，利用RTL模型上的控制流图来确保功能正确性。结合安全属性的符号技术和符号测试可以检测RTL中的违反情况，并最终验证设计[[39](#bib.bib39),
    [50](#bib.bib50)]。
- en: VII-B Property Generation Techniques
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: VII-B 属性生成技术
- en: A recent approach, Isadora, creates information flow specifications of core
    designs and combines IFT and security specifications [[22](#bib.bib22)]. It requires
    conclusive testbenches and simulation traces for property generation. Therefore,
    it might be not scalable when applied to more complex SoCs. PCHIP introduces the
    concept of theorem generation functions, which enables the generation of security
    theorems independent from the information flow traces, thereby assisting in the
    development of data secrecy properties [[33](#bib.bib33), [17](#bib.bib17)]. However,
    PCHIP is only limited to cryptographic circuits. SCIFinder is a recent approach
    that generates Security-Critical Invariants (SCI) for design verification [[51](#bib.bib51)].
    This approach only studies a limited size of security properties and is not scalable
    when applied to property generation on more complex processors. Comments-based
    property generation is an NLP-based translation technique was developed, which
    automatically generates Computation Tree Logic (CTL) verification properties from
    Hardware Description Language (HDL) code comments [[29](#bib.bib29)]. In comparison,
    NSPG uses a BERT model to automatically identify and generate new security property-related
    sentences from the documentation. Furthermore, [[29](#bib.bib29)] has been evaluated
    only on small *well-commented* benchmarks.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 最近一种方法Isadora，创建核心设计的信息流规范，并结合IFT和安全规范[[22](#bib.bib22)]。它需要确定性的测试平台和仿真轨迹来生成属性。因此，当应用于更复杂的SoC时，它可能不具备可扩展性。PCHIP引入了定理生成函数的概念，这使得可以生成独立于信息流轨迹的安全定理，从而帮助开发数据保密属性[[33](#bib.bib33),
    [17](#bib.bib17)]。然而，PCHIP仅限于加密电路。SCIFinder是一种最近的方法，用于生成设计验证的安全关键不变量（SCI）[[51](#bib.bib51)]。这种方法仅研究有限大小的安全属性，当应用于更复杂的处理器上的属性生成时，不能扩展。基于注释的属性生成是一种NLP基础的翻译技术，它从硬件描述语言（HDL）代码注释中自动生成计算树逻辑（CTL）验证属性[[29](#bib.bib29)]。相比之下，NSPG使用BERT模型从文档中自动识别和生成新的安全属性相关句子。此外，[[29](#bib.bib29)]仅在小型*注释良好的*基准上进行了评估。
- en: VIII Conclusion
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VIII 结论
- en: This paper presents NSPG, the first NLP-based automated hardware security property
    generation method, that utilizes SoC documentation to extract security properties.
    NSPG includes a novel hardware security-specific language model (HS-BERT) and
    a data modification technique to improve automated security property generation.
    Our framework is evaluated on OpenTitan SoC documentation, resulting in 326 correctly
    extracted security properties from 1723 sentences for five hardware IPs. Furthermore,
    these security properties help discover eight vulnerabilities in a buggy design,
    which proves the effectiveness of the generated security properties. Additionally,
    our evaluations prove that NSPG furnishes better performance than ChatGPT, a popular
    chatbot system, for SoC security property generation. With the advent of LLMs,
    we envision that NSPG will lay the foundation for utilizing NLP approaches in
    SoC design and verification.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 本文介绍了NSPG，这是一种基于NLP的自动化硬件安全属性生成方法，它利用SoC文档来提取安全属性。NSPG包括一种新型的硬件安全专用语言模型（HS-BERT）和一种数据修改技术，以改善自动化安全属性生成。我们的框架在OpenTitan
    SoC文档上进行了评估，从1723个句子中为五个硬件IP正确提取了326个安全属性。此外，这些安全属性有助于发现设计中的八个漏洞，这证明了生成的安全属性的有效性。此外，我们的评估证明，NSPG在SoC安全属性生成方面表现优于流行的聊天机器人系统ChatGPT。随着LLMs的出现，我们设想NSPG将为在SoC设计和验证中利用NLP方法奠定基础。
- en: IX Acknowledgement
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IX 致谢
- en: This research is partially supported by Technology Innovation Institute, Abu
    Dhabi, United Arab Emirates.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 本研究部分得到了阿布扎比阿联酋技术创新研究所的支持。
- en: References
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] “Cwe - cwe-1194: Hardware design (4.0),” [https://cwe.mitre.org/data/definitions/1194.html](https://cwe.mitre.org/data/definitions/1194.html),
    (Accessed on 05/15/2020).'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[1] “Cwe - cwe-1194: 硬件设计 (4.0),” [https://cwe.mitre.org/data/definitions/1194.html](https://cwe.mitre.org/data/definitions/1194.html),
    (访问时间：2020年5月15日)。'
- en: '[2] “Github - shal/cppdoc: Powerful documentation generation tool for c++,”
    [https://github.com/shal/cppdoc](https://github.com/shal/cppdoc), (Accessed on
    01/12/2023).'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2] “Github - shal/cppdoc: 强大的C++文档生成工具,” [https://github.com/shal/cppdoc](https://github.com/shal/cppdoc),
    (访问时间：2023年1月12日)。'
- en: '[3] “Hack@dac22 – hack@event hw ctf,” [https://hackatevent.org/hackdac22/](https://hackatevent.org/hackdac22/),
    (Accessed on 01/26/2023).'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3] “Hack@dac22 – hack@event hw ctf,” [https://hackatevent.org/hackdac22/](https://hackatevent.org/hackdac22/),
    (访问时间：2023年1月26日)。'
- en: '[4] “Introducing chatgpt,” [https://openai.com/blog/chatgpt](https://openai.com/blog/chatgpt),
    (Accessed on 04/12/2023).'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[4] “介绍 ChatGPT，” [https://openai.com/blog/chatgpt](https://openai.com/blog/chatgpt)，（访问日期：2023年4月12日）。'
- en: '[5] “Javadoc tool home page,” [https://www.oracle.com/java/technologies/javase/javadoc-tool.html](https://www.oracle.com/java/technologies/javase/javadoc-tool.html),
    (Accessed on 01/12/2023).'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5] “Javadoc 工具主页，” [https://www.oracle.com/java/technologies/javase/javadoc-tool.html](https://www.oracle.com/java/technologies/javase/javadoc-tool.html)，（访问日期：2023年1月12日）。'
- en: '[6] “NVD - CVSS v3 calculator,” [https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator),
    (Accessed on 02/05/2023).'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[6] “NVD - CVSS v3 计算器，” [https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator)，（访问日期：2023年2月5日）。'
- en: '[7] “Opentitan — opentitan documentation,” [https://docs.opentitan.org/](https://docs.opentitan.org/),
    (Accessed on 01/26/2023).'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[7] “Opentitan — opentitan 文档，” [https://docs.opentitan.org/](https://docs.opentitan.org/)，（访问日期：2023年1月26日）。'
- en: '[8] “Questa Secure Check - Exhaustive Verification of Secure Paths — Siemens
    Software,” [https://eda.sw.siemens.com/en-US/ic/questa/formal-verification/secure-check/](https://eda.sw.siemens.com/en-US/ic/questa/formal-verification/secure-check/),
    (Accessed on 02/05/2023).'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[8] “Questa Secure Check - 安全路径的全面验证 — 西门子软件，” [https://eda.sw.siemens.com/en-US/ic/questa/formal-verification/secure-check/](https://eda.sw.siemens.com/en-US/ic/questa/formal-verification/secure-check/)，（访问日期：2023年2月5日）。'
- en: '[9] “Risc-v instruction set specifications — riscv-isa-pages documentation,”
    [https://msyksphinz-self.github.io/riscv-isadoc/html/index.html](https://msyksphinz-self.github.io/riscv-isadoc/html/index.html),
    (Accessed on 01/27/2023).'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[9] “Risc-v 指令集规格 — riscv-isa-pages 文档，” [https://msyksphinz-self.github.io/riscv-isadoc/html/index.html](https://msyksphinz-self.github.io/riscv-isadoc/html/index.html)，（访问日期：2023年1月27日）。'
- en: '[10] “Tortuga Logic — Synopsys,” [https://www.synopsys.com/dw/ipdir.php?ds=arc-access-member-tortuga-logic](https://www.synopsys.com/dw/ipdir.php?ds=arc-access-member-tortuga-logic),
    (Accessed on 02/05/2023).'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[10] “Tortuga Logic — Synopsys，” [https://www.synopsys.com/dw/ipdir.php?ds=arc-access-member-tortuga-logic](https://www.synopsys.com/dw/ipdir.php?ds=arc-access-member-tortuga-logic)，（访问日期：2023年2月5日）。'
- en: '[11] A. Ahmed, F. Farahmandi, and P. Mishra, “Directed test generation using
    concolic testing on rtl models,” in *2018 Design, Automation & Test in Europe
    Conference & Exhibition (DATE)*.   IEEE, 2018, pp. 1538–1543.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[11] A. Ahmed, F. Farahmandi, 和 P. Mishra, “使用合成测试生成有向测试对 RTL 模型进行测试，” 见于 *2018年设计、自动化与测试欧洲会议与展览（DATE）*。
    IEEE，2018年，第1538–1543页。'
- en: '[12] W. Ammar, D. Groeneveld, C. Bhagavatula, I. Beltagy, M. Crawford, D. Downey,
    J. Dunkelberger, A. Elgohary, S. Feldman, V. Ha *et al.*, “Construction of the
    literature graph in semantic scholar,” *arXiv preprint arXiv:1805.02262*, 2018.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[12] W. Ammar, D. Groeneveld, C. Bhagavatula, I. Beltagy, M. Crawford, D. Downey,
    J. Dunkelberger, A. Elgohary, S. Feldman, V. Ha *等*，“在 Semantic Scholar 中构建文献图谱，”
    *arXiv 预印本 arXiv:1805.02262*，2018年。'
- en: '[13] A. Ardeshiricham, W. Hu, J. Marxen, and R. Kastner, “Register transfer
    level information flow tracking for provably secure hardware design,” in *Design,
    Automation & Test in Europe Conference & Exhibition (DATE), 2017*.   IEEE, 2017,
    pp. 1691–1696.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[13] A. Ardeshiricham, W. Hu, J. Marxen, 和 R. Kastner, “寄存器传输级信息流跟踪用于可证明安全的硬件设计，”
    见于 *2017年设计、自动化与测试欧洲会议与展览（DATE）*。 IEEE，2017年，第1691–1696页。'
- en: '[14] A. Ardeshiricham, Y. Takashima, S. Gao, and R. Kastner, “Verisketch: Synthesizing
    secure hardware designs with timing-sensitive information flow properties,” in
    *Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications
    Security*, 2019, pp. 1623–1638.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[14] A. Ardeshiricham, Y. Takashima, S. Gao, 和 R. Kastner, “Verisketch: 具有时间敏感信息流属性的安全硬件设计合成，”
    见于 *2019年ACM SIGSAC计算机与通信安全会议论文集*，2019年，第1623–1638页。'
- en: '[15] I. Beltagy, K. Lo, and A. Cohan, “Scibert: A pretrained language model
    for scientific text,” *arXiv preprint arXiv:1903.10676*, 2019.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[15] I. Beltagy, K. Lo, 和 A. Cohan, “Scibert: 一个用于科学文本的预训练语言模型，” *arXiv 预印本
    arXiv:1903.10676*，2019年。'
- en: '[16] B. Bentley, “Validating the intel pentium 4 microprocessor,” in *Proceedings
    of the 38th annual Design Automation Conference*, 2001, pp. 244–248.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[16] B. Bentley, “验证英特尔 Pentium 4 微处理器，” 见于 *第38届年度设计自动化会议论文集*，2001年，第244–248页。'
- en: '[17] M.-M. Bidmeshki, X. Guo, R. G. Dutta, Y. Jin, and Y. Makris, “Data secrecy
    protection through information flow tracking in proof-carrying hardware ip—part
    ii: Framework automation,” *IEEE Transactions on Information Forensics and Security*,
    vol. 12, no. 10, pp. 2430–2443, 2017.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[17] M.-M. Bidmeshki, X. Guo, R. G. Dutta, Y. Jin, 和 Y. Makris, “通过信息流跟踪保护数据保密性在证明硬件
    IP 中—第 II 部分：框架自动化，” *IEEE 信息取证与安全期刊*，第12卷，第10期，第2430–2443页，2017年。'
- en: '[18] M.-M. Bidmeshki and Y. Makris, “Vericoq: A verilog-to-coq converter for
    proof-carrying hardware automation,” in *ISCAS*.   IEEE, 2015, pp. 29–32.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[18] M.-M. Bidmeshki 和 Y. Makris, “Vericoq：一个用于证明携带硬件自动化的Verilog到Coq转换器，” 见
    *ISCAS*。 IEEE，2015年，第29–32页。'
- en: '[19] M. Bilzor, T. Huffmire, C. Irvine, and T. Levin, “Evaluating security
    requirements in a general-purpose processor by combining assertion checkers with
    code coverage,” in *2012 IEEE International Symposium on Hardware-Oriented Security
    and Trust*.   IEEE, 2012, pp. 49–54.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[19] M. Bilzor, T. Huffmire, C. Irvine, 和 T. Levin, “通过将断言检查器与代码覆盖相结合来评估通用处理器中的安全要求，”
    见 *2012年IEEE硬件导向安全与信任国际研讨会*。 IEEE，2012年，第49–54页。'
- en: '[20] Cadence, “Jaspergold formal verification platform (apps),” [https://www.cadence.com/en_US/home/tools/system-design-and-verification/formal-and-static-verification/jasper-gold-verification-platform.html](https://www.cadence.com/en_US/home/tools/system-design-and-verification/formal-and-static-verification/jasper-gold-verification-platform.html),
    (Accessed on 05/15/2020).'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[20] Cadence, “Jaspergold形式验证平台（应用），” [https://www.cadence.com/en_US/home/tools/system-design-and-verification/formal-and-static-verification/jasper-gold-verification-platform.html](https://www.cadence.com/en_US/home/tools/system-design-and-verification/formal-and-static-verification/jasper-gold-verification-platform.html)，（访问于2020年5月15日）。'
- en: '[21] G. Dessouky, D. Gens, P. Haney, G. Persyn, A. Kanuparthi, H. Khattri,
    J. M. Fung, A.-R. Sadeghi, and J. Rajendran, “$\{$ hardware bugs,” in *28th USENIX
    Security Symposium (USENIX Security 19)*, 2019, pp. 213–230.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[21] G. Dessouky, D. Gens, P. Haney, G. Persyn, A. Kanuparthi, H. Khattri,
    J. M. Fung, A.-R. Sadeghi, 和 J. Rajendran, “$\{$ 硬件缺陷,” 见 *第28届USENIX安全研讨会（USENIX
    Security 19）*，2019年，第213–230页。'
- en: '[22] C. Deutschbein, A. Meza, F. Restuccia, R. Kastner, and C. Sturton, “Isadora:
    Automated information flow property generation for hardware designs,” in *Proceedings
    of the 5th Workshop on Attacks and Solutions in Hardware Security*, 2021, pp.
    5–15.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[22] C. Deutschbein, A. Meza, F. Restuccia, R. Kastner, 和 C. Sturton, “Isadora：自动化信息流属性生成用于硬件设计，”
    见 *第五届硬件安全攻击与解决方案研讨会论文集*，2021年，第5–15页。'
- en: '[23] J. Devlin, M.-W. Chang, K. Lee, and K. Toutanova, “Bert: Pre-training
    of deep bidirectional transformers for language understanding,” *arXiv preprint
    arXiv:1810.04805*, 2018.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[23] J. Devlin, M.-W. Chang, K. Lee, 和 K. Toutanova, “Bert：深度双向变换器的预训练用于语言理解，”
    *arXiv预印本 arXiv:1810.04805*，2018年。'
- en: '[24] N. Farzana, F. Rahman, M. Tehranipoor, and F. Farahmandi, “Soc security
    verification using property checking,” in *2019 IEEE International Test Conference
    (ITC)*.   IEEE, 2019, pp. 1–10.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[24] N. Farzana, F. Rahman, M. Tehranipoor, 和 F. Farahmandi, “使用属性检查进行SoC安全验证，”
    见 *2019年IEEE国际测试会议（ITC）*。 IEEE，2019年，第1–10页。'
- en: '[25] E. A. Felix and S. P. Lee, “Systematic literature review of preprocessing
    techniques for imbalanced data,” *IET Software*, vol. 13, no. 6, pp. 479–496,
    2019.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[25] E. A. Felix 和 S. P. Lee, “关于不平衡数据的预处理技术的系统文献综述，” *IET软件*，第13卷，第6期，第479–496页，2019年。'
- en: '[26] S. Y. Feng, V. Gangal, J. Wei, S. Chandar, S. Vosoughi, T. Mitamura, and
    E. Hovy, “A survey of data augmentation approaches for nlp,” *arXiv preprint arXiv:2105.03075*,
    2021.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[26] S. Y. Feng, V. Gangal, J. Wei, S. Chandar, S. Vosoughi, T. Mitamura, 和
    E. Hovy, “自然语言处理的数据增强方法综述，” *arXiv预印本 arXiv:2105.03075*，2021年。'
- en: '[27] A. Gillioz, J. Casas, E. Mugellini, and O. Abou Khaled, “Overview of the
    transformer-based models for nlp tasks,” in *2020 15th Conference on Computer
    Science and Information Systems (FedCSIS)*.   IEEE, 2020, pp. 179–183.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[27] A. Gillioz, J. Casas, E. Mugellini, 和 O. Abou Khaled, “基于变换器模型的自然语言处理任务概述，”
    见 *2020年第十五届计算机科学与信息系统会议（FedCSIS）*。 IEEE，2020年，第179–183页。'
- en: '[28] S. Gupta and A. Gupta, “A set of measures designed to identify overlapped
    instances in software defect prediction,” *Computing*, vol. 99, no. 9, pp. 889–914,
    2017.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[28] S. Gupta 和 A. Gupta, “一组用于识别软件缺陷预测中重叠实例的度量，” *计算*，第99卷，第9期，第889–914页，2017年。'
- en: '[29] C. B. Harris and I. G. Harris, “Generating formal hardware verification
    properties from natural language documentation,” in *Proceedings of the 2015 IEEE
    9th International Conference on Semantic Computing (IEEE ICSC 2015)*.   IEEE,
    2015, pp. 49–56.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[29] C. B. Harris 和 I. G. Harris, “从自然语言文档生成形式硬件验证属性，” 见 *2015年IEEE第九届语义计算国际会议论文集（IEEE
    ICSC 2015）*。 IEEE，2015年，第49–56页。'
- en: '[30] M. Hicks, C. Sturton, S. T. King, and J. M. Smith, “Specs: A lightweight
    runtime mechanism for protecting software from security-critical processor bugs,”
    in *Proceedings of the Twentieth International Conference on Architectural Support
    for Programming Languages and Operating Systems*, 2015, pp. 517–529.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[30] M. Hicks, C. Sturton, S. T. King, 和 J. M. Smith, “Specs：一种轻量级运行时机制，用于保护软件免受安全关键处理器缺陷的影响，”
    见 *第二十届编程语言与操作系统体系结构支持国际会议论文集*，2015年，第517–529页。'
- en: '[31] W. Hu, A. Ardeshiricham, M. S. Gobulukoglu, X. Wang, and R. Kastner, “Property
    specific information flow analysis for hardware security verification,” in *2018
    IEEE/ACM International Conference on Computer-Aided Design (ICCAD)*.   IEEE, 2018,
    pp. 1–8.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[31] W. Hu, A. Ardeshiricham, M. S. Gobulukoglu, X. Wang, 和 R. Kastner，“针对硬件安全验证的属性特定信息流分析，”在
    *2018 IEEE/ACM International Conference on Computer-Aided Design (ICCAD)*。 IEEE,
    2018, pp. 1–8。'
- en: '[32] T. Iliou, C.-N. Anagnostopoulos, M. Nerantzaki, and G. Anastassopoulos,
    “A novel machine learning data preprocessing method for enhancing classification
    algorithms performance,” in *Proceedings of the 16th International Conference
    on Engineering Applications of Neural Networks (INNS)*, 2015, pp. 1–5.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[32] T. Iliou, C.-N. Anagnostopoulos, M. Nerantzaki, 和 G. Anastassopoulos，“一种新颖的机器学习数据预处理方法，用于提升分类算法的性能，”在
    *Proceedings of the 16th International Conference on Engineering Applications
    of Neural Networks (INNS)*, 2015, pp. 1–5。'
- en: '[33] Y. Jin, X. Guo, R. G. Dutta, M.-M. Bidmeshki, and Y. Makris, “Data secrecy
    protection through information flow tracking in proof-carrying hardware ip—part
    i: Framework fundamentals,” *IEEE Transactions on Information Forensics and Security*,
    vol. 12, no. 10, pp. 2416–2429, 2017.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[33] Y. Jin, X. Guo, R. G. Dutta, M.-M. Bidmeshki, 和 Y. Makris，“通过信息流跟踪保护数据机密性在证明携带的硬件IP中的应用——第一部分：框架基础，”
    *IEEE Transactions on Information Forensics and Security*, vol. 12, no. 10, pp.
    2416–2429, 2017。'
- en: '[34] B. Krawczyk, M. Woźniak, and G. Schaefer, “Cost-sensitive decision tree
    ensembles for effective imbalanced classification,” *Applied Soft Computing*,
    vol. 14, pp. 554–562, 2014.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[34] B. Krawczyk, M. Woźniak, 和 G. Schaefer，“用于有效不平衡分类的成本敏感决策树集成，” *Applied
    Soft Computing*, vol. 14, pp. 554–562, 2014。'
- en: '[35] J. Lee, W. Yoon, S. Kim, D. Kim, S. Kim, C. H. So, and J. Kang, “Biobert:
    a pre-trained biomedical language representation model for biomedical text mining,”
    *Bioinformatics*, vol. 36, no. 4, pp. 1234–1240, 2020.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[35] J. Lee, W. Yoon, S. Kim, D. Kim, S. Kim, C. H. So, 和 J. Kang，“Biobert：用于生物医学文本挖掘的预训练生物医学语言表示模型，”
    *Bioinformatics*, vol. 36, no. 4, pp. 1234–1240, 2020。'
- en: '[36] E. Love, Y. Jin, and Y. Makris, “Proof-carrying hardware intellectual
    property: A pathway to trusted module acquisition,” *IEEE Transactions on Information
    Forensics and Security*, vol. 7, no. 1, pp. 25–40, 2011.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[36] E. Love, Y. Jin, 和 Y. Makris，“证明携带的硬件知识产权：通向可信模块获取的途径，” *IEEE Transactions
    on Information Forensics and Security*, vol. 7, no. 1, pp. 25–40, 2011。'
- en: '[37] Y. Lyu and P. Mishra, “Automated test generation for activation of assertions
    in rtl models,” in *ASP-DAC*, 2020.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[37] Y. Lyu 和 P. Mishra，“用于激活RTL模型中断言的自动化测试生成，”在 *ASP-DAC*, 2020。'
- en: '[38] A. Maña and G. Pujol, “Towards formal specification of abstract security
    properties,” in *2008 Third International Conference on Availability, Reliability
    and Security*.   IEEE, 2008, pp. 80–87.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[38] A. Maña 和 G. Pujol，“朝着抽象安全属性的形式规范化，”在 *2008 Third International Conference
    on Availability, Reliability and Security*。 IEEE, 2008, pp. 80–87。'
- en: '[39] X. Meng, S. Kundu, A. K. Kanuparthi, and K. Basu, “Rtl-contest: Concolic
    testing on rtl for detecting security vulnerabilities,” *IEEE Transactions on
    Computer-Aided Design of Integrated Circuits and Systems*, vol. 41, no. 3, pp.
    466–477, 2021.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[39] X. Meng, S. Kundu, A. K. Kanuparthi, 和 K. Basu，“Rtl-contest：用于检测安全漏洞的RTL上的组合测试，”
    *IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems*,
    vol. 41, no. 3, pp. 466–477, 2021。'
- en: '[40] G. A. Miller, “Wordnet: a lexical database for english,” *Communications
    of the ACM*, vol. 38, no. 11, pp. 39–41, 1995.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[40] G. A. Miller，“Wordnet: 一个英语词汇数据库，” *Communications of the ACM*, vol. 38,
    no. 11, pp. 39–41, 1995。'
- en: '[41] R. C. Moore and W. Lewis, “Intelligent selection of language model training
    data,” in *Proceedings of the ACL 2010 conference short papers*, 2010, pp. 220–224.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[41] R. C. Moore 和 W. Lewis，“语言模型训练数据的智能选择，”在 *Proceedings of the ACL 2010
    conference short papers*, 2010, pp. 220–224。'
- en: '[42] J. Oberg, W. Hu, A. Irturk, M. Tiwari, T. Sherwood, and R. Kastner, “Theoretical
    analysis of gate level information flow tracking,” in *Proceedings of the 47th
    Design Automation Conference*, 2010, pp. 244–247.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[42] J. Oberg, W. Hu, A. Irturk, M. Tiwari, T. Sherwood, 和 R. Kastner，“门级信息流跟踪的理论分析，”在
    *Proceedings of the 47th Design Automation Conference*, 2010, pp. 244–247。'
- en: '[43] M. Qin, X. Wang, B. Mao, D. Mu, and W. Hu, “A formal model for proving
    hardware timing properties and identifying timing channels,” *Integration*, vol. 72,
    pp. 123–133, 2020.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[43] M. Qin, X. Wang, B. Mao, D. Mu, 和 W. Hu，“一个用于证明硬件时序属性和识别时序通道的形式模型，” *Integration*,
    vol. 72, pp. 123–133, 2020。'
- en: '[44] J. Schulman, B. Zoph, C. Kim, J. Hilton, J. Menick, J. Weng, J. F. C.
    Uribe, L. Fedus, L. Metz, M. Pokorny *et al.*, “Chatgpt: Optimizing language models
    for dialogue,” *OpenAI blog*, 2022.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[44] J. Schulman, B. Zoph, C. Kim, J. Hilton, J. Menick, J. Weng, J. F. C.
    Uribe, L. Fedus, L. Metz, M. Pokorny *等*, “Chatgpt: 为对话优化语言模型，” *OpenAI blog*,
    2022。'
- en: '[45] R. Sennrich, B. Haddow, and A. Birch, “Neural machine translation of rare
    words with subword units,” in *Proceedings of the 54th Annual Meeting of the Association
    for Computational Linguistics (Volume 1: Long Papers)*.   Berlin, Germany: Association
    for Computational Linguistics, Aug. 2016, pp. 1715–1725\. [Online]. Available:
    [https://aclanthology.org/P16-1162](https://aclanthology.org/P16-1162)'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[45] R. Sennrich, B. Haddow, 和 A. Birch，“使用子词单元进行稀有词的神经机器翻译，”见于*第54届计算语言学协会年会（第1卷：长篇论文）*。
     德国柏林：计算语言学协会，2016年8月，第1715–1725页。[在线]。可用：[https://aclanthology.org/P16-1162](https://aclanthology.org/P16-1162)'
- en: '[46] J. Stefanowski, “Dealing with data difficulty factors while learning from
    imbalanced data,” in *Challenges in computational statistics and data mining*.   Springer,
    2016, pp. 333–363.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[46] J. Stefanowski, “在学习不平衡数据时处理数据困难因素，”见于*计算统计学与数据挖掘中的挑战*。  Springer，2016，第333–363页。'
- en: '[47] G. E. Suh, J. W. Lee, D. Zhang, and S. Devadas, “Secure program execution
    via dynamic information flow tracking,” *ACM Sigplan Notices*, vol. 39, no. 11,
    pp. 85–96, 2004.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[47] G. E. Suh, J. W. Lee, D. Zhang, 和 S. Devadas，“通过动态信息流追踪实现安全程序执行，”*ACM
    Sigplan Notices*，第39卷，第11期，第85–96页，2004。'
- en: '[48] M. Tiwari, H. M. Wassel, B. Mazloom, S. Mysore, F. T. Chong, and T. Sherwood,
    “Complete information flow tracking from the gates up,” in *Proceedings of the
    14th international conference on Architectural support for programming languages
    and operating systems*, 2009, pp. 109–120.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[48] M. Tiwari, H. M. Wassel, B. Mazloom, S. Mysore, F. T. Chong, 和 T. Sherwood，“从门级开始的完整信息流追踪，”见于*第14届国际编程语言和操作系统架构支持会议*，2009，第109–120页。'
- en: '[49] Y. Wu, M. Schuster, Z. Chen, Q. V. Le, M. Norouzi, W. Macherey, M. Krikun,
    Y. Cao, Q. Gao, K. Macherey *et al.*, “Google’s neural machine translation system:
    Bridging the gap between human and machine translation,” *arXiv preprint arXiv:1609.08144*,
    2016.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[49] Y. Wu, M. Schuster, Z. Chen, Q. V. Le, M. Norouzi, W. Macherey, M. Krikun,
    Y. Cao, Q. Gao, K. Macherey *等*，“谷歌的神经机器翻译系统：弥合人类与机器翻译之间的差距，”*arXiv预印本 arXiv:1609.08144*，2016。'
- en: '[50] R. Zhang, C. Deutschbein, P. Huang, and C. Sturton, “End-to-end automated
    exploit generation for validating the security of processor designs,” in *2018
    51st Annual IEEE/ACM International Symposium on Microarchitecture (MICRO)*.   IEEE,
    2018, pp. 815–827.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[50] R. Zhang, C. Deutschbein, P. Huang, 和 C. Sturton，“端到端自动化漏洞生成用于验证处理器设计的安全性，”见于*2018年第51届IEEE/ACM国际微架构研讨会（MICRO）*。
     IEEE，2018，第815–827页。'
- en: '[51] R. Zhang, N. Stanley, C. Griggs, A. Chi, and C. Sturton, “Identifying
    security critical properties for the dynamic verification of a processor,” *ACM
    SIGARCH Computer Architecture News*, vol. 45, no. 1, pp. 541–554, 2017.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[51] R. Zhang, N. Stanley, C. Griggs, A. Chi, 和 C. Sturton，“识别处理器动态验证的安全关键属性，”*ACM
    SIGARCH计算机架构新闻*，第45卷，第1期，第541–554页，2017。'
