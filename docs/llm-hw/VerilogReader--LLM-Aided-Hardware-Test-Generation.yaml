- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-09-08 18:51:33'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-09-08 18:51:33
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'VerilogReader: LLM-Aided Hardware Test Generation'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VerilogReader：LLM辅助的硬件测试生成
- en: 来源：[https://ar5iv.labs.arxiv.org/html/2406.04373](https://ar5iv.labs.arxiv.org/html/2406.04373)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://ar5iv.labs.arxiv.org/html/2406.04373](https://ar5iv.labs.arxiv.org/html/2406.04373)
- en: Ruiyang Ma¹, Yuxin Yang¹, Ziqian Liu², Jiaxi Zhang¹, Min Li³, Junhua Huang³,
    Guojie Luo¹ ¹School of Computer Science, Peking University; ²School of Information,
    Renmin University of China; ³Noah’s Ark Lab, Huawei ruiyang@stu.pku.edu.cn, {yxyang,
    zhangjiaxi, gluo}@pku.edu.cn, liuziqian@ruc.edu.cn, minli.amoy@gmail.com, huang.hjh@outlook.com
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Ruiyang Ma¹, Yuxin Yang¹, Ziqian Liu², Jiaxi Zhang¹, Min Li³, Junhua Huang³,
    Guojie Luo¹ ¹北京大学计算机科学学院；²中国人民大学信息学院；³华为诺亚方舟实验室 ruiyang@stu.pku.edu.cn, {yxyang,
    zhangjiaxi, gluo}@pku.edu.cn, liuziqian@ruc.edu.cn, minli.amoy@gmail.com, huang.hjh@outlook.com
- en: Abstract
  id: totrans-7
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 摘要
- en: Test generation has been a critical and labor-intensive process in hardware
    design verification. Recently, the emergence of Large Language Model (LLM) with
    their advanced understanding and inference capabilities, has introduced a novel
    approach. In this work, we investigate the integration of LLM into the Coverage
    Directed Test Generation (CDG) process, where the LLM functions as a Verilog Reader.
    It accurately grasps the code logic, thereby generating stimuli that can reach
    unexplored code branches. We compare our framework with random testing, using
    our self-designed Verilog benchmark suite. Experiments demonstrate that our framework
    outperforms random testing on designs within the LLM’s comprehension scope. Our
    work also proposes prompt engineering optimizations to augment LLM’s understanding
    scope and accuracy.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 测试生成在硬件设计验证中一直是一个关键且劳动密集的过程。近期，随着大型语言模型（LLM）及其先进的理解和推理能力的出现，提出了一种新颖的方法。在这项工作中，我们探讨了将LLM集成到覆盖导向测试生成（CDG）过程中，其中LLM充当Verilog阅读器。它准确把握代码逻辑，从而生成能够触达未探索代码分支的刺激。我们使用自设计的Verilog基准测试套件将我们的框架与随机测试进行了比较。实验表明，我们的框架在LLM理解范围内的设计上优于随机测试。我们的工作还提出了提示工程优化方案，以增强LLM的理解范围和准确性。
- en: 'Index Terms:'
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 索引术语：
- en: 'Automatic Test Generation, LLM, Verilog^†^† This work was partly supported
    by the National Natural Science Foundation of China (Grant No. 62090021) and the
    National Key R&D Program of China (Grant No. 2022YFB4500500). Corresponding author:
    Guojie Luo. 979-8-3503-7608-1/24$31.00 ©2024 IEEE'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 自动测试生成，LLM，Verilog^†^† 本工作部分得到了中国国家自然科学基金（资助号62090021）和中国国家重点研发计划（资助号2022YFB4500500）的支持。通讯作者：罗国杰。979-8-3503-7608-1/24$31.00
    ©2024 IEEE
- en: I Introduction
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: I 引言
- en: 'As hardware complexity surges, the importance of hardware verification in the
    development process intensifies. Undetected hardware bugs can result in substantial
    repercussions and considerable economic losses. To address the risk of design
    flaws in hardware, engineers employ two primary verification methodologies: formal
    verification and dynamic verification.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 随着硬件复杂性的增加，硬件验证在开发过程中的重要性也在加剧。未检测出的硬件缺陷可能会导致重大影响和可观的经济损失。为了解决硬件设计中的缺陷风险，工程师采用了两种主要的验证方法：形式化验证和动态验证。
- en: Formal methods employs mathematical techniques to prove or disprove the correctness
    of a system with respect to a certain formal specification or property [[1](#bib.bib1)].
    On the other hand, dynamic verification, generates diverse test cases to simulate
    the Design Under Test (DUT), offering more flexibility and scalability than formal
    verification [[2](#bib.bib2)]. Coverage targets, including code and functional
    coverage, serve as benchmarks for determining the thoroughness of tests. The attainment
    of these targets necessitates high-quality test inputs, which imposes a considerable
    labor burden on verification engineers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 形式化方法采用数学技术来证明或反驳系统相对于某个正式规范或属性的正确性 [[1](#bib.bib1)]。另一方面，动态验证生成多样化的测试用例来模拟被测设计（DUT），提供比形式化验证更大的灵活性和可扩展性 [[2](#bib.bib2)]。覆盖目标，包括代码覆盖和功能覆盖，作为确定测试彻底性的基准。这些目标的实现需要高质量的测试输入，这给验证工程师带来了相当大的劳动负担。
- en: To reduce the need for human intervention, Coverage Directed Test Generation
    (CDG) has emerged as a pivotal technique in automatic hardware test generation [[3](#bib.bib3),
    [4](#bib.bib4), [5](#bib.bib5), [6](#bib.bib6), [7](#bib.bib7)]. This method leverages
    heuristic approaches to explore the input space, with coverage states serving
    as basic feedback for the generation of new test cases. In situations with hard-to-reach
    coverpoints, supplementary circuit structural information (e.g., control/data
    flow graph, module connectivity graph) are utilized to guide directed test generation [[7](#bib.bib7),
    [4](#bib.bib4), [8](#bib.bib8)].
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少对人工干预的需求，覆盖驱动测试生成（CDG）已经成为自动硬件测试生成的关键技术[[3](#bib.bib3), [4](#bib.bib4),
    [5](#bib.bib5), [6](#bib.bib6), [7](#bib.bib7)]。该方法利用启发式方法探索输入空间，覆盖状态作为生成新测试用例的基本反馈。在难以达到的覆盖点情况下，利用附加的电路结构信息（例如，控制/数据流图、模块连接图）来指导定向测试生成[[7](#bib.bib7),
    [4](#bib.bib4), [8](#bib.bib8)]。
- en: Recently, the impressive capabilities of LLM in comprehension and inference
    have been highlighted. Previous studies have shown LLM’s versatility in multiple
    hardware tasks, such as RTL writing [[9](#bib.bib9), [10](#bib.bib10)], assertion
    generation [[11](#bib.bib11), [12](#bib.bib12)] and bug fixing [[13](#bib.bib13)].
    The advanced competencies of LLM present a compelling opportunity for their deployment
    in the field of hardware test generation. Zhang et al. have pioneered the initial
    step towards verifying the functional points of DUT [[14](#bib.bib14)]. A description
    of functional coverpoints is provided, following which the LLM generates input
    sequences. Their experimental results demonstrate a significant improvement in
    performance over random testing on various DUTs. Their research substantiates
    the capability of LLM to comprehend the high-level description of input principles
    and functional testpoints in the task of hardware verification.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，LLM在理解和推理方面的卓越能力得到了强调。以往的研究展示了LLM在多个硬件任务中的多功能性，如RTL编写[[9](#bib.bib9), [10](#bib.bib10)]、断言生成[[11](#bib.bib11),
    [12](#bib.bib12)]和错误修复[[13](#bib.bib13)]。LLM的先进能力为其在硬件测试生成领域的应用提供了有力的机会。张等人开创性地迈出了验证DUT功能点的初步步骤[[14](#bib.bib14)]。描述了功能覆盖点，然后LLM生成输入序列。他们的实验结果显示，相比随机测试在各种DUT上的表现有显著提高。他们的研究证实了LLM在硬件验证任务中理解输入原理和功能测试点的能力。
- en: '![Refer to caption](img/57f4320c8bf33296243ea97bece0ff7d.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/57f4320c8bf33296243ea97bece0ff7d.png)'
- en: 'Figure 1: LLM-Aided Hardware Test Generation Workflow.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：LLM辅助硬件测试生成工作流程。
- en: While our research adopts a distinct perspective. Complementing with previous
    work, we have pioneered the use of LLM to specifically improve the hardware code
    coverage, which is a more fundamental testing target and is intrinsically linked
    to the Verilog code itself. This approach necessitates the shift in LLM’s focus
    from the high-level functional testplan descriptions to the in-depth understanding
    of basic Verilog code logic and coverage status. That is, we repositioned the
    LLM as a VerilogReader, facilitating its role as a hardware verifier to read codes
    and write test cases for uncovered lines or branches, consequently reducing the
    manual effort required for code analysis and test generation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们的研究采用了不同的视角。与以往的工作互补，我们开创性地使用了LLM来专门提高硬件代码覆盖率，这是一个更为基础的测试目标，并且本质上与Verilog代码本身紧密相关。这一方法要求将LLM的关注点从高层次的功能测试计划描述转向对基本Verilog代码逻辑和覆盖状态的深入理解。也就是说，我们将LLM重新定位为VerilogReader，使其作为硬件验证器来读取代码并为未覆盖的行或分支编写测试用例，从而减少了代码分析和测试生成所需的人工工作量。
- en: ^†^† ¹https://github.com/magicYang1573/llm-hardware-test-generation
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: ^†^† ¹https://github.com/magicYang1573/llm-hardware-test-generation
- en: 'In summary, our paper makes the following contributions:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，我们的论文做出了以下贡献：
- en: •
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: We open-source a framework that integrates LLM into the CDG process¹. For the
    first time, LLM is used as a VerilogReader to understand Verilog code and coverage,
    aiming to generate tests for code coverage closure.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们开源了一个将LLM集成到CDG过程中的框架¹。首次使用LLM作为VerilogReader来理解Verilog代码和覆盖率，旨在生成用于代码覆盖的测试。
- en: •
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: We propose Coverage Explainer and DUT Explainer to enrich the prompt, thereby
    enhancing LLM’s comprehension of the design and our testing intentions. These
    modules also augment the extensibility of our framework.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们提出了Coverage Explainer和DUT Explainer来丰富提示，从而增强LLM对设计和我们测试意图的理解。这些模块还提升了我们框架的扩展性。
- en: •
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: We create a benchmark suite including 24 Verilog designs of simple, medium,
    and complex levels. Our experiments show that our framework outperforms random
    testing on simple- and medium-level DUTs. We also delineate the maximum Verilog
    reading capabilities of current LLM.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们创建了一个基准测试套件，包括 24 个简单、中等和复杂级别的 Verilog 设计。我们的实验表明，我们的框架在简单和中等级别的 DUT 上优于随机测试。我们还划定了当前
    LLM 的最大 Verilog 阅读能力。
- en: II Approach
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: II 方法
- en: II-A Basic Framework
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: II-A 基本框架
- en: 'Our study integrates LLM into the Coverage Directed Test Generation (CDG) process,
    as depicted in Figure [1](#S1.F1 "Figure 1 ‣ I Introduction ‣ VerilogReader: LLM-Aided
    Hardware Test Generation"). In each iteration, the LLM generates multi-cycle inputs
    in JSON format. These inputs are subsequently decoded by the Input Decoder into
    hardware stimuli. Upon completion of simulation, the Coverage Monitor provides
    current code coverage information to LLM, guiding the generation of extra input
    stimuli.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '我们的研究将 LLM 集成到覆盖指导测试生成（CDG）过程中，如图 [1](#S1.F1 "图 1 ‣ I 引言 ‣ VerilogReader: LLM
    辅助硬件测试生成") 所示。在每次迭代中，LLM 生成 JSON 格式的多周期输入。这些输入随后由 Input Decoder 解码为硬件刺激。模拟完成后，Coverage
    Monitor 向 LLM 提供当前代码覆盖信息，指导额外输入刺激的生成。'
- en: To generate test inputs, the LLM requires a comprehensive understanding of the
    Verilog DUT and the current coverage status. Given that these data are initially
    in non-natural-language formats, they must be transformed into a format conducive
    to the LLM. To this end, we have introduced two explainer modules. The Coverage
    Explainer module reformats the original simulator coverage report into a more
    LLM-readable format, while the DUT Explainer module enriches the DUT code with
    a natural language description or guidance. These modules collectively enhances
    the LLM’s comprehension of test intentions and the DUT’s functionality. Following
    this, the Prompt Generator integrates these outputs to create the final prompt.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成测试输入，LLM 需要对 Verilog DUT 和当前的覆盖状态有全面的理解。由于这些数据最初是以非自然语言格式存在的，因此必须将其转换为有利于
    LLM 的格式。为此，我们引入了两个解释模块。Coverage Explainer 模块将原始模拟器覆盖报告重新格式化为更易于 LLM 阅读的格式，而 DUT
    Explainer 模块则通过自然语言描述或指导来丰富 DUT 代码。这些模块共同提升了 LLM 对测试意图和 DUT 功能的理解。随后，Prompt Generator
    将这些输出整合以生成最终的提示。
- en: II-B Prompt Generator
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: II-B 提示生成器
- en: 'To encourage a step-by-step thought process in the LLM, the Prompt Generator
    facilitates two rounds of question-and-answer sessions in each iteration of the
    CDG process, thereby generating the hardware input stimulus, as depicted in Figure [2](#S2.F2
    "Figure 2 ‣ II-B Prompt Generator ‣ II Approach ‣ VerilogReader: LLM-Aided Hardware
    Test Generation"). In the first round, the LLM is informed of our objective to
    generate tests for unexplored code lines, incorporating details about the DUT
    from the DUT Explainer and the current coverage data from the Coverage Explainer.
    The LLM responds in natural language, typically mirroring its cognitive process.
    In the second round, we instruct the LLM to reformulate its initial response into
    a standardized JSON format for subsequent input decoding.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '为了鼓励 LLM 进行逐步思考，Prompt Generator 在每次 CDG 过程的迭代中促进了两轮问答，从而生成硬件输入刺激，如图 [2](#S2.F2
    "图 2 ‣ II-B 提示生成器 ‣ II 方法 ‣ VerilogReader: LLM 辅助硬件测试生成") 所示。在第一轮中，LLM 被告知我们生成未探索代码行的测试的目标，并提供
    DUT Explainer 的 DUT 细节以及 Coverage Explainer 的当前覆盖数据。LLM 用自然语言作出回应，通常反映其认知过程。在第二轮中，我们指示
    LLM 将其初始响应重新格式化为标准的 JSON 格式，以便后续的输入解码。'
- en: '![Refer to caption](img/6aa9021c6525947d4aa8e4bc068fd95a.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/6aa9021c6525947d4aa8e4bc068fd95a.png)'
- en: 'Figure 2: Example of prompts and LLM answers.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2：提示和 LLM 答案的示例。
- en: II-C Coverage Explainer
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: II-C 覆盖解释器
- en: '![Refer to caption](img/adcee66e410add2bdff70fe019f7cdc4.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/adcee66e410add2bdff70fe019f7cdc4.png)'
- en: 'Figure 3: Comparison of three coverage report formats.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3：三种覆盖报告格式的比较。
- en: 'To enhance LLM’s comprehension of the current DUT coverage, we introduce the
    Coverage Explainer module, which translates the intricate coverage report into
    a more comprehensible format. As shown in Figure [3](#S2.F3 "Figure 3 ‣ II-C Coverage
    Explainer ‣ II Approach ‣ VerilogReader: LLM-Aided Hardware Test Generation")(a),
    the original Verilator coverage report format includes each coverpoint represented
    by a unique identifier string and a hit count. This format is cryptic and poses
    readability challenges for both human users and LLM.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '为了增强 LLM 对当前 DUT 覆盖率的理解，我们引入了覆盖解释器模块，该模块将复杂的覆盖报告翻译成更易于理解的格式。如图 [3](#S2.F3 "Figure
    3 ‣ II-C Coverage Explainer ‣ II Approach ‣ VerilogReader: LLM-Aided Hardware
    Test Generation")(a) 所示，原始的 Verilator 覆盖报告格式包括由唯一标识符字符串和命中次数表示的每个覆盖点。该格式难以解读，对人类用户和
    LLM 都存在可读性挑战。'
- en: 'A simple alternative involves using Verilator-provided verilator_coverage tool
    to create an annotated coverage report, as depicted in Figure [3](#S2.F3 "Figure
    3 ‣ II-C Coverage Explainer ‣ II Approach ‣ VerilogReader: LLM-Aided Hardware
    Test Generation")(b). This format, which correlates coverage status with DUT source
    code, is more interpretable. The left-side number in each code line indicates
    the hit count of the line.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '一个简单的替代方案是使用 Verilator 提供的 verilator_coverage 工具创建注释覆盖报告，如图 [3](#S2.F3 "Figure
    3 ‣ II-C Coverage Explainer ‣ II Approach ‣ VerilogReader: LLM-Aided Hardware
    Test Generation")(b) 所示。该格式将覆盖状态与 DUT 源代码相关联，更易于解释。每行代码左侧的数字表示该行的命中次数。'
- en: 'Despite the improvements of annotated coverage format, it still presents challenges
    for LLM, as LLM must identify uncovered lines, thereby increasing the complexity.
    To mitigate this, we suggest an advanced LLM-readable coverage report, specifically
    designed for our test generation task, as depicted in Figure [3](#S2.F3 "Figure
    3 ‣ II-C Coverage Explainer ‣ II Approach ‣ VerilogReader: LLM-Aided Hardware
    Test Generation")(c). This report introduces a ‘TO BE COVERED’ flag for lines
    that remain uncovered. The application of natural language to flag only the uncovered
    lines could facilitate a more straightforward inference process for LLM.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '尽管注释覆盖格式有所改进，但仍然给 LLM 带来了挑战，因为 LLM 必须识别未覆盖的行，从而增加了复杂性。为缓解这一问题，我们建议使用一种高级的 LLM
    可读覆盖报告，专为我们的测试生成任务设计，如图 [3](#S2.F3 "Figure 3 ‣ II-C Coverage Explainer ‣ II Approach
    ‣ VerilogReader: LLM-Aided Hardware Test Generation")(c) 所示。该报告为仍未覆盖的行引入了“TO BE
    COVERED”标志。使用自然语言对未覆盖的行进行标记，可能会简化 LLM 的推理过程。'
- en: II-D DUT Explainer
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: II-D DUT 解释器
- en: To augment LLM’s comprehension of the DUT, we introduce the DUT Explainer module.
    Given that the LLM’s comprehension of Verilog code for test generation tasks is
    not fully optimized, this module aims to provide additional digestible information
    about the DUT, thereby facilitating more efficient test generation. The DUT Explainer
    module is designed to serve two main functions.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增强大型语言模型（LLM）对被测单元（DUT）的理解，我们引入了 DUT 解释器模块。鉴于 LLM 对 Verilog 代码在测试生成任务中的理解尚未完全优化，该模块旨在提供有关
    DUT 的额外易于理解的信息，从而促进更高效的测试生成。DUT 解释器模块旨在实现两个主要功能。
- en: 'Design Description, provides the LLM with a natural language explanation of
    the DUT’s functionalities and internal logic, mitigating the LLM’s incapacity
    to interpret Verilog code. This description can be acquired either by the LLM
    or manually. When acquired by the LLM, the test generation task is split into
    two stages: DUT understanding and input logic inference, thus alleviating LLM’s
    workload in each phase.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 设计描述，提供 LLM 对 DUT 功能和内部逻辑的自然语言解释，从而缓解 LLM 解释 Verilog 代码的能力不足。此描述可以由 LLM 获取，也可以手动获取。当由
    LLM 获取时，测试生成任务被分为两个阶段：DUT 理解和输入逻辑推断，从而减轻 LLM 在每个阶段的工作负担。
- en: Test Guidance, enriches the LLM with supplementary information for creating
    tests for specific DUT. This could involve fundamental test logic rules or advice
    for some hard-to-cover points. For instance, when generating tests for a Finite
    State Machine (FSM) circuit, LLM is guided to first consider the transition to
    each state and then discern conditions to address any uncovered points within
    that state. Additionally, it could be endowed with some knowledge on reaching
    challenging states, thereby reducing the analytical burden on the LLM.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 测试指导，为 LLM 提供创建特定 DUT 测试的补充信息。这可能包括基本的测试逻辑规则或对某些难以覆盖点的建议。例如，在为有限状态机（FSM）电路生成测试时，LLM
    被指导首先考虑每个状态的转换，然后识别条件以解决该状态中的任何未覆盖点。此外，还可以赋予其一些关于到达挑战性状态的知识，从而减少 LLM 的分析负担。
- en: III Evaluation
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: III 评估
- en: 'We evaluate our framework on our synthetic benchmark suite, detailed in Section [III-A](#S3.SS1
    "III-A Benchmark Suite ‣ III Evaluation ‣ VerilogReader: LLM-Aided Hardware Test
    Generation"). For each design, we use Pyverilog [[15](#bib.bib15)] to extract
    input signals and automatically generate testbench interface with our framework.
    Verilator [[16](#bib.bib16)] serves as our simulator. The language models used
    in our experiments include OpenAI’s GPT-4 and GPT-4-Turbo-0125 [[17](#bib.bib17)].'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '我们在我们的合成基准套件上评估了我们的框架，详细信息见第 [III-A](#S3.SS1 "III-A 基准套件 ‣ III 评估 ‣ VerilogReader:
    LLM 辅助硬件测试生成") 节。对于每个设计，我们使用 Pyverilog [[15](#bib.bib15)] 提取输入信号，并利用我们的框架自动生成测试平台接口。Verilator
    [[16](#bib.bib16)] 作为我们的模拟器。我们实验中使用的语言模型包括 OpenAI 的 GPT-4 和 GPT-4-Turbo-0125 [[17](#bib.bib17)]。'
- en: III-A Benchmark Suite
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: III-A 基准套件
- en: We created 24 Verilog designs in our benchmark suite and assigns three difficulty
    levels for these designs.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在基准套件中创建了 24 个 Verilog 设计，并为这些设计分配了三个难度级别。
- en: III-A1 Simple
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: III-A1 简单
- en: This level involves 10 basic combinational logic circuits (s01-s10), such as
    multiplexer and ALU. The direct influence of inputs on the coverage path within
    the same cycle offers a straightforward inference scenario for LLM. These designs
    are used to assess LLM’s understanding of Verilog syntax, including constructs
    like always, case, assign, etc.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这一层次涉及 10 个基本组合逻辑电路（s01-s10），如多路复用器和 ALU。输入对同一周期内的覆盖路径的直接影响为 LLM 提供了一个简单的推理场景。这些设计用于评估
    LLM 对 Verilog 语法的理解，包括 always、case、assign 等构造。
- en: III-A2 Medium
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: III-A2 中等
- en: This level consists of 8 sequential logic circuits (m01-m08), such as FSMs,
    counters and arbiters. The coverage path of the current cycle is influenced by
    inputs from several preceding cycles. These designs aim to demonstrate LLM’s cross-cycle
    inference capabilities in test generation tasks.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这一层次包含 8 个顺序逻辑电路（m01-m08），如 FSM、计数器和仲裁器。当前周期的覆盖路径受到前几个周期输入的影响。这些设计旨在展示 LLM 在测试生成任务中的跨周期推理能力。
- en: III-A3 Complex
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: III-A3 复杂
- en: This level encompasses 6 large-scale FSM circuits (c01-c06), ranging from 16
    to 128 states, and two transition branches per state. It serves as a benchmark
    category to evaluate the upper limit of the current LLM’s comprehensive ability
    in hardware test generation tasks.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这一层次包括 6 个大规模 FSM 电路（c01-c06），状态数从 16 到 128，每个状态有两个转换分支。它作为一个基准类别，用于评估当前 LLM
    在硬件测试生成任务中的综合能力上限。
- en: III-B Comparison of Coverage Explanations
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: III-B 覆盖率解释的比较
- en: 'In Section [II-C](#S2.SS3 "II-C Coverage Explainer ‣ II Approach ‣ VerilogReader:
    LLM-Aided Hardware Test Generation"), we present an LLM-readable coverage report,
    designed to enhance LLM’s comprehension of current coverage status. To validate
    the utility of our coverage explanation method, we contrast it with the original
    and annotated coverage reports from Verilator.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '在第 [II-C](#S2.SS3 "II-C 覆盖解释器 ‣ II 方法 ‣ VerilogReader: LLM 辅助硬件测试生成") 节中，我们展示了一种
    LLM 易读的覆盖报告，旨在增强 LLM 对当前覆盖状态的理解。为了验证我们覆盖解释方法的有效性，我们将其与 Verilator 提供的原始和注释覆盖报告进行对比。'
- en: 'The experiments were carried out on medium-level DUTs using GPT-4 as the language
    model. The comparison metric was the total length of input stimulus (measured
    in clock cycles) required to achieve full line coverage. Given the stochastic
    behavior of LLM, each experiment was replicated five times. The results are represented
    as box (25%ile) and whisker (75%ile) plots, along with median lines for each DUT,
    as shown in Figure [4](#S3.F4 "Figure 4 ‣ III-B Comparison of Coverage Explanations
    ‣ III Evaluation ‣ VerilogReader: LLM-Aided Hardware Test Generation"). The figure
    clearly indicates that the original unreadable coverage report poses the greatest
    challenge for LLM, whereas our LLM-readable coverage report demonstrates superior
    performance compared to the other two Verilator-provided reports.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '实验在中等复杂度的 DUT 上使用 GPT-4 作为语言模型进行。比较指标是实现完全行覆盖所需的输入刺激总长度（以时钟周期计）。考虑到 LLM 的随机行为，每个实验重复了五次。结果以箱形图（25%ile）和须状图（75%ile）表示，并附有每个
    DUT 的中位线，如图[4](#S3.F4 "图 4 ‣ III-B 覆盖率解释的比较 ‣ III 评估 ‣ VerilogReader: LLM 辅助硬件测试生成")所示。图中清楚地表明，原始难以阅读的覆盖报告对
    LLM 造成了最大挑战，而我们易读的覆盖报告在性能上优于其他两个由 Verilator 提供的报告。'
- en: '![Refer to caption](img/ad2eec38685dd4332648f241f4341bce.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/ad2eec38685dd4332648f241f4341bce.png)'
- en: 'Figure 4: Comparison of coverage explanations.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4：覆盖率解释的比较。
- en: III-C Comparison against Random Testing
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: III-C 与随机测试的比较
- en: In order to evaluate the efficacy of LLM for hardware test generation, we contrast
    our framework with random testing.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了评估 LLM 在硬件测试生成中的效果，我们将我们的框架与随机测试进行了对比。
- en: 'We conducted experiments on simple- and medium-level DUTs, utilizing GPT-4
    and GPT-4-Turbo as language models. We also performed five trials for each experiment.
    As illustrated in Figure [5](#S3.F5 "Figure 5 ‣ III-C Comparison against Random
    Testing ‣ III Evaluation ‣ VerilogReader: LLM-Aided Hardware Test Generation")
    (log scale), LLM achieved 100% coverage using significantly fewer inputs than
    random testing. The limitations of random testing became especially apparent in
    sequential designs with elusive branches, often failing to achieve full coverage
    within one-minute timeframe. In contrast, LLM could expediently reach these branches
    with their capacity for circuit logic analysis. Interestingly, despite GPT-4-Turbo’s
    purported superiority, it demonstrated a similar capability to GPT-4 in hardware
    test generation tasks in our experiments.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在简单和中等复杂度的 DUT 上进行了实验，利用 GPT-4 和 GPT-4-Turbo 作为语言模型。每个实验我们也进行了五次试验。如图 [5](#S3.F5
    "图 5 ‣ III-C 与随机测试的比较 ‣ III 评估 ‣ VerilogReader：LLM 辅助硬件测试生成")（对数尺度）所示，LLM 使用显著更少的输入达到了
    100% 的覆盖率。随机测试的局限性在具有难以捉摸分支的顺序设计中尤为明显，通常在一分钟时间内无法实现完全覆盖。相比之下，LLM 可以迅速到达这些分支，凭借其电路逻辑分析的能力。值得注意的是，尽管
    GPT-4-Turbo 的优越性被宣扬，但在我们的实验中，它在硬件测试生成任务中的能力与 GPT-4 相似。
- en: '![Refer to caption](img/d6ec78b76749ac99d33c6704b5670089.png)![Refer to caption](img/43595dd29273760c910ac68929fbf957.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/d6ec78b76749ac99d33c6704b5670089.png)![参见说明](img/43595dd29273760c910ac68929fbf957.png)'
- en: 'Figure 5: Comparison of LLM-aided test generation and random testing.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5：LLM 辅助测试生成与随机测试的比较。
- en: III-D DUT Explanation Optimization
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: III-D DUT 解释优化
- en: 'In Section [II-D](#S2.SS4 "II-D DUT Explainer ‣ II Approach ‣ VerilogReader:
    LLM-Aided Hardware Test Generation"), we introduce two optimization methods in
    DUT Explainer module that aim to improve LLM’s understanding of hardware design.
    Beyond providing LLM with the original Verilog code, we can supplement this with
    Design Description or Test Guidance. The former is generated by GPT-4 in our experiment,
    while the latter is manually written. These resources can be accessed in our open-source
    project.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 [II-D](#S2.SS4 "II-D DUT 解释器 ‣ II 方法 ‣ VerilogReader：LLM 辅助硬件测试生成") 节中，我们介绍了
    DUT 解释器模块中的两种优化方法，旨在改善 LLM 对硬件设计的理解。除了提供原始的 Verilog 代码外，我们还可以通过设计描述或测试指导来补充。前者在我们的实验中由
    GPT-4 生成，后者则是手动编写的。这些资源可以在我们的开源项目中访问。
- en: 'We carried out experiments on medium-level DUTs using GPT-4, with each experiment
    conducted five times. The results, presented in Figure [6](#S3.F6 "Figure 6 ‣
    III-D DUT Explanation Optimization ‣ III Evaluation ‣ VerilogReader: LLM-Aided
    Hardware Test Generation"), indicate that the inclusion of a LLM-generated Design
    Description in the prompt improved LLM’s understanding of the design during test
    generation. However, the impact of Test Guidance was not uniformly beneficial.
    In designs like m05 and m06, the guidance inadvertently reduced the diversity
    of LLM-generated input, causing an over-reliance on our guidance and consequently
    stifling its capacity for self-exploration.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在中等复杂度的 DUT 上使用 GPT-4 进行了实验，每个实验进行了五次。结果如图 [6](#S3.F6 "图 6 ‣ III-D DUT 解释优化
    ‣ III 评估 ‣ VerilogReader：LLM 辅助硬件测试生成") 所示，LLM 生成的设计描述在提示中提高了 LLM 在测试生成过程中的设计理解。然而，测试指导的影响并不总是有益的。在
    m05 和 m06 等设计中，指导不经意间减少了 LLM 生成输入的多样性，导致对我们指导的过度依赖，从而抑制了其自我探索的能力。
- en: '![Refer to caption](img/0ab460ac72a1becc666c1c4d27869fdf.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/0ab460ac72a1becc666c1c4d27869fdf.png)'
- en: 'Figure 6: Effect of design description and test guidance.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6：设计描述和测试指导的效果。
- en: III-E LLM Reading Scalability
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: III-E LLM 阅读扩展性
- en: In our previous experiment, we evaluated LLM’s proficiency in generating tests
    for simple- and medium-level hardware designs, with the most complex designs consisting
    of around 100 lines of Verilog code. To explore the upper bounds of current LLM’s
    capabilities for test generation, we introduced a complex level in our benchmark
    and employed FSMs with varying numbers of states as DUTs. Given that the largest
    design exceeded 500 lines of code and surpassed GPT-4’s input length limitation,
    we chose GPT-4-Turbo for this experiment, conducting three trials and calculating
    the average.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的实验中，我们评估了 LLM 在生成简单和中等复杂度硬件设计测试方面的能力，其中最复杂的设计包含约 100 行 Verilog 代码。为了探索当前
    LLM 测试生成能力的上限，我们在基准测试中引入了复杂级别，并采用了具有不同状态数量的 FSM 作为 DUT。考虑到最大设计超过 500 行代码并超出了 GPT-4
    的输入长度限制，我们选择了 GPT-4-Turbo 进行此实验，进行了三次试验并计算了平均值。
- en: 'Figure [7](#S3.F7 "Figure 7 ‣ III-E LLM Reading Scalability ‣ III Evaluation
    ‣ VerilogReader: LLM-Aided Hardware Test Generation") illustrates the outcome
    of the experiment. It is evident that as the DUT scalability escalates, the quality
    of test generation precipitously declines. For an FSM with 16 states, nearly 100%
    line coverage was achieved after 20 iterations of LLM calls. However, for larger
    FSM designs with over 64 states, the coverage cannot exceed 50%. This reveals
    the LLM’s inadequacies in directly processing large Verilog designs and performing
    intricate inferences for test generation.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '图 [7](#S3.F7 "Figure 7 ‣ III-E LLM Reading Scalability ‣ III Evaluation ‣ VerilogReader:
    LLM-Aided Hardware Test Generation") 展示了实验的结果。很明显，随着 DUT 可扩展性的提升，测试生成的质量急剧下降。对于具有
    16 个状态的 FSM，在 20 次 LLM 调用后，几乎达到了 100% 的行覆盖。然而，对于状态超过 64 的较大 FSM 设计，覆盖率不能超过 50%。这揭示了
    LLM 在直接处理大型 Verilog 设计和执行复杂推理进行测试生成方面的不足。'
- en: '![Refer to caption](img/8cce43a28f6117536e59bc849b9d4fc1.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![参考说明](img/8cce43a28f6117536e59bc849b9d4fc1.png)'
- en: 'Figure 7: LLM’s performance in test generation for large-scale FSMs.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7：LLM 在大规模 FSM 测试生成中的表现。
- en: IV Discussion
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IV 讨论
- en: While LLM demonstrates competence in understanding simple- and medium-level
    DUTs, their performance diminishes with complex-level benchmarks and industry-scale
    hardware designs. The aspiration to employ LLM in an end-to-end manner for such
    designs is challenging. A substantial journey lies ahead before LLM can surpass
    a human hardware expert, especially in the context of Verilog code comprehension
    and its subsequent application in diverse EDA tasks.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 LLM 在理解简单和中等复杂度的 DUT 方面表现出色，但在复杂级别基准测试和行业规模硬件设计中，其性能有所下降。希望 LLM 能在这种设计中以端到端的方式应用面临挑战。在
    LLM 能够超越人类硬件专家之前，尤其是在 Verilog 代码理解及其在各种 EDA 任务中的后续应用方面，还有一段漫长的旅程。
- en: One potential solution to enable the application of LLM in real-world hardware
    verification is to enhance our DUT Explainer. By providing a more comprehensive
    high-level abstraction of the design and the verification intentions, we can guide
    LLM to view test generation tasks from a more macroscopic perspective. Our LLM-aided
    framework offers the opportunity for users to seamlessly incorporate help information
    during the hardware CDG process. LLM could facilitate the translation of these
    guidance information from natural language into actual hardware stimuli, thereby
    alleviating the workload of hardware verification engineers.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 LLM 在现实世界硬件验证中的应用的一个潜在解决方案是增强我们的 DUT 解释器。通过提供设计和验证意图的更全面的高层抽象，我们可以引导 LLM
    从更宏观的视角来看待测试生成任务。我们的 LLM 辅助框架为用户在硬件 CDG 过程中无缝整合帮助信息提供了机会。LLM 可以促进将这些指导信息从自然语言转化为实际的硬件刺激，从而减轻硬件验证工程师的工作负担。
- en: Furthermore, future research could focus on merging LLM with other structural
    AI techniques. Verilog’s highly structured nature, characterized by a multitude
    of concurrent always blocks and module hierarchies, presents a significant challenge
    for LLM’s decipherment. However, these structures may be more easily understood
    by a Graph Neural Network (GNN) [[8](#bib.bib8), [18](#bib.bib18), [19](#bib.bib19)].
    Therefore, the combination of LLM for regional semantic interpretation and GNN
    for structural interpretation could present a promising strategy to enhance the
    scalability of AI hardware understanding capabilities.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，未来的研究可以集中于将LLM与其他结构化AI技术结合。Verilog的高度结构化特性，表现为众多的并发always块和模块层次结构，为LLM的解读带来了重大挑战。然而，这些结构可能更容易被图神经网络（GNN）[[8](#bib.bib8),
    [18](#bib.bib18), [19](#bib.bib19)]理解。因此，将LLM用于区域语义解释，并结合GNN用于结构解释，可能是提高AI硬件理解能力可扩展性的有前景的策略。
- en: V Conclusion
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: V 结论
- en: Our research primarily investigates the application of LLM in understanding
    Verilog designs and generating test inputs to achieve code coverage closure. We
    have constructed a suite of benchmarks comprising basic combinational and sequential
    circuits to assess our framework’s efficacy. To enhance LLM’s comprehension of
    a given DUT and the test generation task, we have introduced Coverage Explainer
    and DUT Explainer to enrich the prompt. Experimental results demonstrate that
    the LLM is capable of generating inputs and achieves full code coverage for DUTs
    of simple and medium complexity in our benchmarks. Future research could focus
    on enhancing the abstraction level of guidance information provided to LLM, or
    integrating LLM with GNN to capture both semantic and structural information of
    DUTs.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的研究主要调查了LLM在理解Verilog设计和生成测试输入以实现代码覆盖闭合中的应用。我们构建了一套包含基本组合电路和时序电路的基准测试，以评估我们框架的有效性。为了增强LLM对给定DUT和测试生成任务的理解，我们引入了Coverage
    Explainer和DUT Explainer以丰富提示信息。实验结果表明，LLM能够生成输入并实现我们基准测试中简单和中等复杂度DUT的全代码覆盖。未来的研究可以集中于提高提供给LLM的指导信息的抽象级别，或者将LLM与GNN结合，以捕捉DUT的语义和结构信息。
- en: References
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] C. Kern and M. R. Greenstreet, “Formal verification in hardware design:
    a survey,” *TODAES*, vol. 4, no. 2, pp. 123–193, 1999.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[1] C. Kern 和 M. R. Greenstreet，“硬件设计中的形式验证：综述，” *TODAES*，第4卷，第2期，第123–193页，1999年。'
- en: '[2] W. K. Lam, *Hardware design verification: simulation and formal method-based
    approaches*.   Prentice Hall PTR, 2005.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2] W. K. Lam, *硬件设计验证：基于仿真和形式化方法的 approaches*。Prentice Hall PTR, 2005年。'
- en: '[3] S. Fine and A. Ziv, “Coverage directed test generation for functional verification
    using Bayesian networks,” in *DAC*, Jun 2003, pp. 286–291.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3] S. Fine 和 A. Ziv，“使用贝叶斯网络进行功能验证的覆盖导向测试生成，” 发表在*DAC*，2003年6月，第286–291页。'
- en: '[4] M. Li, K. Gent, and M. S. Hsiao, “Design validation of RTL circuits using
    evolutionary swarm intelligence,” in *ITC*, Nov 2012, pp. 1–8.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[4] M. Li, K. Gent, 和 M. S. Hsiao，“使用进化群体智能进行RTL电路设计验证，” 发表在*ITC*，2012年11月，第1–8页。'
- en: '[5] F. Wang, H. Zhu, P. Popli, Y. Xiao, P. Bodgan, and S. Nazarian, “Accelerating
    coverage directed test generation for functional verification: A neural network-based
    framework,” in *GLSVLSI*, May 2018, pp. 207–212.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5] F. Wang, H. Zhu, P. Popli, Y. Xiao, P. Bodgan, 和 S. Nazarian，“加速覆盖导向的功能验证测试生成：基于神经网络的框架，”
    发表在*GLSVLSI*，2018年5月，第207–212页。'
- en: '[6] K. Laeufer, J. Koenig, D. Kim, J. Bachrach, and K. Sen, “RFUZZ: Coverage-directed
    fuzz testing of RTL on FPGAs,” in *ICCAD*, 2018, pp. 1–8.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[6] K. Laeufer, J. Koenig, D. Kim, J. Bachrach, 和 K. Sen，“RFUZZ：针对FPGA上的RTL进行覆盖导向的模糊测试，”
    发表在*ICCAD*，2018年，第1–8页。'
- en: '[7] S. Canakci, L. Delshadtehrani, and F. Eris, “DirectFuzz: Automated test
    generation for RTL designs using directed graybox fuzzing,” in *DAC*, 2021, pp.
    529–534.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[7] S. Canakci, L. Delshadtehrani, 和 F. Eris，“DirectFuzz：使用定向灰盒模糊测试的RTL设计自动化测试生成，”
    发表在*DAC*，2021年，第529–534页。'
- en: '[8] S. Vasudevan, W. J. Jiang, D. Bieber, R. Singh, C. R. Ho, C. Sutton *et al.*,
    “Learning semantic representations to verify hardware designs,” in *NeurIPS*,
    vol. 34, 2021, pp. 23 491–23 504.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[8] S. Vasudevan, W. J. Jiang, D. Bieber, R. Singh, C. R. Ho, C. Sutton *等*，“学习语义表示以验证硬件设计，”
    发表在*NeurIPS*，第34卷，2021年，第23,491–23,504页。'
- en: '[9] S. Thakur, J. Blocklove, H. Pearce, B. Tan, S. Garg, and R. Karri, “AutoChip:
    Automating HDL generation using LLM feedback,” *arXiv preprint arXiv:2311.04887*,
    2023.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[9] S. Thakur, J. Blocklove, H. Pearce, B. Tan, S. Garg, 和 R. Karri，“AutoChip：使用LLM反馈自动生成HDL，”
    *arXiv预印本 arXiv:2311.04887*，2023年。'
- en: '[10] S. Thakur, B. Ahmad, H. Pearce, B. Tan, B. Dolan-Gavitt, R. Karri, and
    S. Garg, “VeriGen: A large language model for Verilog code generation,” *TODAES*,
    vol. 29, no. 3, pp. 1–31, 2023.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[10] S. Thakur, B. Ahmad, H. Pearce, B. Tan, B. Dolan-Gavitt, R. Karri, 和 S.
    Garg, “VeriGen：用于 Verilog 代码生成的大型语言模型，” *TODAES*，第29卷，第3期，第1–31页，2023年。'
- en: '[11] R. Kande, H. Pearce, B. Tan, B. Dolan-Gavitt, S. Thakur, R. Karri, and
    J. Rajendran, “LLM-assisted generation of hardware assertions,” *arXiv preprint
    arXiv:2306.14027*, 2023.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[11] R. Kande, H. Pearce, B. Tan, B. Dolan-Gavitt, S. Thakur, R. Karri, 和 J.
    Rajendran, “LLM 辅助生成硬件断言，” *arXiv 预印本 arXiv:2306.14027*，2023年。'
- en: '[12] W. Fang, M. Li, M. Li, Z. Yan, S. Liu, H. Zhang, and Z. Xie, “AssertLLM:
    Generating and evaluating hardware verification assertions from design specifications
    via multi-LLMs,” *arXiv preprint arXiv:2402.00386*, 2024.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[12] W. Fang, M. Li, M. Li, Z. Yan, S. Liu, H. Zhang, 和 Z. Xie, “AssertLLM：通过多大型语言模型从设计规范生成和评估硬件验证断言，”
    *arXiv 预印本 arXiv:2402.00386*，2024年。'
- en: '[13] B. Ahmad, S. Thakur, B. Tan, R. Karri, and H. Pearce, “Fixing hardware
    security bugs with large language models,” *arXiv preprint arXiv:2302.01215*,
    2023.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[13] B. Ahmad, S. Thakur, B. Tan, R. Karri, 和 H. Pearce, “使用大型语言模型修复硬件安全漏洞，”
    *arXiv 预印本 arXiv:2302.01215*，2023年。'
- en: '[14] Z. Zhang, G. Chadwick, H. McNally, Y. Zhao, and R. Mullins, “LLM4DV: Using
    large language models for hardware test stimuli generation,” *arXiv preprint arXiv:2310.04535*,
    2023.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[14] Z. Zhang, G. Chadwick, H. McNally, Y. Zhao, 和 R. Mullins, “LLM4DV：利用大型语言模型生成硬件测试刺激，”
    *arXiv 预印本 arXiv:2310.04535*，2023年。'
- en: '[15] S. Takamaeda-Yamazaki, “Pyverilog: A Python-based hardware design processing
    toolkit for Verilog HDL,” in *ARC*.   Springer International Publishing, Apr 2015,
    pp. 451–460.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[15] S. Takamaeda-Yamazaki, “Pyverilog：一种基于 Python 的 Verilog HDL 硬件设计处理工具包，”
    收录于 *ARC*，Springer International Publishing，2015年4月，第451–460页。'
- en: '[16] W. Snyder, “Verilator,” https://www.veripool.org/wiki/verilator.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[16] W. Snyder, “Verilator，” https://www.veripool.org/wiki/verilator。'
- en: '[17] J. Achiam, S. Adler, S. Agarwal, L. Ahmad, I. Akkaya, F. L. Aleman, D. Almeida,
    J. Altenschmidt, S. Altman, S. Anadkat *et al.*, “GPT-4 technical report,” *arXiv
    preprint arXiv:2303.08774*, 2023.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[17] J. Achiam, S. Adler, S. Agarwal, L. Ahmad, I. Akkaya, F. L. Aleman, D.
    Almeida, J. Altenschmidt, S. Altman, S. Anadkat *等*， “GPT-4 技术报告，” *arXiv 预印本
    arXiv:2303.08774*，2023年。'
- en: '[18] Z. Shi, H. Pan, S. Khan, M. Li, Y. Liu, J. Huang, H.-L. Zhen, M. Yuan,
    Z. Chu, and Q. Xu, “Deepgate2: Functionality-aware circuit representation learning,”
    in *ICCAD*, 2023, pp. 1–9.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[18] Z. Shi, H. Pan, S. Khan, M. Li, Y. Liu, J. Huang, H.-L. Zhen, M. Yuan,
    Z. Chu, 和 Q. Xu, “Deepgate2：功能感知电路表示学习，” 收录于 *ICCAD*，2023年，第1–9页。'
- en: '[19] B. Jin, G. Liu, C. Han, M. Jiang, H. Ji, and J. Han, “Large language models
    on graphs: A comprehensive survey,” *arXiv preprint arXiv:2312.02783*, 2023.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[19] B. Jin, G. Liu, C. Han, M. Jiang, H. Ji, 和 J. Han, “图上的大型语言模型：全面综述，” *arXiv
    预印本 arXiv:2312.02783*，2023年。'
