- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-09-08 18:51:50'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-09-08 18:51:50
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Spec2SVA-Eval: Evaluating LLMs for Assertion Generation from Design Specification'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spec2SVA-Eval：评估LLMs在从设计规范中生成断言的能力
- en: 来源：[https://ar5iv.labs.arxiv.org/html/2402.00386](https://ar5iv.labs.arxiv.org/html/2402.00386)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://ar5iv.labs.arxiv.org/html/2402.00386](https://ar5iv.labs.arxiv.org/html/2402.00386)
- en: Wenji Fang^(1,2) Mengming Li¹ Min Li Zhiyuan Yan² Shang Liu¹ Hongce Zhang^(1,2)^*
    Zhiyao Xie¹^*
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Wenji Fang^(1,2) Mengming Li¹ Min Li Zhiyuan Yan² Shang Liu¹ Hongce Zhang^(1,2)^*
    Zhiyao Xie¹^*
- en: 'Spec2Assert: Generating and Evaluating Assertion from Natual Language Specification'
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spec2Assert：从自然语言规范生成和评估断言
- en: Wenji Fang^(1,2) Mengming Li¹ Min Li Zhiyuan Yan² Shang Liu¹ Hongce Zhang^(1,2)^*
    Zhiyao Xie¹^*
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Wenji Fang^(1,2) Mengming Li¹ Min Li Zhiyuan Yan² Shang Liu¹ Hongce Zhang^(1,2)^*
    Zhiyao Xie¹^*
- en: 'Spec2Assert: Benchmarking LLM-based Assertion Generation from Natural Language
    Specification'
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spec2Assert：基于LLM的从自然语言规范生成断言的基准测试
- en: Wenji Fang^(1,2) Mengming Li¹ Min Li Zhiyuan Yan² Shang Liu¹ Hongce Zhang^(1,2)^*
    Zhiyao Xie¹^*
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Wenji Fang^(1,2) Mengming Li¹ Min Li Zhiyuan Yan² Shang Liu¹ Hongce Zhang^(1,2)^*
    Zhiyao Xie¹^*
- en: 'AssertLLM: Hardware Verification Assertion Generation and Evaluation from Design
    Specification via Multi-LLMs'
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AssertLLM：通过多重大型语言模型从设计规范中生成和评估硬件验证断言
- en: Wenji Fang^(1,2) Mengming Li¹ Min Li Zhiyuan Yan² Shang Liu¹ Hongce Zhang^(1,2)^*
    Zhiyao Xie¹^*
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Wenji Fang^(1,2) Mengming Li¹ Min Li Zhiyuan Yan² Shang Liu¹ Hongce Zhang^(1,2)^*
    Zhiyao Xie¹^*
- en: 'AssertLLM: Hardware Verification Assertion Generation and Evaluation from Design
    Specification via Multi-LLMs'
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AssertLLM：通过多重大型语言模型从设计规范中生成和评估硬件验证断言
- en: Wenji Fang^(1,2) Mengming Li¹ Min Li Zhiyuan Yan² Shang Liu¹ Hongce Zhang^(1,2)^*
    Zhiyao Xie¹^*
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Wenji Fang^(1,2) Mengming Li¹ Min Li Zhiyuan Yan² Shang Liu¹ Hongce Zhang^(1,2)^*
    Zhiyao Xie¹^*
- en: 'AssertLLM: Generating and Evaluating Hardware Verification Assertions from
    Design Specifications via Multi-LLMs'
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AssertLLM：通过多重大型语言模型从设计规范中生成和评估硬件验证断言
- en: Wenji Fang^(1,2) Mengming Li¹ Min Li Zhiyuan Yan² Shang Liu¹ Hongce Zhang^(1,2)^*
    Zhiyao Xie¹^*
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Wenji Fang^(1,2) Mengming Li¹ Min Li Zhiyuan Yan² Shang Liu¹ Hongce Zhang^(1,2)^*
    Zhiyao Xie¹^*
- en: Abstract
  id: totrans-17
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 摘要
- en: Assertion-based verification (ABV) is a critical method for ensuring design
    circuits comply with their architectural specifications, which are typically described
    in natural language. This process often requires significant interpretation by
    engineers to convert these specifications into functional verification assertions.
    Existing methods for generating assertions from natural language specifications
    are limited to sentences extracted by engineers, discouraging the practical application.
    In this work, we present AssertLLM, an automatic assertion generation framework
    for complete specification files. AssertLLM breaks down the complex task into
    three phases, incorporating three customized Large Language Models (LLMs) for
    extracting structural specifications, mapping signal definitions, and generating
    assertions. Additionally, we provide an open-source benchmark for assessing assertion
    generation capabilities. Our evaluation of AssertLLM on a full design, encompassing
    23 signals, demonstrates that 89% of the generated assertions are both syntactically
    and functionally accurate.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 基于断言的验证（ABV）是一种关键方法，用于确保设计电路符合其架构规范，这些规范通常用自然语言描述。这个过程通常需要工程师进行大量的解释，以将这些规范转换为功能验证断言。从自然语言规范生成断言的现有方法仅限于工程师提取的句子，限制了其实际应用。在本研究中，我们提出了AssertLLM，一个用于完整规范文件的自动断言生成框架。AssertLLM将复杂的任务分解为三个阶段，结合了三个定制的大型语言模型（LLMs）来提取结构规范、映射信号定义和生成断言。此外，我们提供了一个开源基准，用于评估断言生成能力。我们对包含23个信号的完整设计进行的AssertLLM评估表明，生成的断言中有89%在语法和功能上都是准确的。
- en: I Introduction
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: I 引言
- en: Hardware functional verification is critical in the VLSI design flow, primarily
    addressing whether an implementation adheres to its specification. For instance,
    the register-transfer level (RTL) design of a processor must comply with the given
    instruction set architecture (ISA) specification. Typically, the architects first
    develop the specifications in a natural language document. Subsequently, RTL designers
    translate these specifications into RTL code, while the verification engineers
    are responsible for checking the functional correctness of the RTL designs according
    to the specifications.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件功能验证在VLSI设计流程中至关重要，主要关注实现是否符合其规格说明。例如，处理器的寄存器传输级（RTL）设计必须符合给定的指令集架构（ISA）规格说明。通常，架构师首先在自然语言文档中制定规格说明。随后，RTL设计师将这些规格说明翻译成RTL代码，而验证工程师则负责根据规格说明检查RTL设计的功能正确性。
- en: During the verification process, assertion-based verification (ABV) [[1](#bib.bib1)]
    is a widely adopted technique, which utilizes assertions crafted from specifications
    to verify the functional behavior of RTL designs. ABV can be conducted either
    through simulation with testbenches or using formal property verification (FPV)
    techniques. Temporal logic, particularly SystemVerilog Assertions (SVA), is commonly
    employed for specifying these properties. However, a significant challenge in
    ABV is the generation of sufficient, high-quality assertions. Currently, designing
    SVAs manually is a time-consuming and error-prone task, demanding extensive human
    effort.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在验证过程中，基于断言的验证（ABV）[[1](#bib.bib1)]是一种广泛采用的技术，它利用从规格说明中提取的断言来验证RTL设计的功能行为。ABV可以通过带测试平台的仿真或使用形式属性验证（FPV）技术进行。时间逻辑，特别是SystemVerilog断言（SVA），常用于指定这些属性。然而，ABV中的一个重大挑战是生成足够的高质量断言。目前，手动设计SVA是一项耗时且容易出错的任务，需要大量的人力投入。
- en: 'To address this challenge, research has focused on generating SVAs automatically.
    The automatic approaches can be categorized into two types: dynamic mining from
    simulation traces and static analysis of specifications. Dynamic methods [[2](#bib.bib2),
    [3](#bib.bib3), [4](#bib.bib4)] generate assertions by combining simulating test
    traces and static analysis of design constraints. However, a critical limitation
    of dynamic methods is that both the generation and evaluation of assertions are
    on the same RTL design without referring to a golden reference model. This could
    lead to the generation of incorrect SVAs due to flaws in the RTL design, which
    these methods might not detect. On the other hand, existing static methods depend
    either on the pre-defined templates [[5](#bib.bib5), [6](#bib.bib6)] or on machine
    learning (ML) technologies [[7](#bib.bib7), [8](#bib.bib8), [9](#bib.bib9), [10](#bib.bib10),
    [11](#bib.bib11), [12](#bib.bib12), [13](#bib.bib13), [14](#bib.bib14), [15](#bib.bib15),
    [16](#bib.bib16), [17](#bib.bib17)]. The template-based methods also require a
    deep understanding of the design function to fill in the templates. As for the
    ML-based methods, they explore both traditional natural language processing (NLP)
    and emerging Generative AI techniques like Large Language Models (LLMs). We further
    categorize the existing static ML-based methods based on their application in
    different design phases: the RTL and pre-RTL stages.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应对这一挑战，研究已经集中在自动生成SVA上。自动化方法可以分为两类：从仿真跟踪中动态挖掘和对规格说明的静态分析。动态方法[[2](#bib.bib2),
    [3](#bib.bib3), [4](#bib.bib4)]通过结合仿真测试跟踪和设计约束的静态分析生成断言。然而，动态方法的一个关键限制是生成和评估断言都在相同的RTL设计上，未参考黄金参考模型。这可能会导致生成不正确的SVA，因为这些方法可能无法检测到RTL设计中的缺陷。另一方面，现有的静态方法依赖于预定义的模板[[5](#bib.bib5),
    [6](#bib.bib6)]或机器学习（ML）技术[[7](#bib.bib7), [8](#bib.bib8), [9](#bib.bib9), [10](#bib.bib10),
    [11](#bib.bib11), [12](#bib.bib12), [13](#bib.bib13), [14](#bib.bib14), [15](#bib.bib15),
    [16](#bib.bib16), [17](#bib.bib17)]。基于模板的方法还需要对设计功能有深入的理解，以填充模板。至于基于ML的方法，它们探索了传统的自然语言处理（NLP）和新兴的生成式AI技术，如大型语言模型（LLMs）。我们进一步根据它们在不同设计阶段的应用，将现有的静态ML方法进行分类：RTL阶段和预RTL阶段。
- en: 'Table [I](#S1.T1 "Table I ‣ I Introduction ‣ Spec2SVA-Eval: Evaluating LLMs
    for Assertion Generation from Design Specification") details these ML-based SVA
    generation methods in both the RTL stage and the pre-RTL stage. During the RTL
    stage, the process typically involves using LLMs to process both human-written
    specification sentences and the RTL design to generate SVAs describing security
    or functional properties [[7](#bib.bib7), [8](#bib.bib8), [9](#bib.bib9)]. However,
    similar to the dynamic methods, inaccuracies in RTL implementations could result
    in flawed SVAs.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '表[I](#S1.T1 "Table I ‣ I Introduction ‣ Spec2SVA-Eval: Evaluating LLMs for
    Assertion Generation from Design Specification")详细说明了这些基于ML的SVA生成方法，包括RTL阶段和Pre-RTL阶段。在RTL阶段，通常使用LLM处理人工编写的规范句子和RTL设计，以生成描述安全性或功能属性的SVA
    [[7](#bib.bib7), [8](#bib.bib8), [9](#bib.bib9)]。然而，类似于动态方法，RTL实现中的不准确性可能会导致SVA缺陷。'
- en: '![Refer to caption](img/a51376d283432468ce1f183a70abcb0c.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/a51376d283432468ce1f183a70abcb0c.png)'
- en: 'Figure 1: AssertLLM in VLSI design and verification flow. AssertLLM automatically
    generates SVAs from natural language specifications, facilitating functional verification
    for both bug avoidance and bug hunting.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：AssertLLM在VLSI设计和验证流程中的应用。AssertLLM自动从自然语言规范中生成SVA，促进功能验证，以便避免和发现缺陷。
- en: '| Stage | Works | Generation Method | NL Specification | Evaluation |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 阶段 | 工作 | 生成方法 | NL 规范 | 评估 |'
- en: '| Auto Extract. | Source | Full Design | Target |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 自动提取 | 来源 | 全设计 | 目标 |'
- en: '&#124; Open-Source &#124;'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 开源 &#124;'
- en: '&#124; Benchmark &#124;'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 基准 &#124;'
- en: '|'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| RTL | [[7](#bib.bib7)] | LLM-based | ✗ | Sentences from Engineers | ✗ | Security
    | ✗ |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| RTL | [[7](#bib.bib7)] | 基于LLM | ✗ | 工程师的句子 | ✗ | 安全性 | ✗ |'
- en: '| [[8](#bib.bib8), [9](#bib.bib9)] | Function | ^⋆ |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| [[8](#bib.bib8), [9](#bib.bib9)] | 功能 | ^⋆ |'
- en: '| Pre-RTL | [[10](#bib.bib10), [11](#bib.bib11), [12](#bib.bib12), [13](#bib.bib13),
    [14](#bib.bib14), [15](#bib.bib15), [16](#bib.bib16), [17](#bib.bib17)] | NLP-based
    | ✗ |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| Pre-RTL | [[10](#bib.bib10), [11](#bib.bib11), [12](#bib.bib12), [13](#bib.bib13),
    [14](#bib.bib14), [15](#bib.bib15), [16](#bib.bib16), [17](#bib.bib17)] | 基于NLP
    | ✗ |'
- en: '&#124; Sentences &#124;'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 句子 &#124;'
- en: '&#124; from SPEC file &#124;'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 从SPEC文件 &#124;'
- en: '|  |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '|  |'
- en: '&#124; Function (specialized &#124;'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 功能（专用 &#124;'
- en: '&#124; checkers/ artificial cases) &#124;'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 检查器/ 人工案例) &#124;'
- en: '| ✗ |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| ✗ |'
- en: '| Ours | LLM-based |  | Entire SPEC file |  |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 我们的 | 基于LLM |  | 整个SPEC文件 |  |'
- en: '&#124; Function &#124;'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 功能 &#124;'
- en: '&#124; (general benchmark) &#124;'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; （通用基准） &#124;'
- en: '|  |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '|  |'
- en: •
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: ^⋆ Work[[8](#bib.bib8)] only open-source the result on a FIFO, while work[[9](#bib.bib9)]
    only demonstrate based on tiny designs such as FSM and DFF.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ^⋆ 工作[[8](#bib.bib8)] 仅开源FIFO上的结果，而工作[[9](#bib.bib9)] 仅基于如FSM和DFF等小型设计进行演示。
- en: 'Table I: Existing works on generating SVAs from natural language specifications.
    AssertLLM is the first work that can handle full-size specification files and
    generate comprehensive types of SVAs for each architectural signal. We also propose
    the first open-source benchmark for assertion generation and evaluation from natural
    language specifications.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 表I：现有的从自然语言规范生成SVA的工作。AssertLLM是第一个能够处理完整规格文件并为每个架构信号生成全面类型的SVA的工作。我们还提出了第一个从自然语言规范中生成和评估断言的开源基准。
- en: When it comes to the pre-RTL stage, with the natural language specification
    document finalized, RTL designers proceed to implement behavior satisfying this
    golden specification. Numerous studies [[10](#bib.bib10), [11](#bib.bib11), [12](#bib.bib12),
    [13](#bib.bib13), [14](#bib.bib14), [15](#bib.bib15), [16](#bib.bib16), [17](#bib.bib17)]
    have employed NLP techniques to generate SVAs from sentences extracted by humans.
    These works focused on processing sentences identified from a comprehensive document
    of specification. However, specification extraction requires tremendous human
    efforts, and the NLP-based generation process faces challenges in generalizing
    across diverse grammatical variations. Additionally, the evaluation of SVAs generated
    through these methods typically depends on design-specific checkers, such as protocol
    and processor checkers, and is therefore difficult to extend to other design types.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在前RTL阶段，当自然语言规范文档最终确定后，RTL设计师会按照这一黄金规范进行行为实现。大量研究[[10](#bib.bib10), [11](#bib.bib11),
    [12](#bib.bib12), [13](#bib.bib13), [14](#bib.bib14), [15](#bib.bib15), [16](#bib.bib16),
    [17](#bib.bib17)]利用NLP技术从人工提取的句子中生成SVA。这些研究集中于处理从全面的规范文档中识别出的句子。然而，规范提取需要巨大的人工努力，而基于NLP的生成过程在处理不同语法变体时面临挑战。此外，通过这些方法生成的SVA的评估通常依赖于特定设计的检查器，例如协议和处理器检查器，因此难以扩展到其他设计类型。
- en: 'Here we summarize three key challenges that currently hinder the practical
    application of SVA generation from natural language specifications:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们总结了目前阻碍自然语言规范生成SVA实际应用的三个主要挑战：
- en: '1.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: Natural language VLSI specifications are inherently unstructured and are hard
    to be directly used for assertion generation.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自然语言VLSI规范本质上是非结构化的，难以直接用于断言生成。
- en: '2.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: Even with structured specifications, translating natural language into assertions
    remains a highly complex task, requiring both a deep understanding of the design
    functionality and specialized expertise in SVA.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 即使在结构化规范下，将自然语言翻译为断言仍然是一个高度复杂的任务，需要对设计功能有深入理解以及在SVA方面的专业知识。
- en: '3.'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: Currently, there is a lack of a universal evaluation method and benchmarks capable
    of addressing the diverse types of VLSI designs.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目前，缺乏能够应对各种VLSI设计类型的通用评估方法和基准。
- en: 'To tackle the identified challenges in SVA generation, in our work, we propose
    AssertLLM, a novel automatic assertion generation framework incorporating multiple
    specialized LLMs to deal with the decomposed tasks separately. This framework
    is designed to process complete natural language specification files, automatically
    producing SVAs for each architectural signal. This approach significantly benefits
    both design-time bug prevention and verification-time bug detection. The role
    of AssertLLM within the standard VLSI design and verification flow is illustrated
    in Fig. [1](#S1.F1 "Figure 1 ‣ I Introduction ‣ Spec2SVA-Eval: Evaluating LLMs
    for Assertion Generation from Design Specification"). AssertLLM effectively addresses
    the outlined challenges by combining three customized LLMs, each focused on a
    specific task: extracting relevant information from specifications, mapping signal
    definitions, and translating natural language specifications into SVAs. The resulting
    SVAs contain various types, including bit-width, connectivity, and functional
    assertions.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '为了解决SVA生成中识别出的挑战，我们提出了AssertLLM，这是一种新颖的自动断言生成框架，结合了多个专门的LLM来分别处理分解的任务。该框架旨在处理完整的自然语言规范文件，自动生成每个架构信号的SVA。这种方法在设计时防止错误和验证时检测错误方面具有显著好处。AssertLLM在标准VLSI设计和验证流程中的作用如图[1](#S1.F1
    "Figure 1 ‣ I Introduction ‣ Spec2SVA-Eval: Evaluating LLMs for Assertion Generation
    from Design Specification")所示。AssertLLM通过结合三个定制的LLM，每个LLM专注于一个特定任务：从规范中提取相关信息、映射信号定义和将自然语言规范翻译为SVA，来有效解决这些挑战。生成的SVA包含各种类型，包括位宽、连通性和功能断言。'
- en: Additionally, our work provides an open-source benchmark, designed to evaluate
    the quality of the generated SVAs. This benchmark, coupled with a general evaluation
    method, is adaptable to various design types.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们的工作提供了一个开源基准，用于评估生成的SVA的质量。这个基准加上通用评估方法，可以适应各种设计类型。
- en: To the best of our knowledge, AssertLLM is the first automatic assertion generation
    method that can handle full-size specification files and generate various types
    of SVAs for each architectural signal. It also provides the first open-source
    benchmark for assertion generation and evaluation from design specifications,
    which can deal with different design types.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 据我们所知，AssertLLM是第一个可以处理完整规范文件并为每个架构信号生成各种类型SVA的自动断言生成方法。它还提供了第一个从设计规范中生成和评估断言的开源基准，能够处理不同的设计类型。
- en: 'Our contributions in this work are summarized below:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这项工作中的贡献总结如下：
- en: •
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: To the best of our knowledge, AssertLLM is the first automatic assertion generation
    method that can handle the complete specification files and generate comprehensive
    types of SVAs for each architectural signal.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 据我们所知，AssertLLM是第一个可以处理完整规范文件并为每个架构信号生成全面类型SVA的自动断言生成方法。
- en: •
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'We incorporate three customized LLMs, each enhanced with specific techniques
    for the decomposed tasks: extracting structural information from specifications,
    mapping signal declarations, and translating specifications into various SVA types.
    These SVAs support checks for bit-width, connectivity, and function.'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们结合了三种定制的LLM，每种LLM都通过特定技术增强以应对分解的任务：从规范中提取结构信息，映射信号声明，以及将规范翻译成各种SVA类型。这些SVA支持位宽、连通性和功能的检查。
- en: •
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: We provide the first open-source benchmarks¹¹1It will be open-sourced in https://github.com/hkust-zhiyao/AssertLLM
    for assertion generation and evaluation, which include both golden specification
    documents and golden RTL designs. The generated SVAs are evaluated on the golden
    RTL implementations using model checking tools. Our evaluation method is designed
    to be applicable across a variety of design types.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们提供了第一个开源基准¹¹1它将在https://github.com/hkust-zhiyao/AssertLLM中开源，用于断言生成和评估，包括黄金规范文档和黄金RTL设计。生成的SVA在黄金RTL实现上使用模型检查工具进行评估。我们的方法旨在适用于各种设计类型。
- en: •
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: To demonstrate the effectiveness of AssertLLM, we conducted a comprehensive
    evaluation on a complete design. This resulted in the generation of 56 SVAs for
    23 signals, with 23 for bit-width, 16 for interface, and 17 for function. Impressively,
    89% of these generated SVAs are evaluated to be correct both syntactically and
    functionally.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了证明AssertLLM的有效性，我们对一个完整设计进行了全面评估。这导致生成了56个SVA用于23个信号，其中23个用于位宽，16个用于接口，17个用于功能。令人印象深刻的是，这些生成的SVA中有89%在语法和功能上都被评估为正确。
- en: II Preliminaries and Problem Formulation
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: II 预备知识与问题表述
- en: II-A Natural Language Specification
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: II-A 自然语言规范
- en: 'A well-defined natural language specification mainly contains the following
    six parts: (1) introduction: introduces the concepts and the features of the target
    design. (2) IO ports: provides detailed information on the prime input and prime
    output ports essential for interfacing. (3) registers: describe all the architecture-level
    registers in the design. (4) operation: explains the operational procedures for
    dataflow and control. (5) architecture: the high-level workflow and dataflow of
    the design. (6) usage examples: offers basic usage scenarios and corresponding
    waveform illustrations for the design.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一个明确的自然语言规范主要包含以下六个部分：（1）引言：介绍目标设计的概念和特征。（2）IO端口：提供有关与接口相关的主要输入和输出端口的详细信息。（3）寄存器：描述设计中的所有架构级寄存器。（4）操作：解释数据流和控制的操作过程。（5）架构：设计的高级工作流程和数据流。（6）使用示例：提供设计的基本使用场景和相应的波形图示。
- en: Specifically for the signals, the specification only defines the necessary architecture-level
    IO ports and registers, while leaving the definition of the internal signals used
    in the detailed RTL implementations for the RTL designers.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 针对信号，规范仅定义了必要的架构级IO端口和寄存器，而将详细RTL实现中使用的内部信号的定义留给RTL设计师。
- en: II-B LLM for EDA
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: II-B EDA的LLM
- en: Recent advancements in LLMs like ChatGPT [[18](#bib.bib18)] have not only demonstrated
    remarkable capability in content generation but also evolved to assist humans
    in various roles as agents. The application of LLMs in the field of electronic
    design automation (EDA) is an emerging area of exploration. Besides employing
    LLMs for assertion generation [[7](#bib.bib7), [8](#bib.bib8), [9](#bib.bib9)],
    recent studies have employed LLMs for tasks such as RTL code generation [[19](#bib.bib19),
    [20](#bib.bib20), [21](#bib.bib21), [22](#bib.bib22), [23](#bib.bib23), [24](#bib.bib24),
    [25](#bib.bib25), [26](#bib.bib26)] and syntax correction [[27](#bib.bib27)].
    Additionally, LLM-based solutions have been developed to facilitate the interaction
    with EDA tools [[26](#bib.bib26), [28](#bib.bib28)], design architecture for AI
    accelerators [[29](#bib.bib29), [30](#bib.bib30)], fix security bugs [[31](#bib.bib31)],
    generate and review specification documents [[32](#bib.bib32)], etc. These diverse
    applications and research efforts indicate a highly promising future for LLMs
    in enhancing and revolutionizing chip design processes.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，像 ChatGPT 这样的 LLM 取得了显著进展[[18](#bib.bib18)]，不仅展示了在内容生成方面的卓越能力，还演变为在各种角色中协助人类。LLM
    在电子设计自动化（EDA）领域的应用是一个新兴的探索领域。除了使用 LLM 进行断言生成[[7](#bib.bib7), [8](#bib.bib8), [9](#bib.bib9)]，最近的研究还使用
    LLM 进行 RTL 代码生成[[19](#bib.bib19), [20](#bib.bib20), [21](#bib.bib21), [22](#bib.bib22),
    [23](#bib.bib23), [24](#bib.bib24), [25](#bib.bib25), [26](#bib.bib26)] 和语法修正[[27](#bib.bib27)]。此外，还开发了基于
    LLM 的解决方案以便于与 EDA 工具[[26](#bib.bib26), [28](#bib.bib28)] 进行交互，为 AI 加速器设计架构[[29](#bib.bib29),
    [30](#bib.bib30)]，修复安全漏洞[[31](#bib.bib31)]，生成和审查规格文档[[32](#bib.bib32)]等。这些多样化的应用和研究努力表明
    LLM 在提升和革新芯片设计过程方面具有极大的前景。
- en: II-C Problem Fromulation
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: II-C 问题表述
- en: 'We denote a well-defined specification file as $\mathcal{S}$ and generate a
    comprehensive set of assertions $\mathcal{A}$. The assertion generation can be
    expressed as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将定义良好的规格文件表示为$\mathcal{S}$，并生成一套全面的断言$\mathcal{A}$。断言生成可以表达如下：
- en: Problem 1 (Assertion Generation from Specification).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 问题 1（从规格生成断言）。
- en: '|  | ${\forall}sg_{i}\in\mathcal{S},Gen(S,sg_{i})\rightarrow\ \mathcal{A}(sg_{i})$
    |  | (1) |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '|  | ${\forall}sg_{i}\in\mathcal{S},Gen(S,sg_{i})\rightarrow\ \mathcal{A}(sg_{i})$
    |  | (1) |'
- en: 'Following the generation of assertions, it is crucial to evaluate their quality.
    We denote this evaluation process as $Eval$. The evaluation can be formulated
    below:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成断言之后，评估其质量至关重要。我们将这一评估过程称为$Eval$。评估可以按照以下公式进行：
- en: Problem 2 (Generated Assertion Evaluation).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 问题 2（生成的断言评估）。
- en: '|  | $1$2 |  | (2) |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '|  | $1$2 |  | (2) |'
- en: III Methodology
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: III 方法论
- en: III-A Workflow Overview
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: III-A 工作流程概述
- en: '![Refer to caption](img/8c7d8fb58a65d34cce4a743a827ed80e.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![参考标题](img/8c7d8fb58a65d34cce4a743a827ed80e.png)'
- en: 'Figure 2: AssertLLM generation and evaluation workflow. AssertLLM incorporates
    three customized LLMs, each enhanced with specific techniques for the decomposed
    tasks: extracting structural information from specifications, mapping signal definitions,
    and translating specifications into various SVA types. To evaluate the performance
    of the generation methods, the generated SVAs are further assessed based on the
    golden RTL implementations using model checking tools.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2：AssertLLM 生成和评估工作流程。AssertLLM 集成了三个定制化的 LLM，每个 LLM 都增强了特定的技术以完成分解任务：从规格中提取结构信息，映射信号定义，以及将规格翻译成各种
    SVA 类型。为了评估生成方法的性能，生成的 SVAs 进一步基于黄金 RTL 实现进行模型检查工具评估。
- en: 'Fig. [2](#S3.F2 "Figure 2 ‣ III-A Workflow Overview ‣ III Methodology ‣ Spec2SVA-Eval:
    Evaluating LLMs for Assertion Generation from Design Specification") illustrates
    the SVA generation and evaluation flow for AssertLLM. Our approach to generating
    hardware verification assertions from natural language specifications, particularly
    from comprehensive specification documents, involves the integration of three
    customized LLMs. These LLMs are designed to break down this complex task into
    manageable components, thereby facilitating a comprehensive generation workflow.
    Additionally, we contribute an open-source benchmark and establish evaluation
    methodologies to assess the quality of the generated SVAs.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 [2](#S3.F2 "图 2 ‣ III-A 工作流程概述 ‣ III 方法论 ‣ Spec2SVA-Eval：评估用于从设计规格生成断言的 LLM")
    说明了 AssertLLM 的 SVA 生成和评估流程。我们从自然语言规格生成硬件验证断言的方法，特别是从综合规格文档中，涉及到三个定制化 LLM 的整合。这些
    LLM 旨在将复杂任务分解为可管理的组件，从而促进全面的生成工作流程。此外，我们贡献了一个开源基准，并建立了评估方法来评估生成的 SVAs 的质量。
- en: 'The assertion generation process is decomposed into three primary steps: (1)
    Extraction of relevant information from the original specification necessary for
    SVA generation. (2) Alignment of signal names between the natural language specifications
    and their corresponding declarations in HDL code. (3) Generation of high-quality
    SVAs based on the extracted natural language specifications.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 断言生成过程分为三个主要步骤：（1）从原始规格中提取生成SVA所需的相关信息。（2）对齐自然语言规格与HDL代码中的对应声明之间的信号名称。（3）基于提取的自然语言规格生成高质量的SVA。
- en: In the subsequent subsections, we will detail the functionalities of each customized
    LLM of the comprehensive assertion generation flow. Following this, our SVA evaluation
    methodology will be presented.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在随后的小节中，我们将详细说明综合断言生成流程中每个定制LLM的功能。接下来，我们将介绍我们的SVA评估方法论。
- en: III-B Specification Information Extraction
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: III-B 规格信息提取
- en: 'The first step of our AssertLLM framework is to extract structured information
    from natural language specification documents to enable SVA generation. As we
    discussed in Section [I](#S1 "I Introduction ‣ Spec2SVA-Eval: Evaluating LLMs
    for Assertion Generation from Design Specification"), the first key challenge
    of SVA generation lies in the inherent unstructured nature of the original specifications,
    which contain background information, functional descriptions, microarchitecture
    designs, and various diagrams, including dataflow and waveform, etc. Meanwhile,
    the existence of assertion-relevant information across different sections further
    complicates the direct utilization of the original specifications for SVA generation.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '我们的AssertLLM框架的第一步是从自然语言规格文档中提取结构化信息，以便进行SVA生成。如我们在第[I](#S1 "I Introduction
    ‣ Spec2SVA-Eval: Evaluating LLMs for Assertion Generation from Design Specification)节中讨论的那样，SVA生成的首要挑战在于原始规格的固有非结构化特性，这些规格包含背景信息、功能描述、微架构设计以及各种图示，包括数据流和波形等。同时，断言相关信息分布在不同的部分，使得直接利用原始规格进行SVA生成变得更加复杂。'
- en: Facing this challenge, existing methods can only deal with sentence-level specifications.
    Some works [[14](#bib.bib14), [16](#bib.bib16)] utilize ML methods to assess the
    relevance of manually extracted specification sentences to the intended assertions.
    Other studies [[10](#bib.bib10), [11](#bib.bib11), [12](#bib.bib12), [15](#bib.bib15),
    [17](#bib.bib17)] directly use the human-identified or human-written assertion-related
    sentences. This reliance on sentence-level analysis limits the ability of the
    above NLP-based methods to fully automate SVA generation for practical applications
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 面对这一挑战，现有方法只能处理句子级规格。一些研究[[14](#bib.bib14), [16](#bib.bib16)]利用机器学习方法评估手动提取的规格句子与预期断言的相关性。其他研究[[10](#bib.bib10),
    [11](#bib.bib11), [12](#bib.bib12), [15](#bib.bib15), [17](#bib.bib17)]直接使用人工识别或人工编写的断言相关句子。这种对句子级分析的依赖限制了上述基于NLP的方法在实际应用中完全自动化SVA生成的能力。
- en: To address the challenge of processing original, unstructured, full-size specification
    documents, we propose a customized LLM, tailored to extract structural and relevant
    information for each defined signal, thereby further facilitating the SVA generation
    process.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决处理原始、非结构化、大型规格文档的挑战，我们提出了一种定制的LLM，旨在提取每个定义信号的结构性和相关信息，从而进一步促进SVA生成过程。
- en: 'Specifically, in our LLM 1 SPEC Analyzer,
    we first utilize system instructions to customize the LLM, shown as Fig. [3](#S3.F3
    "Figure 3 ‣ III-B Specification Information Extraction ‣ III Methodology ‣ Spec2SVA-Eval:
    Evaluating LLMs for Assertion Generation from Design Specification"). The model
    takes the full-size specification file as the input, and the multi-modal function
    is employed to analyze the file containing text, table, figures, etc. Then for
    each signal, the LLM is required to extract all the related information of the
    signal. Here, we design a structured template to guide the LLM in extracting all
    essential signal-related information. This template contains three key components:
    the signal’s name, its description, and the interconnection signals. We demonstrate
    the details of each part as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '在我们的LLM 1
    SPEC分析器中，我们首先利用系统指令来定制LLM，如图[3](#S3.F3 "Figure 3 ‣ III-B Specification Information
    Extraction ‣ III Methodology ‣ Spec2SVA-Eval: Evaluating LLMs for Assertion Generation
    from Design Specification")所示。模型将完整的规格文件作为输入，并利用多模态功能来分析包含文本、表格、图形等的文件。然后，对于每个信号，LLM需要提取所有相关的信号信息。在这里，我们设计了一个结构化模板来指导LLM提取所有重要的信号相关信息。该模板包含三个关键组件：信号的名称、描述和互连信号。我们详细介绍每个部分如下：'
- en: •
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'Name: The identifier of the signal in the specification, ensuring clear and
    unambiguous reference.'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 名称：规格中信号的标识符，确保引用清晰且不含歧义。
- en: •
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'Description: To facilitate SVA generation, we divide the descriptions into
    four categories, including (1) definitions such as bit-width and signal type.
    (2) functionality which contains all the function-related information of the target
    signal in the entire specification file. (3) interconnection relationship with
    all other signals. (4) additional information that is not included in the above
    three types.'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 描述：为了促进SVA生成，我们将描述分为四类，包括（1）定义，如位宽和信号类型。（2）功能，包含整个规格文件中目标信号的所有功能相关信息。（3）与所有其他信号的互连关系。（4）上述三种类型中未包含的额外信息。
- en: •
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'Interconnection Signals: A list of signals that interact or are associated
    with the target signal, which are essential for the assertion generation, and
    will be processed in the next LLM.'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 互连信号：与目标信号互动或相关联的信号列表，这些信号对断言生成至关重要，并将在下一个LLM中处理。
- en: Note that the extracted information is summarized across different sections
    of the original specification, which contains all the information needed for assertion
    generation.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，提取的信息是从原规格的不同部分汇总而来的，这些信息包含了生成断言所需的所有内容。
- en: '![Refer to caption](img/7473b6df0fd7d36e42c57fe8179039f7.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![参考说明](img/7473b6df0fd7d36e42c57fe8179039f7.png)'
- en: 'Figure 3: Custom Instructions for LLM 1SPEC Analyzer'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图3：LLM的自定义指令 1SPEC分析器
- en: '![Refer to caption](img/e31b3b87b2554c347de5baa3a0d8ace2.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![参考说明](img/e31b3b87b2554c347de5baa3a0d8ace2.png)'
- en: 'Figure 4: Prompt and Response Example of LLM 1SPEC Analyzer'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '图4: LLM 1SPEC分析器的提示和响应示例'
- en: III-C Signal Definition Mapping
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: III-C 信号定义映射
- en: 'After extracting the structural specification information, we also face another
    problem: the target assertion contains internal signals that are not clearly defined
    in the specification file. As we illustrated in Subsection [II-A](#S2.SS1 "II-A
    Natural Language Specification ‣ II Preliminaries and Problem Formulation ‣ Spec2SVA-Eval:
    Evaluating LLMs for Assertion Generation from Design Specification"), the specification
    document typically details only the input/output ports and architecture-level
    registers, while leaving the internal signals used to implement the detailed functions
    in RTL code (e.g., internal wires and registers) undefined.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '在提取结构规格信息后，我们还面临另一个问题：目标断言包含在规格文件中未明确规定的内部信号。正如我们在小节[II-A](#S2.SS1 "II-A Natural
    Language Specification ‣ II Preliminaries and Problem Formulation ‣ Spec2SVA-Eval:
    Evaluating LLMs for Assertion Generation from Design Specification")中所示，规格文档通常仅详细说明输入/输出端口和架构级寄存器，而将用于在RTL代码中实现详细功能的内部信号（例如，内部线路和寄存器）留待定义。'
- en: To solve this problem, we introduce the second customized LLM 2
    Signal Mapper to analyze the signal definitions in the initialized HDL code and
    align these signal declarations with the natural language signal names found in
    the specification document.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们引入了第二个定制LLM 2信号映射器，用于分析初始化HDL代码中的信号定义，并将这些信号声明与规格文档中找到的自然语言信号名称对齐。
- en: 'Specifically, we also use the custom instructions to guide LLM to specialize
    in the mapping task, shown in Fig. [5](#S3.F5 "Figure 5 ‣ III-C Signal Definition
    Mapping ‣ III Methodology ‣ Spec2SVA-Eval: Evaluating LLMs for Assertion Generation
    from Design Specification"). The model processes both the original specification
    file and the signal definition HDL code as inputs. It employs a code interpreter
    to carefully examine both the declarations and the comments within the HDL code
    snippet. Subsequently, the LLM analyzes the contents of the two files to establish
    a mapping relationship between the specification and the HDL code.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '具体来说，我们还利用自定义指令引导LLM专注于映射任务，如图[5](#S3.F5 "Figure 5 ‣ III-C Signal Definition
    Mapping ‣ III Methodology ‣ Spec2SVA-Eval: Evaluating LLMs for Assertion Generation
    from Design Specification")所示。模型将原始规格文件和信号定义HDL代码作为输入。它使用代码解释器仔细检查HDL代码片段中的声明和注释。随后，LLM分析这两个文件的内容，以建立规格和HDL代码之间的映射关系。'
- en: '![Refer to caption](img/5b7c0ce3043a808bfb3659c25467e61f.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/5b7c0ce3043a808bfb3659c25467e61f.png)'
- en: 'Figure 5: Custom Instructions for LLM 2Signal Mapper'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5：LLM 的自定义指令 2信号映射器
- en: '![Refer to caption](img/63013b43b5268c285944e33df41d7681.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/63013b43b5268c285944e33df41d7681.png)'
- en: 'Figure 6: Prompt and Response Example of LLM 2Signal Mapper'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6：LLM 的提示和响应示例 2信号映射器
- en: III-D Automatic Assertion Generation
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: III-D 自动断言生成
- en: While previous research has delved into SVA generation using either traditional
    NLP techniques at the pre-RTL stage or LLM-based approaches for RTL designs, these
    methods have their limitations. NLP-based techniques demand careful analysis of
    the syntax and semantics of assertion-related sentences, which limit their adaptability
    to variations in sentence structures. LLM-based methods, typically focused on
    the RTL stage, rely on HDL code and accompanying human-written comments or properties,
    but their dependence on the unverified RTL code poses a risk of generating inaccurate
    SVAs that could mislead the verification process.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管先前的研究已经*深入探讨*了使用传统 NLP 技术在预 RTL 阶段或基于 LLM 的方法在 RTL 设计中的 SVA 生成，这些方法仍然存在局限性。基于
    NLP 的技术要求对断言相关句子的语法和语义进行仔细分析，这限制了其对句子结构变化的适应性。基于 LLM 的方法通常集中在 RTL 阶段，依赖 HDL 代码及其伴随的人为编写的注释或属性，但其对未经验证的
    RTL 代码的依赖可能导致生成不准确的 SVA，从而误导验证过程。
- en: To address these challenges, our work introduces the LLM 3
    SVA Generator, dedicated to generating assertions for each signal utilizing the
    previously extracted structural specifications and the established signal relationships.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应对这些挑战，我们的工作引入了 LLM 3 SVA 生成器，专注于利用之前提取的结构规格和已建立的信号关系为每个信号生成断言。
- en: Considering the precise syntax and writing rules inherent to SVAs and the potential
    for the original LLM failing to generate syntactically correct SVAs, as discussed
    in [[8](#bib.bib8)], we incorporate the Retrieval Augmented Generation (RAG) technique
    to enhance the LLM’s capability for SVA generation. This approach is enriched
    by a knowledge database comprising tutorials and textbooks on SVA and formal property
    verification [[33](#bib.bib33), [34](#bib.bib34), [35](#bib.bib35)], providing
    a robust foundation for the LLM to access and retrieve relevant SVA knowledge
    based on the input query, thereby enhancing the quality of the generated SVAs.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到SVAs固有的精确语法和写作规则，以及原始LLM可能无法生成语法正确的SVAs，如[[8](#bib.bib8)]所讨论的，我们采用了检索增强生成（RAG）技术来提升LLM在SVA生成方面的能力。该方法通过包括SVA和形式化属性验证的教程和教科书的知识数据库来丰富，为LLM提供了一个强大的基础，以便根据输入查询访问和检索相关的SVA知识，从而提高生成的SVAs的质量。
- en: 'Besides the RAG technique, we also provide custom instructions for SVA Generator,
    shown in Fig. [7](#S3.F7 "Figure 7 ‣ III-D Automatic Assertion Generation ‣ III
    Methodology ‣ Spec2SVA-Eval: Evaluating LLMs for Assertion Generation from Design
    Specification"). After uploading the overall architecture diagram of the design,
    for each signal, the extracted structural specifications and the mapped signal
    relationship from the above two LLMs are provided. Then the LLM is required to
    generate SVAs strictly according to the specification, and as much and high coverage
    as possible. To guide the LLM to generate high-quality SVAs, we define five SVA
    categories as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '除了RAG技术外，我们还为SVA生成器提供了定制指令，如图[7](#S3.F7 "Figure 7 ‣ III-D Automatic Assertion
    Generation ‣ III Methodology ‣ Spec2SVA-Eval: Evaluating LLMs for Assertion Generation
    from Design Specification")所示。在上传设计的整体架构图后，为每个信号提供从上述两个LLMs提取的结构规格和映射信号关系。然后，LLM需要严格按照规格生成SVAs，并尽可能多地覆盖。为了指导LLM生成高质量的SVAs，我们定义了五类SVA，如下所示：'
- en: 'In addition to the RAG technique, we improve the SVA Generator with custom
    instructions, as illustrated in Fig. [7](#S3.F7 "Figure 7 ‣ III-D Automatic Assertion
    Generation ‣ III Methodology ‣ Spec2SVA-Eval: Evaluating LLMs for Assertion Generation
    from Design Specification"). Upon inputting the overall architecture diagram of
    the design, the LLM is provided with the structured specifications and mapped
    signal relationships from the previous LLMs for each signal. Then the LLM is required
    to generate SVAs that adhere strictly to the specifications, aiming for maximal
    quantity and quality. To facilitate the generation of high-quality SVAs, we categorize
    SVAs into three distinct groups, guiding the LLM toward producing comprehensive
    and accurate assertions for effective verification.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '除了RAG技术外，我们通过定制指令改进了SVA生成器，如图[7](#S3.F7 "Figure 7 ‣ III-D Automatic Assertion
    Generation ‣ III Methodology ‣ Spec2SVA-Eval: Evaluating LLMs for Assertion Generation
    from Design Specification")所示。在输入设计的整体架构图后，LLM会获得结构化的规格说明和从之前的LLM获得的每个信号的映射信号关系。然后，LLM需要生成严格符合规格说明的SVAs，以求达到最大数量和质量。为了促进高质量SVAs的生成，我们将SVAs分为三类，指导LLM生成全面准确的断言，以便有效验证。'
- en: •
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'Width: Check if the signal bit width is satisfied with the specification.'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 位宽：检查信号位宽是否符合规格要求。
- en: •
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'Connectivity: Check if the signal can be correctly exercised and also the value
    propagation among all connected signals.'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接性：检查信号是否能够正确地被激活，并且所有连接信号之间的值传播是否正常。
- en: •
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'Function: Check if the function defined in the specification is implemented
    as expected.'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 功能：检查规格中定义的功能是否按预期实现。
- en: 'Based on these well-designed SVA types, the customized LLM can generate numerous
    SVAs for each signal. Fig. [8](#S3.F8 "Figure 8 ‣ III-D Automatic Assertion Generation
    ‣ III Methodology ‣ Spec2SVA-Eval: Evaluating LLMs for Assertion Generation from
    Design Specification") demonstrates an example of generating SVAs for a signal.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '基于这些设计良好的SVA类型，定制的LLM可以为每个信号生成大量SVAs。图[8](#S3.F8 "Figure 8 ‣ III-D Automatic
    Assertion Generation ‣ III Methodology ‣ Spec2SVA-Eval: Evaluating LLMs for Assertion
    Generation from Design Specification")展示了为信号生成SVAs的一个示例。'
- en: '![Refer to caption](img/c69f77d83e663c35d8c01db44e0afd09.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![参考说明](img/c69f77d83e663c35d8c01db44e0afd09.png)'
- en: 'Figure 7: Custom Instructions for LLM 3SVA Generator'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '图 7: LLM 的自定义指令 3SVA
    生成器'
- en: '![Refer to caption](img/006296b3ae0e56ed4197fb2a924d15d9.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![参考说明](img/006296b3ae0e56ed4197fb2a924d15d9.png)'
- en: 'Figure 8: Prompt and Response Example of LLM 3SVA Generator'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '图 8: LLM 的提示和响应示例 3SVA 生成器'
- en: III-E Generated Assertion Evaluation
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: III-E 生成断言评估
- en: After the SVAs are generated, evaluating their effectiveness is crucial. While
    some previous studies such as [[12](#bib.bib12), [14](#bib.bib14)] suggest using
    specific property checkers for this purpose, such an approach is limited to particular
    design types like protocols and processors and lacks generalizability to all VLSI
    designs. Other methods like [[8](#bib.bib8)] involve manual verification by engineers
    using EDA tools, which is vulnerable to human error.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成 SVA 后，评估其有效性至关重要。虽然一些以前的研究，如 [[12](#bib.bib12), [14](#bib.bib14)] 提议使用特定的属性检查器，但这种方法仅限于特定设计类型，如协议和处理器，且无法普遍适用于所有
    VLSI 设计。其他方法如 [[8](#bib.bib8)] 涉及工程师使用 EDA 工具进行手动验证，易受人为错误影响。
- en: In our approach, we propose leveraging the golden RTL implementations to assess
    the quality of the generated SVAs. Our generation method is solely based on the
    specification file, and the bug-free golden RTL designs serve as a robust benchmark
    to evaluate our generation technique’s efficacy.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的方法中，我们建议利用黄金 RTL 实现来评估生成的 SVA 质量。我们的生成方法完全基于规范文件，而无错误的黄金 RTL 设计则作为评估我们生成技术有效性的稳健基准。
- en: 'For evaluation, we utilize the formal property verification (FPV) method. The
    generated SVAs and the golden RTL designs are inputted into a model checker tool.
    After executing FPV, we employ the following two metrics to evaluate the quality
    of SVAs for each target signal:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在评估中，我们利用形式化属性验证 (FPV) 方法。生成的 SVA 和黄金 RTL 设计被输入到模型检查工具中。执行 FPV 后，我们采用以下两个指标来评估每个目标信号的
    SVA 质量：
- en: •
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'Syntax: Check if the generated SVAs have syntax errors.'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语法：检查生成的 SVA 是否有语法错误。
- en: •
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'FPV Pass/Fail: Given the RTL designs are bug-free, an SVA that passes the FPV
    check is considered correct, and conversely, a failure indicates an incorrect
    SVA.'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: FPV 通过/失败：鉴于 RTL 设计无错误，通过 FPV 检查的 SVA 被视为正确，而失败则表示 SVA 不正确。
- en: III-F Proposed Benchmark
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: III-F 提议的基准
- en: 'Recognizing the absence of open-source benchmarks for evaluating LLMs in the
    generation of SVAs from natural language specifications, we introduce a comprehensive
    benchmark suite tailored for this purpose. Our benchmark consists of 20 open-source
    designs, covering a diverse array of applications including microprocessors, system-on-chip
    architectures, communication protocols, arithmetic units, and cryptographic modules.
    For each design within the benchmark, the benchmark provides the following components
    across three distinct files:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 由于缺乏用于评估 LLM 从自然语言规范生成 SVA 的开源基准，我们引入了一个全面的基准套件，专门为此目的量身定制。我们的基准包括 20 个开源设计，涵盖各种应用，包括微处理器、系统级芯片架构、通信协议、算术单元和加密模块。对于基准中的每个设计，该基准提供以下三个不同文件中的组件：
- en: •
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'Specification: This file contains the complete natural language specification
    for the design, offering a detailed description of the system’s intended architecture
    and functionality.'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '规范: 此文件包含设计的完整自然语言规范，提供系统预期架构和功能的详细描述。'
- en: •
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'Signal Definition: Presented in HDL code format, this file outlines the signal
    declarations essential for the generation of SVAs. It includes definitions for
    both input/output ports and internal signals, providing the foundation for assertion
    generation.'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '信号定义: 以HDL代码格式呈现，此文件概述了生成SVA所需的信号声明。它包括输入/输出端口和内部信号的定义，为断言生成提供基础。'
- en: •
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'Golden RTL Implementation: This file comprises the RTL design implementations
    that are strictly implemented according to the specification. The designs are
    verified to ensure it is free from bugs, serving as a reliable standard for evaluating
    the accuracy and effectiveness of generated SVAs.'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '黄金RTL实现: 此文件包含严格按照规范实施的RTL设计实现。这些设计经过验证，确保没有错误，作为评估生成SVA的准确性和有效性的可靠标准。'
- en: IV Experimental Results
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IV 实验结果
- en: IV-A Experimental Setup
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IV-A 实验设置
- en: In our study, the original specification documents are provided in PDF format,
    including a variety of multi-modal content including text, tables, and figures.
    The signal definition files and the golden RTL designs are formatted in Verilog.
    To assess the quality of the generated SVAs, we utilize Cadence JasperGold^®,
    one of the leading commercial model checking tools. This evaluation leverages
    the FPV app in JasperGold to ensure a thorough analysis.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的研究中，原始规范文档以PDF格式提供，包括多种多模态内容，如文本、表格和图形。信号定义文件和黄金RTL设计以Verilog格式提供。为了评估生成SVA的质量，我们使用了Cadence
    JasperGold^®，这是领先的商业模型检查工具之一。该评估利用JasperGold中的FPV应用程序，确保全面分析。
- en: 'Our experimental setup involves the evaluation of three types of LLMs using
    our developed generation and evaluation methodology:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的实验设置涉及使用我们开发的生成和评估方法评估三种类型的LLM：
- en: '1.'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1.'
- en: 'GPT-3.5: This model is the freely available commercial version, GPT-3.5 Turbo,
    which supports a context window of up to 16K tokens.'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'GPT-3.5: 这是免费的商业版GPT-3.5 Turbo，支持最大16K tokens的上下文窗口。'
- en: '2.'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2.'
- en: 'GPT-4: The state-of-the-art commercial solution, GPT-4 Turbo, offers a 128K
    token context window and multi-modal capabilities, making it adept at handling
    the diverse content found in specification documents.'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'GPT-4: 领先的商业解决方案GPT-4 Turbo，提供128K token的上下文窗口和多模态能力，能够处理规范文档中多样的内容。'
- en: '3.'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '3.'
- en: 'AssertLLM: Cutomized GPT-4 Turbo by incorporating specialized techniques such
    as RAG and custom instructions, tailoring the models specialized to the SVA generation
    task.'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'AssertLLM: 通过引入诸如RAG和自定义指令等专门技术定制的GPT-4 Turbo，将模型专门针对SVA生成任务进行调整。'
- en: In our experimental evaluation, we focus on the quality of the SVAs generated
    for each signal across the designs. Note that all SVAs are produced from a single
    query to the LLMs without any subsequent iterative modifications. The SVA containing
    unmapped signals is considered an unsuccessful attempt at SVA generation. These
    SVAs are identified and excluded by human engineers prior to the evaluation process.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的实验评估中，我们专注于每个设计中生成的SVA的质量。请注意，所有SVA都是从单一查询生成LLMs，而没有任何后续的迭代修改。包含未映射信号的SVA被视为SVA生成的失败尝试。这些SVA在评估过程前由人工工程师识别并排除。
- en: '|  | AssertLLM | GPT-4 | GPT-3.5 |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '|  | AssertLLM | GPT-4 | GPT-3.5 |'
- en: '| Signal | Assertion Evaluation (#. Generated/#. Syntax Correct/#. FPV Pass)
    |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| 信号 | 断言评估 (#. 生成/#. 语法正确/#. FPV通过) |'
- en: '| Type | Name | Width | Connect. | Function | Signal Total | Function |  |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 名称 | 宽度 | 连接 | 功能 | 信号总计 | 功能 |  |'
- en: '|  | Clock | wb_clk_i | 1/1/1 | / | 1/1/1 | 3/1/0 |  |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '|  | Clock | wb_clk_i | 1/1/1 | / | 1/1/1 | 3/1/0 |  |'
- en: '|  |  | wb_rst_i | 1/1/1 |  | 1/1/1 | 3/1/0 |  |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '|  |  | wb_rst_i | 1/1/1 |  | 1/1/1 | 3/1/0 |  |'
- en: '|  | Reset | arst_i | 1/1/1 | / | 1/1/1 | 3/1/0 |  |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '|  | Reset | arst_i | 1/1/1 | / | 1/1/1 | 3/1/0 |  |'
- en: '|  |  | wb_stb_i | 1/1/1 | 2/2/1 |  | 3/3/2 | 3/1/0 |  |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '|  |  | wb_stb_i | 1/1/1 | 2/2/1 |  | 3/3/2 | 3/1/0 |  |'
- en: '|  |  | wb_ack_o | 1/1/1 | 1/1/0 |  | 2/2/1 | 3/1/0 |  |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '|  |  | wb_ack_o | 1/1/1 | 1/1/0 |  | 2/2/1 | 3/1/0 |  |'
- en: '|  | Control | wb_inta_o | 1/1/1 | 1/1/0 | / | 2/2/1 | 3/1/0 |  |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '|  | Control | wb_inta_o | 1/1/1 | 1/1/0 | / | 2/2/1 | 3/1/0 |  |'
- en: '|  |  | wb_adr_i | 1/1/1 |  |  | 1/1/1 | 3/1/0 |  |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '|  |  | wb_adr_i | 1/1/1 |  |  | 1/1/1 | 3/1/0 |  |'
- en: '|  |  | wb_dat_i | 1/1/1 |  |  | 1/1/1 | 3/1/0 |  |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '|  |  | wb_dat_i | 1/1/1 |  |  | 1/1/1 | 3/1/0 |  |'
- en: '|  |  | wb_cyc_i | 1/1/1 |  |  | 1/1/1 | 3/1/0 |  |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '|  |  | wb_cyc_i | 1/1/1 |  |  | 1/1/1 | 3/1/0 |  |'
- en: '|  |  | wb_dat_o | 1/1/1 |  |  | 1/1/1 | 3/1/0 |  |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '|  |  | wb_dat_o | 1/1/1 |  |  | 1/1/1 | 3/1/0 |  |'
- en: '|  |  | wb_we_i | 1/1/1 |  |  | 1/1/1 | 3/1/0 |  |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '|  |  | wb_we_i | 1/1/1 |  |  | 1/1/1 | 3/1/0 |  |'
- en: '|  |  | scl_pad_i | 1/1/1 |  |  | 1/1/1 | 3/1/0 |  |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '|  |  | scl_pad_i | 1/1/1 |  |  | 1/1/1 | 3/1/0 |  |'
- en: '|  |  | scl_pad_o | 1/1/1 |  |  | 1/1/1 | 3/1/0 |  |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '|  |  | scl_pad_o | 1/1/1 |  |  | 1/1/1 | 3/1/0 |  |'
- en: '|  |  | sda_pad_i | 1/1/1 |  |  | 1/1/1 | 3/1/0 |  |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '|  |  | sda_pad_i | 1/1/1 |  |  | 1/1/1 | 3/1/0 |  |'
- en: '|  |  | sda_pad_o | 1/1/1 |  |  | 1/1/1 | 3/1/0 |  |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '|  |  | sda_pad_o | 1/1/1 |  |  | 1/1/1 | 3/1/0 |  |'
- en: '|  |  | scl_pad_oe | 1/1/1 |  |  | 1/1/1 | 3/1/0 |  |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '|  |  | scl_pad_oe | 1/1/1 |  |  | 1/1/1 | 3/1/0 |  |'
- en: '| IO Port | Data | sda_pad_oe | 1/1/1 | / | / | 1/1/1 | 3/1/0 |  |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| IO 端口 | 数据 | sda_pad_oe | 1/1/1 | / | / | 1/1/1 | 3/1/0 |  |'
- en: '|  |  | ctr | 1/1/1 | 4/4/4 | 5/5/5 | 10/10/10 | 3/1/1 |  |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '|  |  | ctr | 1/1/1 | 4/4/4 | 5/5/5 | 10/10/10 | 3/1/1 |  |'
- en: '|  | Control | sr | 1/1/1 | 6/6/5 | 8/8/8 | 15/15/14 | 3/1/1 |  |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '|  | 控制 | sr | 1/1/1 | 6/6/5 | 8/8/8 | 15/15/14 | 3/1/1 |  |'
- en: '|  |  | prer | 1/1/1 | / | 3/3/1 | 4/4/2 | 4/1/1 |  |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '|  |  | prer | 1/1/1 | / | 3/3/1 | 4/4/2 | 4/1/1 |  |'
- en: '|  |  | txr | 1/1/1 | / | 1/1/1 | 2/2/2 | 3/1/1 |  |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '|  |  | txr | 1/1/1 | / | 1/1/1 | 2/2/2 | 3/1/1 |  |'
- en: '|  |  | rxr | 1/1/1 | / | 1/1/1 | 2/2/2 | 3/1/1 |  |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '|  |  | rxr | 1/1/1 | / | 1/1/1 | 2/2/2 | 3/1/1 |  |'
- en: '| Register | Data | cr | 1/1/1 | / | 1/1/1 | 2/2/2 | 4/1/1 |  |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| 寄存器 | 数据 | cr | 1/1/1 | / | 1/1/1 | 2/2/2 | 4/1/1 |  |'
- en: '|  |  | 23/23/23 | 16/16/12 | 17/17/15 | 56/56/50 | 71/23/6 |  |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '|  |  | 23/23/23 | 16/16/12 | 17/17/15 | 56/56/50 | 71/23/6 |  |'
- en: '|  | Design Total | 100%/100% | 100%/75% | 100%/88% | 100%/89% | 32%/8% | Can
    not handle the original specification files. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '|  | 设计总计 | 100%/100% | 100%/75% | 100%/88% | 100%/89% | 32%/8% | 无法处理原始规范文件。
    |'
- en: 'Table II: Evaluation of the generated SVAs for design ”I2C”. AssertLLM generates
    56 SVAs for a total of 23 signals, with 23 for bit-width, 16 for connectivity,
    and 17 for function. 89% of these generated SVAs are evaluated to be correct both
    syntactically and functionally.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 表 II：对设计 “I2C” 生成的 SVAs 进行评估。AssertLLM 为总共 23 个信号生成了 56 个 SVAs，其中 23 个用于位宽，16
    个用于连通性，17 个用于功能。这些生成的 SVAs 中有 89% 被评估为在语法和功能上都是正确的。
- en: IV-B Evaluation Metrics
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IV-B 评估指标
- en: To conduct a thorough evaluation of the generated SystemVerilog SVAs, we propose
    a set of metrics that align with our evaluation methodology. This approach ensures
    a detailed assessment of the SVAs’ quality on both a per-signal and per-design
    basis.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对生成的 SystemVerilog SVAs 进行全面评估，我们提出了一组与我们评估方法论相符的指标。这种方法确保了对 SVAs 质量的详细评估，无论是按信号还是按设计。
- en: 'For each assertion type of an individual signal, our evaluation includes the
    following metrics: (1) number of generated SVAs. (2) number of syntax-correct
    SVAs. (3) number of FPV-passed SVAs.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每种单个信号的断言类型，我们的评估包括以下指标：（1）生成的 SVAs 数量。（2）语法正确的 SVAs 数量。（3）FPV 通过的 SVAs 数量。
- en: Once the evaluation for each signal is complete, we aggregate the statistics
    of the generated SVAs for each design and then calculate the proportion of these
    SVAs that are syntactically correct and passed the FPV checks, respectively.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦每个信号的评估完成，我们会汇总每个设计生成的 SVAs 统计数据，然后分别计算这些 SVAs 语法正确和通过 FPV 检查的比例。
- en: IV-C Assertion Generation Quality
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IV-C 断言生成质量
- en: 'To illustrate the efficacy of AssertLLM, we apply it to a comprehensive design
    case: the ”I2C” protocol. The I2C specification describes the architecture of
    a serial communication bus that provides a simple and efficient method of data
    exchange between devices. The complete specification document for the ”I2C” design
    is structured into six main sections, similar to those illustrated in Subsection [II-A](#S2.SS1
    "II-A Natural Language Specification ‣ II Preliminaries and Problem Formulation
    ‣ Spec2SVA-Eval: Evaluating LLMs for Assertion Generation from Design Specification").
    Note that for each signal, the specification is unstructured and mainly across
    the IO ports, registers, and operation sections.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '为了说明 AssertLLM 的有效性，我们将其应用于一个综合设计案例：“I2C” 协议。I2C 规范描述了一个串行通信总线的架构，该总线提供了一种简单而高效的数据交换方法。关于
    “I2C” 设计的完整规范文档被分为六个主要部分，类似于[II-A](#S2.SS1 "II-A 自然语言规范 ‣ II 初步和问题表述 ‣ Spec2SVA-Eval:
    评估 LLMs 从设计规范生成断言")中所示的部分。请注意，对于每个信号，规范是无结构的，主要涉及 IO 端口、寄存器和操作部分。'
- en: Additionally, we provide the signal definition file containing not only the
    IO ports and architectural registers but also all the internal wires and registers
    defined for detailed RTL implementation.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们提供了信号定义文件，其中不仅包含 IO 端口和架构寄存器，还包括所有定义的内部线网和寄存器，用于详细的 RTL 实现。
- en: 'To facilitate the generation of SVAs, the AssertLLM framework processes specification
    and signal definition files using two specialized LLMs: SPEC Analyzer for extracting
    structured specifications for each signal and Signal Mapper for mapping signal
    relationships. Then the SVA Generator is utilized to automatically generate three
    types of SVAs based on the processed information from the first two LLMs.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 为了促进SVAs的生成，AssertLLM框架使用两个专门的LLMs处理规范和信号定义文件：SPEC Analyzer用于提取每个信号的结构化规范，Signal
    Mapper用于映射信号关系。然后使用SVA Generator根据前两个LLMs处理的信息自动生成三种类型的SVAs。
- en: 'The specification for the ”I2C” design defines 23 signals, comprising 17 IO
    ports and 6 architecture-level registers. For the IO ports, we categorize them
    into 4 functional types: clock, reset, control signal, and data signal. The architecture-level
    registers are similarly categorized, based on their functionality, into control
    and data types.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: “I2C”设计的规范定义了23个信号，包括17个IO端口和6个架构级寄存器。对于IO端口，我们将其分类为4种功能类型：时钟、复位、控制信号和数据信号。架构级寄存器根据其功能类似地被分类为控制类型和数据类型。
- en: 'The evaluation of SVAs generated by our AsserLLM is demonstrated in Table [II](#S4.T2
    "Table II ‣ IV-A Experimental Setup ‣ IV Experimental Results ‣ Spec2SVA-Eval:
    Evaluating LLMs for Assertion Generation from Design Specification"). For each
    signal, we first verify each type of the generated SVAs separately. Then we summarize
    all the SVAs to provide a design-level inspection. We have multiple interesting
    observations in Table [II](#S4.T2 "Table II ‣ IV-A Experimental Setup ‣ IV Experimental
    Results ‣ Spec2SVA-Eval: Evaluating LLMs for Assertion Generation from Design
    Specification") as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '我们的AssertLLM生成的SVAs的评估见表[II](#S4.T2 "Table II ‣ IV-A Experimental Setup ‣ IV
    Experimental Results ‣ Spec2SVA-Eval: Evaluating LLMs for Assertion Generation
    from Design Specification")。对于每个信号，我们首先分别验证生成的每种类型的SVAs。然后，我们汇总所有SVAs以提供设计级别的检查。在表[II](#S4.T2
    "Table II ‣ IV-A Experimental Setup ‣ IV Experimental Results ‣ Spec2SVA-Eval:
    Evaluating LLMs for Assertion Generation from Design Specification")中，我们有多个有趣的观察结果如下：'
- en: •
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: AssertLLM demonstrates excellent proficiency in generating SVAs for bit-width
    checking. Although bit-width checking is relatively straightforward, it is crucial
    for early design stages to avoid potential bugs that cannot be checked through
    a syntax checker.
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AssertLLM在生成位宽检查的SVAs方面表现出色。尽管位宽检查相对简单，但在早期设计阶段至关重要，以避免无法通过语法检查器检查的潜在错误。
- en: •
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: For the connectivity SVAs, since clear guidelines are provided only for control
    signals within the architecture-level specification documents, AssertLLM can only
    generate connectivity SVAs for them. The connectivity of data signals often depend
    on specific internal signals defined in the RTL implementation, which are not
    detailed in the specification document.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于连接性SVAs，由于规范文档中仅为控制信号提供了明确的指南，AssertLLM只能为这些信号生成连接性SVAs。数据信号的连接性通常依赖于RTL实现中定义的特定内部信号，这些信号在规范文档中没有详细说明。
- en: •
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: For the function SVAs, the specification provides explicit details only for
    registers. The descriptions of IO ports are primarily focused on data transformation
    functions, without extensive functional details, which results in the lack of
    related SVAs.
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于SVAs功能，规范仅对寄存器提供了明确的细节。IO端口的描述主要集中在数据转换功能上，缺乏详细的功能说明，这导致了相关SVAs的缺失。
- en: •
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: For the quantity of generated SVAs, AssertLLM produced a total of 56 SVAs, with
    23 dedicated to width checking, 16 to connectivity checking, and 17 to function
    checking.
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于生成的SVAs数量，AssertLLM共生成了56个SVAs，其中23个用于宽度检查，16个用于连接性检查，17个用于功能检查。
- en: •
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: Regarding the quality of generated SVAs, all SVAs related to bit-width checking
    performed correctly. However, a minor portion of connectivity and function SVAs
    contained errors, attributed mainly to misinterpretations of the specification
    or LLM-generated hallucinations. Overall, AssertLLM achieved a correct accuracy
    rate of 89% for the entire I2C design.
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于生成的SVAs的质量，所有与位宽检查相关的SVAs都正确执行。然而，一小部分连接性和功能SVAs包含错误，主要归因于对规范的误解或LLM生成的幻觉。总体而言，AssertLLM在整个I2C设计中实现了89%的准确率。
- en: IV-D Ablation Study
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IV-D 消融研究
- en: In addition to assessing AssertLLM’s performance, we conducted an ablation study
    to compare the SVA generation capabilities of the original GPT-4 and GPT-3.5 models
    without the additional techniques. This study provides insights into the effectiveness
    of enhancements incorporated in AssertLLM.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 除了评估AssertLLM的性能外，我们还进行了消融研究，比较了原始GPT-4和GPT-3.5模型在没有额外技术的情况下的SVA生成能力。该研究提供了对AssertLLM中所融入的增强效果的洞察。
- en: 'The evaluation results for the two commercial solutions are demonstrated in
    Table [II](#S4.T2 "Table II ‣ IV-A Experimental Setup ‣ IV Experimental Results
    ‣ Spec2SVA-Eval: Evaluating LLMs for Assertion Generation from Design Specification").
    For GPT-3.5, since the lack of multi-modal processing capabilities, it is unable
    to directly generate SVAs from the original, multi-modal specification files.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '两种商业解决方案的评估结果见表[II](#S4.T2 "Table II ‣ IV-A Experimental Setup ‣ IV Experimental
    Results ‣ Spec2SVA-Eval: Evaluating LLMs for Assertion Generation from Design
    Specification")。对于GPT-3.5，由于缺乏多模态处理能力，无法直接从原始的多模态规范文件生成SVA。'
- en: When utilizing the original GPT-4, the unstructured specification file and signal
    definitions are provided, with prompts designed to guide SVA generation to the
    best of the model’s ability. The generation results indicate that the absence
    of a mechanism to extract structured specifications for each signal significantly
    hampers GPT-4’s ability to compile all useful information for SVA generation,
    resulting in a maximum of only 4 SVAs generated per signal. Additionally, without
    specific assertion type guidance, GPT-4 only generates functional assertions.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 使用原始的GPT-4时，提供了未结构化的规范文件和信号定义，并设计了提示来引导SVA生成，以发挥模型的最大能力。生成结果表明，缺乏提取每个信号的结构化规范的机制显著妨碍了GPT-4编译所有有用信息以生成SVA的能力，导致每个信号最多只能生成4个SVA。此外，缺乏特定断言类型指导，GPT-4仅生成功能断言。
- en: For the SVA quality of commercial solutions, the original GPT-4 model tends
    to produce SVAs with syntax errors, similar to observations made in the previous
    study [[8](#bib.bib8)]. This issue is addressed in AssertLLM through the application
    of RAG techniques, which enrich the model with specific knowledge on SVA and Formal
    Property Verification (FPV). In the evaluation results, GPT-4 failed to generate
    any correct SVAs for IO ports and only succeeded in creating accurate reset check
    assertions for registers, leading to an overall correct proportion of only 8%.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 关于商业解决方案的SVA质量，原始GPT-4模型倾向于生成具有语法错误的SVA，这与之前的研究[[8](#bib.bib8)]中的观察相似。这个问题在AssertLLM中通过应用RAG技术得到解决，RAG技术使模型具备了关于SVA和形式化属性验证（FPV）的特定知识。在评估结果中，GPT-4未能为IO端口生成任何正确的SVA，仅成功创建了对寄存器的准确复位检查断言，导致整体正确比例仅为8%。
- en: V Discussion
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: V 讨论
- en: V-A Coverage in SVA Evaluation
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SVA评估中的V-A覆盖度
- en: Some works [[8](#bib.bib8)] propose to leverage the coverage metric, especially
    the cone-of-influence (COI) coverage to evaluate the quality of generated SVAs.
    COI coverage relies on analyzing the signals exercised during simulation or formal
    verification, which significantly involves internal signals within the design.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 一些研究[[8](#bib.bib8)]建议利用覆盖度指标，特别是影响范围（COI）覆盖度来评估生成的SVA质量。COI覆盖度依赖于分析在仿真或形式验证过程中涉及的信号，这在很大程度上涉及设计内部的信号。
- en: Given that our SVA generation process is based solely on the information available
    in the specification documents, which typically detail external interfaces like
    IO ports and architectural-level registers rather than internal signals, COI coverage
    does not align well with our evaluation criteria. This coverage metric assumes
    a level of design implementation detail that goes beyond the scope of natural
    language specifications, making it less applicable for assessing the completeness
    or effectiveness of SVAs generated at this pre-RTL stage.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于我们的SVA生成过程仅基于规范文档中提供的信息，这些文档通常详细说明外部接口如IO端口和架构级寄存器，而不是内部信号，因此COI覆盖度与我们的评估标准不太一致。该覆盖度指标假设了超出自然语言规范范围的设计实现细节，使其在评估此预RTL阶段生成的SVA的完整性或有效性时不太适用。
- en: V-B Evaluating and Enhancing Specification Quality with AssertLLM
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: V-B 使用AssertLLM评估和提升规范质量
- en: The generation of high-quality SVAs from natural language specifications relies
    not only on the capabilities of LLMs but also on the intrinsic quality of the
    specification documents themselves. A specification that provides only the basic
    information of signals, such as their names and simple descriptions, without delving
    into detailed functionalities or connectivities, inherently limits the potential
    for generating meaningful SVAs, regardless of the power of the LLMs employed.
    Conversely, specifications that offer comprehensive details, including clear definitions
    of signal functionalities and connectivities, can facilitate the generation of
    SVAs even with relatively simple LLMs.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 从自然语言规范中生成高质量的 SVA 不仅依赖于 LLM 的能力，还依赖于规范文档本身的固有质量。一个仅提供信号基本信息的规范，如其名称和简单描述，而不深入详细的功能或连接，固有地限制了生成有意义
    SVA 的潜力，无论使用的 LLM 多么强大。相反，提供全面细节的规范，包括信号功能和连接的清晰定义，可以促进即使使用相对简单的 LLM 也能生成 SVA。
- en: 'Here we identify a novel application for AssertLLM beyond its primary role
    in verification: utilizing AssertLLM as a tool for assessing the quality of natural
    language specifications. This application leverages AssertLLM’s ability to process
    and interpret specification documents to determine their verification-friendliness.
    Specifications that enable AssertLLM to generate a broad and accurate range of
    SVAs can be considered high-quality and well-suited for verification purposes.
    This approach to evaluating specification quality offers several benefits:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们确定了 AssertLLM 的一种新应用，超出了其在验证中的主要角色：将 AssertLLM 作为评估自然语言规范质量的工具。这一应用利用了
    AssertLLM 处理和解释规范文档的能力，以确定其验证友好性。能够使 AssertLLM 生成广泛且准确的 SVA 的规范可以被认为是高质量的，并且适合用于验证目的。这种评估规范质量的方法提供了几个好处：
- en: •
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'Identifying Gaps between Specifications and Verification: AssertLLM can highlight
    contents within a specification that lack sufficient detail for SVA generation,
    guiding architects to provide more comprehensive information.'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 识别规范与验证之间的差距：AssertLLM 可以突出规范中缺乏足够详细内容以生成 SVA 的部分，指导架构师提供更全面的信息。
- en: •
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'Enhancing Verification: Ensuring specifications are verification-friendly can
    potentially reduce the time and effort required for verification.'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增强验证：确保规范具有验证友好性可以潜在地减少验证所需的时间和精力。
- en: •
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'Standardizing Specification Writing: The feedback from AssertLLM can help establish
    best practices for writing specifications to facilitate the automated verification,
    and promote consistency across design stages.'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 规范书写的标准化：AssertLLM 的反馈可以帮助建立编写规范的最佳实践，以促进自动化验证，并在设计阶段推广一致性。
- en: VI Conclusion
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VI 结论
- en: In this study, we introduce AssertLLM, an automated framework designed for generating
    assertions from entire specification documents. AssertLLM breaks down the intricate
    task into three sequential phases, leveraging specialized LLMs for structural
    specification extraction, signal definition mapping, and assertion creation. We
    also offer an open-source benchmark to evaluate the efficacy of assertion generation.
    Evaluating AssertLLM on a comprehensive design with 23 signals revealed that 89%
    of the assertions generated were accurate both syntactically and functionally.
    We also discuss the potential of using AssertLLM to evaluate and enhance the quality
    of specifications.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在这项研究中，我们介绍了 AssertLLM，这是一个旨在从整个规范文档中生成断言的自动化框架。AssertLLM 将复杂任务分解为三个顺序阶段，利用专业的
    LLM 进行结构规范提取、信号定义映射和断言创建。我们还提供了一个开源基准来评估断言生成的有效性。在对一个包含 23 个信号的综合设计进行评估时，我们发现生成的断言中有
    89% 在语法和功能上都是准确的。我们还讨论了使用 AssertLLM 评估和提升规范质量的潜力。
- en: References
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] H. Witharana, Y. Lyu, S. Charles, and P. Mishra, “A survey on assertion-based
    hardware verification,” *ACM Computing Surveys (CSUR)*, vol. 54, no. 11s, pp.
    1–33, 2022.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[1] H. Witharana, Y. Lyu, S. Charles, and P. Mishra, “基于断言的硬件验证综述，” *ACM Computing
    Surveys (CSUR)*, vol. 54, no. 11s, pp. 1–33, 2022.'
- en: '[2] S. Germiniani and G. Pravadelli, “Harm: a hint-based assertion miner,”
    *IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems*,
    vol. 41, no. 11, pp. 4277–4288, 2022.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2] S. Germiniani and G. Pravadelli, “Harm: 基于提示的断言挖掘器，” *IEEE Transactions
    on Computer-Aided Design of Integrated Circuits and Systems*, vol. 41, no. 11,
    pp. 4277–4288, 2022.'
- en: '[3] A. Danese, N. D. Riva, and G. Pravadelli, “A-team: Automatic template-based
    assertion miner,” in *Proceedings of the 54th Annual Design Automation Conference
    2017*, 2017, pp. 1–6.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3] A. Danese, N. D. Riva 和 G. Pravadelli，“A-team：基于模板的自动断言挖掘器”，见于 *第54届年设计自动化会议
    2017 论文集*，2017年，第1–6页。'
- en: '[4] S. Vasudevan, D. Sheridan, S. Patel, D. Tcheng, B. Tuohy, and D. Johnson,
    “Goldmine: Automatic assertion generation using data mining and static analysis,”
    in *2010 Design, Automation & Test in Europe Conference & Exhibition (DATE 2010)*.   IEEE,
    2010, pp. 626–629.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[4] S. Vasudevan, D. Sheridan, S. Patel, D. Tcheng, B. Tuohy 和 D. Johnson，“Goldmine：使用数据挖掘和静态分析自动生成断言”，见于
    *2010 年设计、自动化与测试欧洲会议及展览 (DATE 2010)*。IEEE，2010，第626–629页。'
- en: '[5] M. Orenes-Vera, A. Manocha, D. Wentzlaff, and M. Martonosi, “Autosva: Democratizing
    formal verification of rtl module interactions,” in *2021 58th ACM/IEEE Design
    Automation Conference (DAC)*.   IEEE, 2021, pp. 535–540.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5] M. Orenes-Vera, A. Manocha, D. Wentzlaff 和 M. Martonosi，“Autosva：使 RTL
    模块交互的形式验证民主化”，见于 *2021 第58届 ACM/IEEE 设计自动化会议 (DAC)*。IEEE，2021，第535–540页。'
- en: '[6] W. Fang, G. Hu, and H. Zhang, “r-map: Relating implementation and specification
    in hardware refinement checking,” *IEEE Transactions on Computer-Aided Design
    of Integrated Circuits and Systems*, 2023.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[6] W. Fang, G. Hu 和 H. Zhang，“r-map：在硬件细化检查中关联实现与规范”，*IEEE 集成电路和系统计算机辅助设计交易*，2023年。'
- en: '[7] R. Kande, H. Pearce, B. Tan, B. Dolan-Gavitt, S. Thakur, R. Karri, and
    J. Rajendran, “Llm-assisted generation of hardware assertions,” *arXiv preprint
    arXiv:2306.14027*, 2023.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[7] R. Kande, H. Pearce, B. Tan, B. Dolan-Gavitt, S. Thakur, R. Karri 和 J.
    Rajendran，“LLM辅助的硬件断言生成”，*arXiv 预印本 arXiv:2306.14027*，2023年。'
- en: '[8] M. Orenes-Vera, M. Martonosi, and D. Wentzlaff, “Using llms to facilitate
    formal verification of rtl,” *arXiv e-prints*, pp. arXiv–2309, 2023.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[8] M. Orenes-Vera, M. Martonosi 和 D. Wentzlaff，“使用 LLM 促进 RTL 的形式验证”，*arXiv
    电子预印本*，第 arXiv–2309 页，2023年。'
- en: '[9] C. Sun, C. Hahn, and C. Trippel, “Towards improving verification productivity
    with circuit-aware translation of natural language to systemverilog assertions,”
    in *First International Workshop on Deep Learning-aided Verification (DAV)*, 2023.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[9] C. Sun, C. Hahn 和 C. Trippel，“通过电路感知的自然语言到 SystemVerilog 断言的翻译提升验证生产力”，见于
    *第一次国际深度学习辅助验证研讨会 (DAV)*，2023年。'
- en: '[10] C. B. Harris and I. G. Harris, “Glast: Learning formal grammars to translate
    natural language specifications into hardware assertions,” in *2016 Design, Automation
    & Test in Europe Conference & Exhibition (DATE)*.   IEEE, 2016, pp. 966–971.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[10] C. B. Harris 和 I. G. Harris，“Glast：学习形式语法以将自然语言规范翻译为硬件断言”，见于 *2016 欧洲设计、自动化与测试会议及展览
    (DATE)*。IEEE，2016，第966–971页。'
- en: '[11] R. Krishnamurthy and M. S. Hsiao, “Controlled natural language framework
    for generating assertions from hardware specifications,” in *2019 IEEE 13th International
    Conference on Semantic Computing (ICSC)*.   IEEE, 2019, pp. 367–370.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[11] R. Krishnamurthy 和 M. S. Hsiao，“生成硬件规范断言的受控自然语言框架”，见于 *2019 IEEE 第13届语义计算国际会议
    (ICSC)*。IEEE，2019，第367–370页。'
- en: '[12] J. Zhao and I. G. Harris, “Automatic assertion generation from natural
    language specifications using subtree analysis,” in *2019 Design, Automation &
    Test in Europe Conference & Exhibition (DATE)*.   IEEE, 2019, pp. 598–601.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[12] J. Zhao 和 I. G. Harris，“基于子树分析的自然语言规范自动断言生成”，见于 *2019 欧洲设计、自动化与测试会议及展览
    (DATE)*。IEEE，2019，第598–601页。'
- en: '[13] R. Krishnamurthy and M. S. Hsiao, “Ease: Enabling hardware assertion synthesis
    from english,” in *Rules and Reasoning: Third International Joint Conference,
    RuleML+ RR 2019, Bolzano, Italy, September 16–19, 2019, Proceedings 3*.   Springer,
    2019, pp. 82–96.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[13] R. Krishnamurthy 和 M. S. Hsiao，“Ease：使从英语合成硬件断言成为可能”，见于 *规则与推理：第三届国际联合会议，RuleML+
    RR 2019，意大利博尔扎诺，2019年9月16–19日，论文集3*。Springer，2019，第82–96页。'
- en: '[14] S. J. Frederiksen, J. Aromando, and M. S. Hsiao, “Automated assertion
    generation from natural language specifications,” in *2020 IEEE International
    Test Conference (ITC)*.   IEEE, 2020, pp. 1–5.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[14] S. J. Frederiksen, J. Aromando 和 M. S. Hsiao，“从自然语言规范自动生成断言”，见于 *2020
    IEEE 国际测试会议 (ITC)*。IEEE，2020，第1–5页。'
- en: '[15] O. Keszocze and I. G. Harris, “Chatbot-based assertion generation from
    natural language specifications,” in *2019 Forum for Specification and Design
    Languages (FDL)*.   IEEE, 2019, pp. 1–6.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[15] O. Keszocze 和 I. G. Harris，“基于聊天机器人从自然语言规范生成断言”，见于 *2019 规范与设计语言论坛 (FDL)*。IEEE，2019，第1–6页。'
- en: '[16] G. Parthasarathy, S. Nanda, P. Choudhary, and P. Patil, “Spectosva: Circuit
    specification document to systemverilog assertion translation,” in *2021 Second
    Document Intelligence Workshop at KDD*.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[16] G. Parthasarathy, S. Nanda, P. Choudhary, 和 P. Patil, “Spectosva: 从电路规格文档到
    SystemVerilog 断言的翻译，” 发表在 *2021 第二届 KDD 文档智能研讨会*。'
- en: '[17] F. Aditi and M. S. Hsiao, “Hybrid rule-based and machine learning system
    for assertion generation from natural language specifications,” in *2022 IEEE
    31st Asian Test Symposium (ATS)*.   IEEE, 2022, pp. 126–131.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[17] F. Aditi 和 M. S. Hsiao, “基于规则和机器学习的混合系统，用于从自然语言规范生成断言，” 发表在 *2022 IEEE
    第 31 届亚洲测试研讨会 (ATS)*。 IEEE，2022 年，第 126–131 页。'
- en: '[18] J. Achiam, S. Adler, S. Agarwal, L. Ahmad, I. Akkaya, F. L. Aleman, D. Almeida,
    J. Altenschmidt, S. Altman, S. Anadkat *et al.*, “Gpt-4 technical report,” *arXiv
    preprint arXiv:2303.08774*, 2023.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[18] J. Achiam, S. Adler, S. Agarwal, L. Ahmad, I. Akkaya, F. L. Aleman, D.
    Almeida, J. Altenschmidt, S. Altman, S. Anadkat *等*，“GPT-4 技术报告，” *arXiv 预印本 arXiv:2303.08774*，2023
    年。'
- en: '[19] S. Liu, W. Fang, Y. Lu, Q. Zhang, H. Zhang, and Z. Xie, “Rtlcoder: Outperforming
    gpt-3.5 in design rtl generation with our open-source dataset and lightweight
    solution,” *arXiv preprint arXiv:2312.08617*, 2023.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[19] S. Liu, W. Fang, Y. Lu, Q. Zhang, H. Zhang, 和 Z. Xie, “RTLCoder: 使用我们的开源数据集和轻量解决方案超越
    GPT-3.5 的设计 RTL 生成，” *arXiv 预印本 arXiv:2312.08617*，2023 年。'
- en: '[20] J. Blocklove, S. Garg, R. Karri, and H. Pearce, “Chip-chat: Challenges
    and opportunities in conversational hardware design,” *arXiv preprint arXiv:2305.13243*,
    2023.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[20] J. Blocklove, S. Garg, R. Karri, 和 H. Pearce, “Chip-chat: 对话式硬件设计中的挑战与机遇，”
    *arXiv 预印本 arXiv:2305.13243*，2023 年。'
- en: '[21] Y. Lu, S. Liu, Q. Zhang, and Z. Xie, “Rtllm: An open-source benchmark
    for design rtl generation with large language model,” *arXiv preprint arXiv:2308.05345*,
    2023.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[21] Y. Lu, S. Liu, Q. Zhang, 和 Z. Xie, “RTLLM: 一个用于设计 RTL 生成的开源基准，结合大型语言模型，”
    *arXiv 预印本 arXiv:2308.05345*，2023 年。'
- en: '[22] M. Liu, N. Pinckney, B. Khailany, and H. Ren, “Verilogeval: Evaluating
    large language models for verilog code generation,” *arXiv preprint arXiv:2309.07544*,
    2023.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[22] M. Liu, N. Pinckney, B. Khailany, 和 H. Ren, “Verilogeval: 评估大型语言模型在 Verilog
    代码生成中的应用，” *arXiv 预印本 arXiv:2309.07544*，2023 年。'
- en: '[23] S. Thakur, B. Ahmad, Z. Fan, H. Pearce, B. Tan, R. Karri, B. Dolan-Gavitt,
    and S. Garg, “Benchmarking large language models for automated verilog rtl code
    generation,” in *DATE*, 2023.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[23] S. Thakur, B. Ahmad, Z. Fan, H. Pearce, B. Tan, R. Karri, B. Dolan-Gavitt,
    和 S. Garg, “大型语言模型在自动化 Verilog RTL 代码生成中的基准测试，” 发表在 *DATE*，2023 年。'
- en: '[24] S. Thakur, J. Blocklove, H. Pearce, B. Tan, S. Garg, and R. Karri, “Autochip:
    Automating hdl generation using llm feedback,” *arXiv preprint arXiv:2311.04887*,
    2023.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[24] S. Thakur, J. Blocklove, H. Pearce, B. Tan, S. Garg, 和 R. Karri, “Autochip:
    使用 LLM 反馈自动化 HDL 生成，” *arXiv 预印本 arXiv:2311.04887*，2023 年。'
- en: '[25] M. Nair, R. Sadhukhan, and D. Mukhopadhyay, “Generating secure hardware
    using chatgpt resistant to cwes,” *Cryptology ePrint Archive*, 2023.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[25] M. Nair, R. Sadhukhan, 和 D. Mukhopadhyay, “使用 ChatGPT 生成防范 CWE 的安全硬件，”
    *Cryptology ePrint Archive*，2023 年。'
- en: '[26] M. Liu, T.-D. Ene, R. Kirby, C. Cheng, N. Pinckney, R. Liang, J. Alben,
    H. Anand, S. Banerjee, I. Bayraktaroglu *et al.*, “Chipnemo: Domain-adapted llms
    for chip design,” *arXiv preprint arXiv:2311.00176*, 2023.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[26] M. Liu, T.-D. Ene, R. Kirby, C. Cheng, N. Pinckney, R. Liang, J. Alben,
    H. Anand, S. Banerjee, I. Bayraktaroglu *等*，“Chipnemo: 适应领域的大型语言模型用于芯片设计，” *arXiv
    预印本 arXiv:2311.00176*，2023 年。'
- en: '[27] Y. Tsai, M. Liu, and H. Ren, “Rtlfixer: Automatically fixing rtl syntax
    errors with large language models,” *arXiv preprint arXiv:2311.16543*, 2023.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[27] Y. Tsai, M. Liu, 和 H. Ren, “Rtlfixer: 使用大型语言模型自动修复 RTL 语法错误，” *arXiv 预印本
    arXiv:2311.16543*，2023 年。'
- en: '[28] Z. He, H. Wu, X. Zhang, X. Yao, S. Zheng, H. Zheng, and B. Yu, “Chateda:
    A large language model powered autonomous agent for eda,” in *MLCAD Workshop*,
    2023.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[28] Z. He, H. Wu, X. Zhang, X. Yao, S. Zheng, H. Zheng, 和 B. Yu, “Chateda:
    一个大型语言模型驱动的自动化 EDA 代理，” 发表在 *MLCAD 研讨会*，2023 年。'
- en: '[29] Y. Fu, Y. Zhang, Z. Yu, S. Li, Z. Ye, C. Li, C. Wan, and Y. Lin, “Gpt4aigchip:
    Towards next-generation ai accelerator design automation via large language models,”
    *arXiv preprint arXiv:2309.10730*, 2023.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[29] Y. Fu, Y. Zhang, Z. Yu, S. Li, Z. Ye, C. Li, C. Wan, 和 Y. Lin, “GPT4AIGChip:
    通过大型语言模型推进下一代 AI 加速器设计自动化，” *arXiv 预印本 arXiv:2309.10730*，2023 年。'
- en: '[30] Z. Yan, Y. Qin, X. S. Hu, and Y. Shi, “On the viability of using llms
    for sw/hw co-design: An example in designing cim dnn accelerators,” *arXiv preprint
    arXiv:2306.06923*, 2023.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[30] Z. Yan, Y. Qin, X. S. Hu, 和 Y. Shi, “使用 LLM 进行软件/硬件协同设计的可行性：以设计 CIM DNN
    加速器为例，” *arXiv 预印本 arXiv:2306.06923*，2023 年。'
- en: '[31] B. Ahmad, S. Thakur, B. Tan, R. Karri, and H. Pearce, “Fixing hardware
    security bugs with large language models,” *arXiv preprint arXiv:2302.01215*,
    2023.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[31] B. Ahmad, S. Thakur, B. Tan, R. Karri, 和 H. Pearce, “使用大型语言模型修复硬件安全漏洞，”
    *arXiv 预印本 arXiv:2302.01215*，2023 年。'
- en: '[32] M. Li, W. Fang, Q. Zhang, and Z. Xie, “Specllm: Exploring generation and
    review of vlsi design specification with large language model,” *arXiv preprint
    arXiv:2401.13266*, 2024.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[32] M. Li, W. Fang, Q. Zhang, 和 Z. Xie, “Specllm: Exploring generation and
    review of vlsi design specification with large language model，” *arXiv预印本 arXiv:2401.13266*，2024年。'
- en: '[33] E. Seligman, T. Schubert, and M. A. K. Kumar, *Formal verification: an
    essential toolkit for modern VLSI design*.   Elsevier, 2023.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[33] E. Seligman, T. Schubert, 和 M. A. K. Kumar, *Formal verification: an essential
    toolkit for modern VLSI design*。爱思唯尔出版社，2023年。'
- en: '[34] A. B. Mehta, *SystemVerilog Assertions and Functional Coverage*.   Springer,
    2020.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[34] A. B. Mehta, *SystemVerilog Assertions and Functional Coverage*。春天出版社，2020年。'
- en: '[35] S. Vijayaraghavan and M. Ramanathan, *A practical guide for SystemVerilog
    assertions*.   Springer Science & Business Media, 2005.'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[35] S. Vijayaraghavan 和 M. Ramanathan, *A practical guide for SystemVerilog
    assertions*。春天科学与商业媒体，2005年。'
