- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2025-01-11 12:04:06'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2025-01-11 12:04:06
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Agents4PLC: Automating Closed-loop PLC Code Generation and Verification in
    Industrial Control Systems using LLM-based Agents'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Agents4PLC：基于LLM的代理在工业控制系统中实现闭环PLC代码生成与验证
- en: 来源：[https://arxiv.org/html/2410.14209/](https://arxiv.org/html/2410.14209/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://arxiv.org/html/2410.14209/](https://arxiv.org/html/2410.14209/)
- en: 'Zihan Liu Zhejiang University zihanliu@zju.edu.cn    Ruinan Zeng Zhejiang University
    zengruinan@zju.edu.cn    Dongxia Wang^(🖂) Co-first authors: Zihan Liu and Ruinan
    Zeng; Corresponding authors: Dongxia Wang and Wenhai Wang Zhejiang University
    dxwang@zju.edu.cn    Gengyun Peng Zhejiang University pgengyun@zju.edu.cn    Jingyi
    Wang Zhejiang University wangjyee@zju.edu.cn    Qiang Liu Zhejiang University
    22460396@zju.edu.cn    Peiyu Liu Zhejiang University liupeiyu@zju.edu.cn    Wenhai
    Wang^(🖂) UWin Tech & Zhejiang University zdzzlab@zju.edu.cn'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 刘子涵 浙江大学 zihanliu@zju.edu.cn    曾瑞楠 浙江大学 zengruinan@zju.edu.cn    王东霞^(🖂) 共同第一作者：刘子涵和曾瑞楠；通讯作者：王东霞和王文海
    浙江大学 dxwang@zju.edu.cn    彭耿云 浙江大学 pgengyun@zju.edu.cn    王晶怡 浙江大学 wangjyee@zju.edu.cn
       刘强 浙江大学 22460396@zju.edu.cn    刘培宇 浙江大学 liupeiyu@zju.edu.cn    王文海^(🖂) UWin
    Tech & 浙江大学 zdzzlab@zju.edu.cn
- en: Abstract
  id: totrans-7
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 摘要
- en: In industrial control systems, the generation and verification of Programmable
    Logic Controller (PLC) code are critical for ensuring operational efficiency and
    safety. While Large Language Models (LLMs) have made strides in automated code
    generation, they often fall short in providing correctness guarantees and specialized
    support for PLC programming. To address these challenges, this paper introduces
    Agents4PLC, a novel framework that not only automates PLC code generation but
    also includes code-level verification through an LLM-based multi-agent system.
    We first establish a comprehensive benchmark for *verifiable PLC code generation*
    area, transitioning from natural language requirements to human-written-verified
    formal specifications and reference PLC code. We further enhance our ‘agents’
    specifically for industrial control systems by incorporating Retrieval-Augmented
    Generation (RAG), advanced prompt engineering techniques, and Chain-of-Thought
    strategies. Evaluation against the benchmark demonstrates that Agents4PLC significantly
    outperforms previous methods, achieving superior results across a series of increasingly
    rigorous metrics. This research not only addresses the critical challenges in
    PLC programming but also highlights the potential of our framework to generate
    verifiable code applicable to real-world industrial applications.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在工业控制系统中，**可编程逻辑控制器（PLC）代码的生成和验证**对于确保操作效率和安全性至关重要。尽管大语言模型（LLM）在自动化代码生成方面取得了进展，但它们通常无法提供正确性保证，也缺乏对PLC编程的专门支持。为了解决这些问题，本文介绍了Agents4PLC，一个新颖的框架，不仅实现了PLC代码生成的自动化，还通过基于LLM的多代理系统进行代码级验证。我们首先建立了一个全面的基准，涵盖*可验证PLC代码生成*领域，涵盖从自然语言需求到人工编写和验证的正式规范及参考PLC代码的过渡。我们进一步通过结合检索增强生成（RAG）、先进的提示工程技术和思维链策略，专门为工业控制系统增强了我们的“代理”。与基准的对比评估表明，Agents4PLC在多个逐步严格的指标上显著超越了以往的方法，取得了优越的结果。这项研究不仅解决了PLC编程中的关键挑战，还凸显了我们的框架在生成适用于实际工业应用的可验证代码方面的潜力。
- en: 'Index Terms:'
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 关键词：
- en: Code Generation, Code Validation, PLC Code, LLM-based Agents, Multi Agents,
    Industrial Control System
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 代码生成，代码验证，PLC代码，基于LLM的代理，多代理，工业控制系统
- en: I Introduction
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引言
- en: Programmable Logic Controllers (PLCs) are essential components of Industrial
    Control Systems (ICSs), playing a crucial role in industrial automation and management
    of key industrial processes. The global PLC market is projected to reach USD 12.20
    billion by 2024, with a compound annual growth rate (CAGR) of 4.37% from 2024
    to 2029 [[36](https://arxiv.org/html/2410.14209v2#bib.bib36), [48](https://arxiv.org/html/2410.14209v2#bib.bib48)].
    This growth is largely driven by the increasing reliance on industrial control
    programming languages based on IEC 61131-3 standard [[20](https://arxiv.org/html/2410.14209v2#bib.bib20)],
    such as Structured Text (ST) and Function Block Diagram (FBD), to oversee and
    regulate critical infrastructure systems across key sectors like energy [[51](https://arxiv.org/html/2410.14209v2#bib.bib51)],
    manufacturing [[43](https://arxiv.org/html/2410.14209v2#bib.bib43)], and transportation
    [[24](https://arxiv.org/html/2410.14209v2#bib.bib24)]. Among others, ST language,
    as a text-based language, is most similar to other popular high-level languages
    (in terms of syntax and program structure) and is thus suitable for code generation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 可编程逻辑控制器（PLCs）是工业控制系统（ICSs）中的关键组成部分，在工业自动化和关键工业过程的管理中发挥着至关重要的作用。全球PLC市场预计到2024年将达到122亿美元，并且从2024年到2029年，年复合增长率（CAGR）为4.37%[[36](https://arxiv.org/html/2410.14209v2#bib.bib36),
    [48](https://arxiv.org/html/2410.14209v2#bib.bib48)]。这一增长主要受到对基于IEC 61131-3标准的工业控制编程语言的日益依赖的推动[[20](https://arxiv.org/html/2410.14209v2#bib.bib20)]，如结构化文本（ST）和功能块图（FBD），这些语言用于监督和调节能源[[51](https://arxiv.org/html/2410.14209v2#bib.bib51)]、制造业[[43](https://arxiv.org/html/2410.14209v2#bib.bib43)]和交通运输[[24](https://arxiv.org/html/2410.14209v2#bib.bib24)]等关键领域的基础设施系统。作为一种基于文本的语言，ST语言在语法和程序结构上与其他流行的高级语言最为相似，因此适用于代码生成。
- en: In ICSs, automatic generation of control code can greatly reduce repetitive
    tasks, significantly enhancing engineers’ productivity. With the rapid advancement
    of large language models (LLMs), automatic code generation has gained much attention
    across various programming languages (e.g., C [[55](https://arxiv.org/html/2410.14209v2#bib.bib55)],
    C++ [[10](https://arxiv.org/html/2410.14209v2#bib.bib10)], Python [[56](https://arxiv.org/html/2410.14209v2#bib.bib56)],
    Java [[11](https://arxiv.org/html/2410.14209v2#bib.bib11)], etc) due to its potential
    to automate software development and reduce costs. It is thus desirable to explore
    LLM-based automated code generation methods for industrial control code development.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在工业控制系统中，自动生成控制代码可以大大减少重复性任务，显著提高工程师的生产力。随着大型语言模型（LLMs）的快速发展，自动化代码生成在各种编程语言（如C[[55](https://arxiv.org/html/2410.14209v2#bib.bib55)]、C++[[10](https://arxiv.org/html/2410.14209v2#bib.bib10)]、Python[[56](https://arxiv.org/html/2410.14209v2#bib.bib56)]、Java[[11](https://arxiv.org/html/2410.14209v2#bib.bib11)]等）中受到了广泛关注，因为它具有自动化软件开发并降低成本的潜力。因此，探索基于LLM的工业控制代码自动生成方法是非常值得研究的。
- en: Emerging LLMs for code generation (a.k.a. code LLMs), such as Openai Codex [[9](https://arxiv.org/html/2410.14209v2#bib.bib9)],
    AlphaCode [[33](https://arxiv.org/html/2410.14209v2#bib.bib33)], CodeLlama [[42](https://arxiv.org/html/2410.14209v2#bib.bib42)],
    may not be ideal for PLC code generation due to the following critical reasons.
    Firstly, these code LLMs may excel at generating code in mainstream high-level
    languages such as C or Python, but mostly perform poorly for industrial control
    code. Indeed, it is notoriously challenging to collect sufficient data for fine-tuning
    a specialized model for industrial code due to the proprietary and specialized
    nature of PLC code. Secondly, as the control code is used to manage the operation
    of industrial sectors, it is of vital importance to guarantee their functional
    correctness, which is far more challenging than generating executable code. There
    exist some efforts towards achieving specialized PLC code generation, such as
    LLM4PLC [[14](https://arxiv.org/html/2410.14209v2#bib.bib14)] and the work of
    Koziolek [[27](https://arxiv.org/html/2410.14209v2#bib.bib27)] either by finetuning
    or Retrieval-Augmented Generation (RAG) enhancements. LLM4PLC [[14](https://arxiv.org/html/2410.14209v2#bib.bib14)]
    also incorporates workflows for syntax and functional verification at the design-level
    beyond code generation to improve the code quality. However, *the correctness
    of specifications is only verified at the design level while the correctness of
    the LLM-generated code remains questionable.* Moreover, their model-centred architecture
    lacks agility in integrating the whole development pipeline to achieve full automation.
    On the other hand, there is a growing trend in automated LLM-based development
    workflows aimed to further refine or validate code generated by LLMs using a multi-agent
    system architecture. For instance, ChatDev [[39](https://arxiv.org/html/2410.14209v2#bib.bib39)]
    and MapCoder [[22](https://arxiv.org/html/2410.14209v2#bib.bib22)] implement software
    development systems composed of multiple intelligent agents, each with distinct
    roles and tasks, with the goal of generating high-quality code in a closed-loop
    manner. Notably, such an agent-based framework is flexible to implement multiple
    relevant software engineering tasks like validation and debugging, which are crucial
    in improving the quality of generated code.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 新兴的代码生成大型语言模型（简称代码LLMs），例如Openai Codex [[9](https://arxiv.org/html/2410.14209v2#bib.bib9)]、AlphaCode
    [[33](https://arxiv.org/html/2410.14209v2#bib.bib33)]、CodeLlama [[42](https://arxiv.org/html/2410.14209v2#bib.bib42)]，由于以下几个关键原因，可能并不适合PLC代码生成。首先，这些代码LLM可能在生成主流高级语言（如C或Python）的代码方面表现出色，但在生成工业控制代码时往往表现不佳。实际上，由于PLC代码的专有性和专业性，收集足够的数据来对工业代码进行微调，向来是一个极具挑战性的任务。其次，由于控制代码用于管理工业部门的运行，因此必须确保其功能的正确性，而这比生成可执行代码更具挑战性。一些努力已经在朝着专门的PLC代码生成方向进行，例如LLM4PLC
    [[14](https://arxiv.org/html/2410.14209v2#bib.bib14)]和Koziolek的工作 [[27](https://arxiv.org/html/2410.14209v2#bib.bib27)]，通过微调或检索增强生成（RAG）等方式。LLM4PLC
    [[14](https://arxiv.org/html/2410.14209v2#bib.bib14)] 还整合了设计阶段的语法和功能验证工作流，以提高代码质量。然而，*规范的正确性仅在设计阶段得到验证，而LLM生成代码的正确性仍然值得怀疑*。此外，它们的模型中心架构缺乏在集成整个开发流程以实现完全自动化方面的灵活性。另一方面，基于自动化LLM的开发工作流逐渐成为趋势，旨在通过多代理系统架构进一步细化或验证LLM生成的代码。例如，ChatDev
    [[39](https://arxiv.org/html/2410.14209v2#bib.bib39)]和MapCoder [[22](https://arxiv.org/html/2410.14209v2#bib.bib22)]
    实现了由多个智能代理组成的软件开发系统，每个代理具有不同的角色和任务，目的是以闭环方式生成高质量的代码。值得注意的是，这种基于代理的框架灵活，可以执行多个相关的软件工程任务，如验证和调试，这些任务对于提高生成代码的质量至关重要。
- en: In this work, we present a novel LLM-based multi-agent framework designed to
    address the limitations of current PLC code generation solutions, namely Agents4PLC.
    Our system comprises multiple agents, each tailored to specific tasks such as
    PLC code generation, syntax validation, functional verification and debugging
    (in case of failures). Such a closed-loop workflow allows Agents4PLC to effectively
    coordinate different agents to automatically generate high-quality code (verifiable
    correct in the ideal case). Note that different from LLM4PLC which only verified
    the correctness of the specification, we directly verify the correctness of the
    generated code. Meanwhile, by leveraging advanced multi-agent architectures like
    LangGraph and MetaGPT, Agents4PLC is highly adaptable to a wide range of PLC code
    generation tasks and incorporate different base code LLMs.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本研究中，我们提出了一种新颖的基于LLM的多代理框架，旨在解决当前PLC代码生成解决方案的局限性，即Agents4PLC。我们的系统由多个代理组成，每个代理针对特定任务（如PLC代码生成、语法验证、功能验证和调试（在失败情况下））进行定制。这样的闭环工作流使得Agents4PLC能够有效协调不同的代理，自动生成高质量代码（在理想情况下是可验证正确的）。需要注意的是，与只验证规格正确性的LLM4PLC不同，我们直接验证生成代码的正确性。同时，借助LangGraph和MetaGPT等先进的多代理架构，Agents4PLC具有很高的适应性，能够处理各种PLC代码生成任务，并融合不同的基础代码LLM。
- en: •
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: We establish a comprehensive benchmark that transitions from natural language
    requirements to formal specifications, utilizing verified reference code with
    human-checked labels, to facilitate future research in the field of PLC code generation.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们建立了一个全面的基准，从自然语言需求到形式化规范过渡，利用经过验证的参考代码和人工检查的标签，为PLC代码生成领域的未来研究提供便利。
- en: •
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: We introduce Agents4PLC, the first LLM-based multi-agent system for fully automatic
    PLC code generation that surpasses purely LLM-based approaches (e.g., LLM4PLC
    [[14](https://arxiv.org/html/2410.14209v2#bib.bib14)]) by emphasizing code-level
    over design-level verification, and flexibility to incorporate various base code
    generation models (in both black-box and white-box settings) and supporting an
    array of tools for compilation, testing, verification and debugging.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们介绍了Agents4PLC，这是第一个基于大语言模型（LLM）的多代理系统，用于完全自动化的PLC代码生成，超越了纯粹基于LLM的方法（例如LLM4PLC
    [[14](https://arxiv.org/html/2410.14209v2#bib.bib14)]），其特点是在代码级别进行验证而非设计级别验证，并且具备灵活性，能够结合各种基础代码生成模型（包括黑箱和白箱设置），同时支持一系列用于编译、测试、验证和调试的工具。
- en: •
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: We enhance our agents specifically for PLC code generation by implementing techniques
    such as Retrieval-Augmented Generation (RAG), advanced prompt engineering, and
    Chain-of-Thought methodologies, improving their adaptability and effectiveness
    in generating reliable PLC code.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们通过实施检索增强生成（RAG）、先进的提示工程和思维链方法等技术，专门增强了我们用于PLC代码生成的代理，提升了它们在生成可靠PLC代码方面的适应性和有效性。
- en: •
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: We rigorously evaluate Agents4PLC against the largest benchmark available, demonstrating
    superior performance across a series of increasingly stringent metrics. We also
    deploy and validate our generated code on multiple practical scenarios, highlighting
    its potential for generating verifiable PLC code that meets the demands of practical
    industrial control systems.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们通过对Agents4PLC进行严格评估，并在可用的最大基准测试上展示其卓越的性能，涵盖一系列日益严格的指标。同时，我们还在多个实际场景中部署并验证了生成的代码，突出了其生成可验证PLC代码的潜力，满足实际工业控制系统的需求。
- en: II Background
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: II 背景
- en: II-A PLC Programming Language
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: II-A PLC编程语言
- en: 'PLCs are computer systems specifically designed for industrial automation control,
    enabling real-time monitoring and control of mechanical equipment and production
    processes. PLCs are widely utilized in manufacturing, transportation, energy,
    and other sectors due to their high reliability, ease of programming, and scalability.
    The IEC 61131-3 standard [[20](https://arxiv.org/html/2410.14209v2#bib.bib20)]
    specifies five standard programming languages for PLCs, which include three graphical
    languages: Ladder Diagram (LAD), Function Block Diagram (FBD), and Sequential
    Function Chart (SFC), as well as two textual languages: Structured Text (ST) and
    Instruction List (IL). The structured text (ST) language, similar in syntax and
    structure to traditional programming languages such as C and Pascal, offers significant
    flexibility and readability. It supports common programming structures, including
    loops and conditional statements, making it widely used in scenarios that require
    complex mathematical calculations, data processing, and advanced control algorithms.
    With the development of Industry 4.0 and intelligent manufacturing, the prospects
    for ST language are extremely promising, as it can complement other programming
    languages to enhance the flexibility and efficiency of PLC systems.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: PLC（可编程逻辑控制器）是专门为工业自动化控制设计的计算机系统，可以实现对机械设备和生产过程的实时监控与控制。由于其高可靠性、易编程性和可扩展性，PLC被广泛应用于制造业、交通、能源等行业。IEC
    61131-3标准[[20](https://arxiv.org/html/2410.14209v2#bib.bib20)]定义了五种PLC标准编程语言，其中包括三种图形化语言：梯形图（LAD）、功能块图（FBD）和顺序功能图（SFC），以及两种文本语言：结构化文本（ST）和指令列表（IL）。结构化文本（ST）语言与传统编程语言如C和Pascal的语法结构相似，具有较大的灵活性和可读性。它支持常见的编程结构，包括循环和条件语句，使其在需要复杂数学计算、数据处理和高级控制算法的场景中被广泛应用。随着工业4.0和智能制造的发展，ST语言的前景极为广阔，因为它可以与其他编程语言互补，增强PLC系统的灵活性和效率。
- en: II-B Syntax Checking and Functional Verification
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: II-B 语法检查与功能验证
- en: Code generated by LLMs often exhibits considerable uncertainty and may sometimes
    fail to compile or meet specified requirements [[45](https://arxiv.org/html/2410.14209v2#bib.bib45)].
    Syntax checking ensures that the generated ST code is executable, while functional
    verification ensures that the code realizes the expected functionality and avoids
    potential logic flaws or vulnerabilities [[15](https://arxiv.org/html/2410.14209v2#bib.bib15)].
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: LLM生成的代码通常会表现出相当大的不确定性，有时可能无法编译或无法满足指定的要求[[45](https://arxiv.org/html/2410.14209v2#bib.bib45)]。语法检查确保生成的ST代码可执行，而功能验证则确保代码实现了预期的功能，并避免潜在的逻辑缺陷或漏洞[[15](https://arxiv.org/html/2410.14209v2#bib.bib15)]。
- en: II-B1 Syntax Checking
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: II-B1 语法检查
- en: A piece of code first needs to conform to the standards of a programming language
    before it can be compiled into an executable program. Many PLC Integrated Development
    Environments (IDEs), such as CODESYS and TwinCAT, can perform syntax checking
    for ST code. These IDEs conform to the IEC 61131-3 standard and provide functionalities
    such as programming, debugging, and simulation. However, due to the limitations
    of their platforms, these IDEs are not convenient for direct integration into
    automated code generation pipelines. Some command-line tools can also perform
    syntax checking and compilation of ST code. MATIEC [[2](https://arxiv.org/html/2410.14209v2#bib.bib2)]
    is an open-source compiler capable of refactoring or compiling ST code into C
    language, widely used in the design and maintenance of industrial automation systems.
    RuSTy [[6](https://arxiv.org/html/2410.14209v2#bib.bib6)] is an open-source project
    based on LLVM and Rust, aimed at creating a fast, modern, and open-source industry-grade
    ST compiler for a wide range of platforms, providing comprehensive compilation
    feedback.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一段代码首先需要符合编程语言的标准，才能被编译成可执行的程序。许多PLC集成开发环境（IDEs），如CODESYS和TwinCAT，可以对ST代码进行语法检查。这些IDE遵循IEC
    61131-3标准，并提供编程、调试和仿真等功能。然而，由于平台的局限性，这些IDE并不方便直接集成到自动化代码生成流程中。一些命令行工具也可以对ST代码进行语法检查和编译。MATIEC[[2](https://arxiv.org/html/2410.14209v2#bib.bib2)]是一个开源编译器，能够将ST代码重构或编译成C语言，在工业自动化系统的设计与维护中得到广泛应用。RuSTy[[6](https://arxiv.org/html/2410.14209v2#bib.bib6)]是一个基于LLVM和Rust的开源项目，旨在为各种平台创建一个快速、现代化且开源的行业级ST编译器，提供全面的编译反馈。
- en: II-B2 Functional Verification
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: II-B2 功能验证
- en: Functional verification is crucial for PLC code, ensuring that the generated
    ST code can accurately and reliably implement the intended control logic and operations
    in real-world applications, thereby preventing equipment failures or production
    interruptions due to logical errors or unforeseen circumstances. There exist some
    formal verification tools such as nuXmv [[8](https://arxiv.org/html/2410.14209v2#bib.bib8)]
    and PLCverif [[12](https://arxiv.org/html/2410.14209v2#bib.bib12)] for functional
    validation of ST code, which are serving as the backend verifier of our validation
    agent.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 功能验证对PLC代码至关重要，确保生成的ST代码能够准确、可靠地实现预期的控制逻辑和操作，从而避免因逻辑错误或不可预见的情况导致的设备故障或生产中断。存在一些形式化验证工具，如nuXmv
    [[8](https://arxiv.org/html/2410.14209v2#bib.bib8)]和PLCverif [[12](https://arxiv.org/html/2410.14209v2#bib.bib12)]，用于ST代码的功能验证，这些工具正在作为我们验证智能体的后台验证工具。
- en: II-C LLM-based Agents
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: II-C 基于LLM的智能体
- en: The rapid advancement of LLMs has elevated traditional AI agents, which relied
    on reinforcement learning and symbolic logic [[53](https://arxiv.org/html/2410.14209v2#bib.bib53),
    [41](https://arxiv.org/html/2410.14209v2#bib.bib41), [23](https://arxiv.org/html/2410.14209v2#bib.bib23),
    [35](https://arxiv.org/html/2410.14209v2#bib.bib35), [21](https://arxiv.org/html/2410.14209v2#bib.bib21),
    [34](https://arxiv.org/html/2410.14209v2#bib.bib34)], to a new level, i.e., LLM-based
    agents. With the assistance of LLMs, these agents have a strong ability to understand
    language, generate content, and utilize external knowledge and tools. They can
    perform complex tasks and make decisions through collaboration among agents and
    interaction with their environments.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: LLM的快速发展提升了传统的AI智能体，这些智能体依赖于强化学习和符号逻辑[[53](https://arxiv.org/html/2410.14209v2#bib.bib53),
    [41](https://arxiv.org/html/2410.14209v2#bib.bib41), [23](https://arxiv.org/html/2410.14209v2#bib.bib23),
    [35](https://arxiv.org/html/2410.14209v2#bib.bib35), [21](https://arxiv.org/html/2410.14209v2#bib.bib21),
    [34](https://arxiv.org/html/2410.14209v2#bib.bib34)]，达到了一个新水平，即基于LLM的智能体。在LLM的帮助下，这些智能体具有强大的语言理解能力、内容生成能力以及利用外部知识和工具的能力。它们能够执行复杂的任务，并通过智能体之间的协作以及与环境的互动做出决策。
- en: '![Refer to caption](img/a7ade43b9c0e7e3299110c8e9ab3920e.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![参考标题](img/a7ade43b9c0e7e3299110c8e9ab3920e.png)'
- en: 'Figure 1: Basic portrait of LLM-based agents'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：基于LLM的智能体基本框架
- en: 'There exist various definitions of what comprises an LLM-based agent, and we
    present some common components here. Typically, an LLM-based agent consists of
    five key components: LLM, observation, memory, thought and action [[17](https://arxiv.org/html/2410.14209v2#bib.bib17)].
    Figure [1](https://arxiv.org/html/2410.14209v2#S2.F1 "Figure 1 ‣ II-C LLM-based
    Agents ‣ II Background ‣ Agents4PLC: Automating Closed-loop PLC Code Generation
    and Verification in Industrial Control Systems using LLM-based Agents") presents
    its basic framework¹¹1More details about different definitions and the components
    can be found in[[17](https://arxiv.org/html/2410.14209v2#bib.bib17), [57](https://arxiv.org/html/2410.14209v2#bib.bib57),
    [50](https://arxiv.org/html/2410.14209v2#bib.bib50)]. Each component can be analogized
    to human cognition for better understanding. LLMs serve as part of an agent’s
    “brain”, enabling it to comprehend information, learn from interactions, make
    decisions, and perform actions. It perceives the environment with the observation
    component, e.g., receiving multimodal information from the others. It uses memory
    component to store past interactions and observations. It retrieves and analyzes
    information with thought component, to infer the next action. And it execute actions
    using the LLMs or some external tools.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 关于什么构成基于LLM的智能体，存在多种定义，我们在这里介绍一些常见的组成部分。通常，一个基于LLM的智能体由五个关键组件构成：LLM、观察、记忆、思维和行动[[17](https://arxiv.org/html/2410.14209v2#bib.bib17)]。图[1](https://arxiv.org/html/2410.14209v2#S2.F1
    "图1 ‣ II-C 基于LLM的智能体 ‣ II 背景 ‣ Agents4PLC：利用基于LLM的智能体自动化闭环PLC代码生成与验证")展示了其基本框架¹¹1有关不同定义和组件的更多细节，可以参考[[17](https://arxiv.org/html/2410.14209v2#bib.bib17),
    [57](https://arxiv.org/html/2410.14209v2#bib.bib57), [50](https://arxiv.org/html/2410.14209v2#bib.bib50)]。每个组件可以类比为人类认知，以便更好地理解。LLM作为智能体“大脑”的一部分，使其能够理解信息、从互动中学习、做出决策并执行行动。智能体通过观察组件感知环境，例如，接收来自他人的多模态信息。它利用记忆组件存储过去的互动和观察。它通过思维组件检索和分析信息，推测下一步行动。然后，它使用LLM或一些外部工具执行行动。
- en: There are mainstream agent frameworks that can support the development of LLM-based
    multi-agent workflows, such as MetaGPT [[17](https://arxiv.org/html/2410.14209v2#bib.bib17)],
    LangGraph [[5](https://arxiv.org/html/2410.14209v2#bib.bib5)], and AutoGen [[52](https://arxiv.org/html/2410.14209v2#bib.bib52)].
    These frameworks provide libraries that enable developers to create and manage
    multiple agents seamlessly. They facilitate the integration of large language
    models into complex workflows, allowing for efficient communication and collaboration
    among agents. Additionally, these frameworks often come with features like natural
    language processing capabilities, task orchestration, and easy scalability, making
    them ideal choices for building sophisticated multi-agent systems.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些主流的代理框架可以支持基于大语言模型的多代理工作流开发，例如 MetaGPT [[17](https://arxiv.org/html/2410.14209v2#bib.bib17)]、LangGraph
    [[5](https://arxiv.org/html/2410.14209v2#bib.bib5)] 和 AutoGen [[52](https://arxiv.org/html/2410.14209v2#bib.bib52)]。这些框架提供的库使开发者能够无缝创建和管理多个代理。它们促进了大语言模型与复杂工作流的集成，允许代理之间高效地进行沟通与协作。此外，这些框架通常还具备自然语言处理能力、任务编排和易于扩展的特点，使其成为构建复杂多代理系统的理想选择。
- en: II-D Agent-based Software Development
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: II-D 基于代理的软件开发
- en: Agent-based software development is an emerging field that integrates autonomous
    and communicative agents to enhance various aspects of the software development
    life cycle. Recent advancements in this field such as ChatDev[[39](https://arxiv.org/html/2410.14209v2#bib.bib39)],
    MetaGPT[[17](https://arxiv.org/html/2410.14209v2#bib.bib17)] and CodeAgent[[47](https://arxiv.org/html/2410.14209v2#bib.bib47)],
    showcase the potential of integrating AI-driven agents to enhance collaborative
    software development frameworks, automate code review processes, and support contextual
    conversation within software development environments. These studies indicate
    a shift towards more interactive and intelligent software development tools that
    can adapt to the dynamic nature of development projects, providing developers
    with context-aware assistance and streamlining tasks through autonomous agents.
    The integration of advanced human processes within multi-agent systems emphasizes
    the potential of agent-based software development to revolutionize traditional
    software engineering practices.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 基于代理的软件开发是一个新兴领域，结合了自主和通信代理，以增强软件开发生命周期的各个方面。该领域的最新进展，如 ChatDev[[39](https://arxiv.org/html/2410.14209v2#bib.bib39)]、MetaGPT[[17](https://arxiv.org/html/2410.14209v2#bib.bib17)]
    和 CodeAgent[[47](https://arxiv.org/html/2410.14209v2#bib.bib47)]，展示了将 AI 驱动的代理集成到协作软件开发框架中，以增强代码审查过程的自动化，并支持软件开发环境中的上下文对话。这些研究表明，软件开发工具正在向更加互动和智能化的方向发展，能够适应开发项目的动态性质，向开发者提供上下文感知的帮助，并通过自主代理简化任务。将先进的人类流程融入多代理系统中，突显了基于代理的软件开发在革命性改造传统软件工程实践中的潜力。
- en: III Agents4PLC Methodology
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: III Agents4PLC 方法论
- en: 'We propose Agents4PLC, an LLM-based multi-agent framework for automating the
    generation and verification process of ST code. The framework includes a set of
    agents with our defined roles and division of work, which automatically cooperate
    based on our defined workflow for the generation of reliable ST code. The whole
    framework is presented in Figure [2](https://arxiv.org/html/2410.14209v2#S3.F2
    "Figure 2 ‣ III Agents4PLC Methodology ‣ Agents4PLC: Automating Closed-loop PLC
    Code Generation and Verification in Industrial Control Systems using LLM-based
    Agents"). Below we present the detailed design of Agents4PLC.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提出了 Agents4PLC，一个基于大语言模型的多代理框架，用于自动化 ST 代码的生成和验证过程。该框架包含一组具有我们定义的角色和工作分工的代理，基于我们定义的工作流自动协作，以生成可靠的
    ST 代码。整个框架在图[2](https://arxiv.org/html/2410.14209v2#S3.F2 "图 2 ‣ III Agents4PLC
    方法论 ‣ Agents4PLC：基于大语言模型的代理在工业控制系统中自动化闭环 PLC 代码生成与验证")中展示。以下是 Agents4PLC 的详细设计。
- en: '![Refer to caption](img/d5a23a776090aa73822938851e68206e.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/d5a23a776090aa73822938851e68206e.png)'
- en: 'Figure 2: Overview of Agents4PLC.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2：Agents4PLC 概述。
- en: '![Refer to caption](img/b505feb4c5c4755efd89728cc05a8d26.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明](img/b505feb4c5c4755efd89728cc05a8d26.png)'
- en: 'Figure 3: An example of generating LED Control ST code with Agents4PLC.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3：使用 Agents4PLC 生成 LED 控制 ST 代码的示例。
- en: III-A Agents4PLC Framework
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: III-A Agents4PLC 框架
- en: 'As shown in Fig. [3](https://arxiv.org/html/2410.14209v2#S3.F3 "Figure 3 ‣
    III Agents4PLC Methodology ‣ Agents4PLC: Automating Closed-loop PLC Code Generation
    and Verification in Industrial Control Systems using LLM-based Agents"), Agents4PLC
    takes an user input of ST coding requirement, e.g., to control an LED, and outputs
    the formally verified ST code. In this process, multiple agents with different
    roles cooperate to complete this task based on our carefully designed workflow.
    First, the retrieval agent analyzes the user input, based on which it retrieves
    the relevant information about ST codes, such as books and documents. Then it
    sends the retrieved information alongside with the user input (task instructions)
    to the planning agent, which is responsible to generate and rank the actionable
    plans for code generation, subsequently sent to the Coding Agent. The Coding Agent
    generates ST code accordingly to the received plans, and later a compiler checks
    whether there are syntax errors. If no error occurs, the validation agent (the
    verifier) will verify the functional correctness of the generated code. Otherwise,
    the error information will be delivered to the debugging agent who will return
    the fixing advice to the Coding Agent. If validation succeeds, the generation
    process is considered completed. Otherwise, the above workflow will iterate until
    it exceeds a predefined loop threshold, where the planning agent provides another
    plan for code generation.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如图 [3](https://arxiv.org/html/2410.14209v2#S3.F3 "图 3 ‣ III Agents4PLC 方法 ‣
    Agents4PLC：利用基于大型语言模型（LLM）的代理自动化工业控制系统中封闭回路PLC代码生成与验证") 所示，Agents4PLC 接受用户输入的
    ST 编程需求，例如控制 LED，并输出经过形式验证的 ST 代码。在此过程中，多个具有不同角色的代理根据我们精心设计的工作流协作完成此任务。首先，检索代理分析用户输入，并据此检索与
    ST 代码相关的信息，例如书籍和文档。然后，它将检索到的信息与用户输入（任务指令）一起发送给规划代理，后者负责生成和排序可执行的代码生成计划，并随后将其发送给编码代理。编码代理根据接收到的计划生成
    ST 代码，随后编译器检查是否存在语法错误。如果没有错误，验证代理（验证器）将验证生成代码的功能正确性。否则，错误信息将传递给调试代理，后者会将修复建议返回给编码代理。如果验证成功，则视为生成过程完成。否则，上述工作流将继续迭代，直到超过预定义的循环阈值，此时规划代理将提供另一个代码生成计划。
- en: III-B Detailed Agents Design and Optimization
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: III-B 详细代理设计与优化
- en: The primary components of Agent4PLC are a group of autonomous agents powered
    by Large Language Models (LLMs) or analysis tools. These agents are meticulously
    designed to perform specialized tasks that collectively contribute to the efficient
    generation, validation, and iterative refinement of ST code. Each agent operates
    within a well-defined functional scope, allowing for the delegation of specific
    responsibilities such as code generation, debugging and validation. In particular,
    the LLM-based agents excel at tasks such as understanding user specifications
    provided in natural language, retrieving relevant information, and generating
    ST code. Meanwhile, tool-based agents are designed to address domain-specific
    tasks, such as syntax checking and verification of ST code. The cooperation workflow
    among agents within this architecture not only enhances the scalability and adaptability
    but also facilitates collaborative interactions, creating a continuous feedback
    loop that improves the overall code development.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Agent4PLC 的主要组件是一组由大型语言模型（LLM）或分析工具驱动的自主代理。这些代理经过精心设计，执行专门的任务，协同完成 ST 代码的高效生成、验证和迭代优化。每个代理在明确的功能范围内操作，允许分配特定的责任，如代码生成、调试和验证。特别是，基于
    LLM 的代理擅长处理诸如理解用户以自然语言提供的规格、检索相关信息以及生成 ST 代码等任务。同时，基于工具的代理则专注于处理领域特定的任务，如语法检查和
    ST 代码的验证。这些代理之间的协作工作流不仅增强了可扩展性和适应性，还促进了协作互动，形成一个持续反馈的循环，从而提升整体的代码开发过程。
- en: III-B1 Retrieval Agent
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: III-B1 检索代理
- en: The Retrieval Agent is responsible for gathering relevant information for reference
    based on user input. Although some key agents in the framework are equipped with
    a RAG module to enhance task-specific abilities, the Retrieval Agent primarily
    focuses on searching for the relevant industrial control documents, PLC programming
    references, and ST code from a vector database for the reference of the following
    planning process. It can access both web-based search tools and also internal
    databases to extract pertinent information.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 检索代理负责根据用户输入收集相关信息作为参考。虽然框架中的一些关键代理配备了 RAG 模块，以增强任务特定能力，但检索代理主要专注于从向量数据库中搜索相关的工业控制文档、PLC
    编程参考和 ST 代码，供后续规划过程参考。它可以访问基于网络的搜索工具，也可以访问内部数据库来提取相关信息。
- en: III-B2 Planning Agent
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: III-B2 规划代理
- en: The Planning Agent receives the user input and the information retrieved by
    the retrieval agent, based on which it generates actionable plans using a structured
    automata-like format. Each plan represents a sequence of steps required to achieve
    the task. The planning agent ranks these plans, which later will get executed
    sequentially, based on their ranking, help identify the most suitable solution.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 规划代理接收用户输入和检索代理获取的信息，根据这些信息生成可执行的计划，采用结构化的自动机格式表示。每个计划表示实现任务所需的步骤序列。规划代理对这些计划进行排序，稍后将按排名顺序执行，帮助确定最合适的解决方案。
- en: III-B3 Coding Agent
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: III-B3 编码代理
- en: The Coding Agent is pivotal in converting the detailed plans from the upstream
    agent into ST code, ensuring compliance with both syntactic and semantic requirements.
    By utilizing a RAG block, the agent accesses a comprehensive database of PLC documentation
    and validated ST code samples. RAG enables the agent to learn from the established
    experience and domain-specific knowledge, thus making informed decisions based
    on the provided PLC resources, help improve the reliability of the generated code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 编码代理在将上游代理的详细计划转换为 ST 代码的过程中至关重要，确保符合语法和语义要求。通过利用 RAG 块，代理可以访问一个全面的 PLC 文档数据库和经过验证的
    ST 代码示例。RAG 使代理能够从既定的经验和领域特定知识中学习，从而根据提供的 PLC 资源做出明智决策，帮助提高生成代码的可靠性。
- en: In addition, prompts for the Coding Agent play a crucial role in steering the
    Coding Agent throughout the code generation process. These prompts encapsulate
    domain-specific rules and constraints, to guide the Coding Agent to follow the
    compiler requirements and the predefined validation criteria. The Coding Agent
    operates iteratively alongside debugging and validation agents, fostering a collaborative
    loop that facilitates continuous feedback. This interaction enables the early
    identification and resolution of syntactic, logical, and functional errors, significantly
    improving the overall code quality.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，编码代理的提示在整个代码生成过程中发挥着至关重要的作用。这些提示概括了领域特定的规则和约束，指导编码代理遵循编译器要求和预定义的验证标准。编码代理与调试和验证代理协同工作，形成一个促进持续反馈的协作循环。这种互动使得语法、逻辑和功能性错误能够及早识别和解决，显著提高整体代码质量。
- en: 'Optimization: To further improve the quality of the generated code, the guiding
    prompts for the Coding Agent are meticulously refined. These prompts include critical
    elements of PLC coding, such as defining the roles and responsibilities of various
    code modules, enforcing action constraints for compliance with system safety and
    operational regulations, and leveraging insights from the detailed plans provided
    by the Planning Agent. These help the Coding Agent meet not only the structural
    requirements but also the operational constraints, improving code reliability
    and practicability.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 优化：为了进一步提高生成代码的质量，编码代理的指导提示被精心细化。这些提示包括 PLC 编码的关键元素，例如定义各种代码模块的角色和职责、强制执行符合系统安全性和操作规范的行动约束，以及利用规划代理提供的详细计划中的见解。这些帮助编码代理不仅满足结构要求，还能遵守操作约束，提高代码的可靠性和实用性。
- en: III-B4 Debugging Agent
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: III-B4 调试代理
- en: The Debugging Agent is essential for analyzing errors and inconsistencies that
    emerge during the compilation of the ST code. It interprets feedback from the
    ST compiler and utilizes RAG tools alongside the prompts designed for patch generation
    to produce the revised code. The revised code is then relayed to the Validation
    Agent for syntactic and semantic verification. The Debugging Agent consists of
    three components as follows.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 调试代理对于分析在ST代码编译过程中出现的错误和不一致性至关重要。它解读来自ST编译器的反馈，并利用RAG工具及为补丁生成设计的提示生成修订后的代码。修订后的代码随后传递给验证代理进行语法和语义验证。调试代理由以下三个组件组成。
- en: •
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: Syntactic Fixing Advice Generation. With the input from the compilation results
    of the ST compiler within the validation agent, it generates fixing advice based
    on the syntactic checking results including the error locations and reasons. The
    fixing employs a structured patch generation process, utilizing a step-by-step
    Chain-of-Thought (CoT) methodology that analyzes the origin of error code, its
    info and description respectively. This thorough analysis leads to accurate identification
    of the reasons of error and generation of fixing advice, significantly enhancing
    the accuracy and efficiency of error fixing.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语法修复建议生成。通过验证代理中ST编译器的编译结果输入，它根据语法检查结果生成修复建议，包括错误位置和原因。修复过程采用结构化的补丁生成流程，利用逐步的思维链（CoT）方法，分别分析错误代码的来源、信息和描述。这种彻底的分析有助于准确识别错误原因并生成修复建议，从而显著提高错误修复的准确性和效率。
- en: •
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: Semantic Fixing Advice Generation. This component is to address semantic errors
    identified during formal verification. Similar to the syntactic process, the semantic
    fixing process is also based on CoT, which guides the LLM to assess the violated
    property and the reason of violation, pinpoint potential code segments responsible
    for the property violations, and generate fixing advice.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语义修复建议生成。该组件用于处理在形式验证过程中识别的语义错误。与语法过程类似，语义修复过程也基于CoT方法，它指导LLM评估违反的属性和违反原因，定位可能导致属性违反的代码段，并生成修复建议。
- en: •
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: Fixed Code Generation. This component accepts the fixing advice from the previous
    processes, along with the generated code and the currently active plan from the
    Planning Agent, based on which it repairs the code. Its design mirrors that of
    the Coding Agent, leveraging RAG to access the same comprehensive database of
    the reference resources. By integrating this information, the Debugging Agent
    can refine its output before relaying them to the Validation Agent.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复代码生成。该组件接受来自前述过程的修复建议、生成的代码和来自规划代理的当前活动计划，基于此修复代码。其设计与编码代理相似，利用RAG访问相同的参考资源数据库。通过整合这些信息，调试代理可以在将其传递给验证代理之前优化输出。
- en: Optimization The Debugging Agent serves as a critical module for rectifying
    code errors. Inspired by existing work in automated code repair [[54](https://arxiv.org/html/2410.14209v2#bib.bib54)],
    which utilizes the generated dialogue history and real-time feedback for corrective
    suggestions, we develop a comprehensive workflow for patch analysis and generation
    within the Debugging Agent. We adopt the CoT methodology to guide code repair
    through the patch generation process. Compared to the traditional fine-tuning
    methods for code repair, our approach enhances the effectiveness and adaptability
    of the repair process. By encouraging the LLM to reflect on error messages, relevant
    code lines, and test names, the repair process becomes more intuitive and responsive.
    This structured reflection fosters a deeper understanding of the issues at hand,
    resulting in more precise and effective fixes.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 优化 调试代理作为修复代码错误的关键模块，灵感来自现有的自动化代码修复工作[[54](https://arxiv.org/html/2410.14209v2#bib.bib54)]，该方法利用生成的对话历史和实时反馈来提供纠正建议，我们在调试代理中开发了一个全面的补丁分析和生成工作流程。我们采用CoT方法指导代码修复过程中的补丁生成。与传统的代码修复微调方法相比，我们的方法提高了修复过程的有效性和适应性。通过鼓励大型语言模型（LLM）反思错误信息、相关代码行和测试名称，修复过程变得更加直观和响应式。这种结构化的反思促进了对问题的更深理解，从而带来更精确和有效的修复。
- en: Furthermore, providing contextual information, such as formal verification properties
    and validation outcomes helps the code repair model generate more accurate and
    targeted corrections. This strategy significantly enhances the repair process,
    particularly for errors that cannot be resolved solely through an examination
    of the source code.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，提供上下文信息，如正式验证属性和验证结果，能够帮助代码修复模型生成更准确且有针对性的修复。这个策略显著提升了修复过程，特别是对于那些仅通过检查源代码无法解决的错误。
- en: The use of RAG for code generation also proves effective during the debugging
    phase. Employing previously generated patches in a self-RAG context can improve
    the effectiveness of repair, capitalizing on the wealth of information contained
    in the generated outputs. By continuously refining and validating code through
    this advanced debugging framework, the Debugging Agent not only enhances the quality
    of the final output but also optimizes the overall development workflow.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码生成中使用RAG在调试阶段同样证明了其有效性。在自我RAG上下文中使用先前生成的修复补丁，可以提高修复的有效性，充分利用生成输出中包含的丰富信息。通过不断精炼和验证代码，该调试代理不仅提升了最终输出的质量，还优化了整体开发工作流。
- en: III-B5 Validation Agent
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: III-B5 验证代理
- en: 'The Validation Agent is responsible for verifying the functional correctness
    of ST code. Different from LLM4PLC [[14](https://arxiv.org/html/2410.14209v2#bib.bib14)],
    it offers code-level verification for the ST code, which is necessary for the
    industrial control systems. The agent is composed of several specialized sub-components,
    each tasked with specific validation responsibilities:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 验证代理负责验证ST代码的功能正确性。与LLM4PLC[[14](https://arxiv.org/html/2410.14209v2#bib.bib14)]不同，它提供ST代码的代码级验证，这对于工业控制系统是必需的。该代理由多个专门的子组件组成，每个子组件负责特定的验证任务：
- en: •
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: ST Code Compilation. The first step in the validation process is to run the
    received ST code through a compiler to verify its syntactic correctness. This
    step ensures the generated code conforms to the syntactical rules of ST. If the
    compilation is successful, the process advances to the verification phase. Otherwise,
    the compiler provides detailed error information, which is then fed into the Debugging
    Agent for code correction. By automating this initial verification step, the Validation
    Agent helps streamline the debugging cycle and reduces manual intervention.
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ST代码编译。验证过程的第一步是通过编译器运行接收到的ST代码，以验证其语法正确性。此步骤确保生成的代码符合ST的语法规则。如果编译成功，过程将进入验证阶段。否则，编译器会提供详细的错误信息，然后将其传递给调试代理进行代码修正。通过自动化这一初始验证步骤，验证代理有助于简化调试周期并减少人工干预。
- en: •
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: Property Generation. In cases where formal specifications are not explicitly
    provided by the user, the agent uses a subcomponent that leverages an LLM-driven
    mechanism to generate a set of formal specifications automatically. These specifications
    are derived from user input, industry standards, and general safety requirements,
    and they are structured to meet the format required by formal verification tools.
    This process help make the validation process efficient, especially in complex
    or large-scale systems where manual specification writing can be time-consuming
    and error-prone.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 属性生成。在用户未明确提供正式规范的情况下，代理使用一个子组件，利用LLM驱动的机制自动生成一组正式的规范。这些规范源自用户输入、行业标准和一般安全要求，并且结构化以符合正式验证工具所需的格式。这个过程有助于提高验证过程的效率，特别是在复杂或大规模系统中，手动编写规范可能会耗时且容易出错。
- en: •
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: Translation-based ST Code Analysis. This subcomponent translates the generated
    ST code into formats or languages compatible with formal verification tools such
    as SMV or CBMC [[29](https://arxiv.org/html/2410.14209v2#bib.bib29)]. The translation
    process is either managed by LLM-driven agents or by specialized tools like PLCverif [[12](https://arxiv.org/html/2410.14209v2#bib.bib12)].
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基于翻译的ST代码分析。此子组件将生成的ST代码翻译成与正式验证工具（如SMV或CBMC）兼容的格式或语言[[29](https://arxiv.org/html/2410.14209v2#bib.bib29)]。翻译过程由LLM驱动的代理或像PLCverif[[12](https://arxiv.org/html/2410.14209v2#bib.bib12)]这样的专用工具管理。
- en: Optimization One primary challenge with LLM-guided verification is the potential
    of inconsistencies between the original ST code and the translated version used
    for formal verification. Also, automatically translated code may lead to state
    explosion, a common problem in model checking where the state space grows exponentially,
    making verification computationally expensive or infeasible. To address these,
    we integrate advanced translation-based verification tools like PLCverif, which
    has been optimized for translating ST code into SMV or CBMC formats for model
    checking and bounded model checking (BMC), and may help alleviate the problem
    of state explosion. Our design of the Validation Agent allows for easy incorporation
    of new verification tools as they become available, future-proofing the framework
    and ensuring that it remains adaptable to advances in the field of formal verification.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 优化。使用LLM引导的验证面临的一个主要挑战是，原始ST代码和用于形式化验证的翻译版本之间可能存在不一致性。此外，自动翻译的代码可能导致状态爆炸，这在模型检查中是一个常见问题，状态空间呈指数增长，使得验证在计算上非常昂贵或不可行。为了解决这些问题，我们集成了先进的基于翻译的验证工具，如PLCverif，该工具已优化用于将ST代码转换为SMV或CBMC格式进行模型检查和有界模型检查（BMC），有助于缓解状态爆炸问题。我们设计的验证代理使得可以轻松集成新的验证工具，以便随着时间的推移对框架进行更新，确保框架能适应形式化验证领域的进展。
- en: Another challenge is that in real-world applications, users often struggle to
    define formal properties for verification. To address this, we develop a specification
    generation tool within the Validation Agent. It helps users automatically generate
    formal properties in a format suitable for verification tools, leveraging the
    chain-of-thought (CoT) methodology to guide the process. This automated approach
    not only provide convenience for users but also ensures that the generated properties
    are tailored to formal verification.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个挑战是，在实际应用中，用户通常难以定义用于验证的形式化属性。为了解决这个问题，我们在验证代理中开发了一个规范生成工具。它帮助用户自动生成适用于验证工具的形式化属性，利用链式思维（CoT）方法指导这一过程。这种自动化的方法不仅为用户提供了便利，还确保生成的属性能够适应形式化验证。
- en: IV Experimental Evaluation
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IV 实验评估
- en: 'To systematically evaluate the effectiveness, efficiency, and other key aspects
    of our framework for PLC code generation, we design a series of experiments aimed
    at answering the following research questions (RQs):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了系统地评估我们PLC代码生成框架的有效性、效率以及其他关键方面，我们设计了一系列实验，旨在回答以下研究问题（RQ）：
- en: •
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'RQ1: Can Agents4PLC generate PLC code more effectively compared to the existing
    approaches?'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RQ1：与现有方法相比，Agents4PLC能否更有效地生成PLC代码？
- en: •
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'RQ2: How efficient Agent4PLC is in PLC code generation?'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RQ2：Agent4PLC在PLC代码生成方面的效率如何？
- en: •
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'RQ3: How effective are the designs in agents, e.g., RAG and prompt design in
    the Coding Agent?'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RQ3：代理中的设计效果如何，例如，RAG和编程代理中的提示设计？
- en: •
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'RQ4: How useful is the generated code in practical PLC production environments?'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RQ4：生成的代码在实际PLC生产环境中的实用性如何？
- en: Benchmark Construction. To accurately evaluate our Agents4PLC system, we constructed
    the first benchmark dataset focused on the task of generating ST code from natural
    language specification, and we assess the correctness of code samples automatically
    through formal verification methods. This dataset comprises 23 programming tasks
    along with corresponding formal verification specifications, including 58 properties
    in easy set with 53 non-trivial property over 16 easy programming tasks and 43
    in medium set with 38 non-trivial property over 7 medium programming tasks, where
    trivial property means ”assertion” property without corresponding assertion sentences
    in ST code for reference. These programming problems cover various aspects of
    industrial programming including Logical Control, Mathematical Operations, Real-time
    Monitoring, Process Control and other fields, which effectively simulate the genuine
    requirements found in industrial control systems.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 基准构建。为了准确评估我们的Agents4PLC系统，我们构建了第一个专注于从自然语言规范生成ST代码任务的基准数据集，并通过形式化验证方法自动评估代码样本的正确性。该数据集包含23个编程任务及其对应的形式化验证规范，包括58个简单集合中的属性，其中53个是非平凡属性，涵盖16个简单编程任务，43个中等集合中的属性，其中38个是非平凡属性，涉及7个中等难度的编程任务，平凡属性是指没有在ST代码中提供对应断言句子的“断言”属性。这些编程问题涵盖了工业编程的各个方面，包括逻辑控制、数学运算、实时监控、过程控制等领域，能够有效模拟工业控制系统中的实际需求。
- en: Base LLMs and Retrieval Model. For a comprehensive evaluation of Agents4PLC
    against different base models, we investigated the capabilities of several popular
    code LLMs. In particular, we adopt CodeLlama 34B[[42](https://arxiv.org/html/2410.14209v2#bib.bib42)],
    DeepSeek V2.5[[16](https://arxiv.org/html/2410.14209v2#bib.bib16)], GPT-4o[[3](https://arxiv.org/html/2410.14209v2#bib.bib3)]
    and GPT-4o-mini[[4](https://arxiv.org/html/2410.14209v2#bib.bib4)] to evaluate
    our method. For the retrieval model, we utilize text-embedding-ada-002, an advanced
    model developed by OpenAI.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 基础LLMs与检索模型。为了全面评估Agents4PLC相对于不同基础模型的表现，我们研究了几种流行的代码LLM的能力。具体而言，我们采用了CodeLlama
    34B[[42](https://arxiv.org/html/2410.14209v2#bib.bib42)]、DeepSeek V2.5[[16](https://arxiv.org/html/2410.14209v2#bib.bib16)]、GPT-4o[[3](https://arxiv.org/html/2410.14209v2#bib.bib3)]和GPT-4o-mini[[4](https://arxiv.org/html/2410.14209v2#bib.bib4)]来评估我们的方法。对于检索模型，我们使用了text-embedding-ada-002，这是OpenAI开发的先进模型。
- en: Evaluation Metrics. Following previous work[[14](https://arxiv.org/html/2410.14209v2#bib.bib14)],
    we employ the 1) pass rate, 2) syntax compilation success rate and 3) verification
    success rate (or verifiable rate) as metrics to evaluate the effectiveness of
    code generation. The syntax compilation success rate serves as a preliminary validation
    of the syntactic correctness of the generated ST code. A high syntax compilation
    success rate indicates fewer syntax errors, thereby reducing subsequent debugging
    efforts. The pass rate is derived from the pass@k metric, where the model is considered
    successful if at least one of the k generated results that not only compile successfully
    but also adhere to the specified functional requirements of the PLC program, which
    is the most challenging task. The verifiable rate quantifies the proportion of
    the generated ST code segments that can pass syntax check of target verification
    language, e.g. nuXmv or cbmc. A high verifiable rate reflects the effectiveness
    of the approach in generating executable code for verification. We calculate it
    as the proportion of code segments that successfully compile out of the total
    number of generated code segments.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 评估指标。参考之前的研究[[14](https://arxiv.org/html/2410.14209v2#bib.bib14)]，我们使用1)通过率，2)语法编译成功率和3)验证成功率（或可验证率）作为评估代码生成效果的指标。语法编译成功率作为生成的ST代码语法正确性的初步验证。较高的语法编译成功率表示语法错误较少，从而减少后续的调试工作。通过率来自于pass@k指标，其中，如果生成的k个结果中至少有一个不仅编译成功且符合PLC程序的功能要求，则视为模型成功，这是最具挑战性的任务。可验证率量化了生成的ST代码段能够通过目标验证语言的语法检查的比例，例如nuXmv或cbmc。较高的可验证率反映了该方法在生成可执行代码用于验证方面的有效性。我们将其计算为成功编译的代码段在所有生成代码段中的比例。
- en: V Results
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: V 结果
- en: 'V-A RQ1: Effectiveness study'
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'V-A RQ1: 效果性研究'
- en: In this experiment, we systematically compare our framework with other code
    generation frameworks based on several base LLMs for generating reliable ST code.
    Our evaluation is based on a set of benchmark cases designed to reflect varying
    levels of complexity, from relatively straightforward control sequences (labeled
    as “Easy”) to more sophisticated logic processes (labeled as “Medium”). Note that
    LLM4PLC is designed to be a half-automated framework with human interactions,
    we write an extra automation program to drive the components of the LLM4PLC framework.
    More experiment details are included in our github link ²²2[https://github.com/Luoji-zju/Agents4PLC_release](https://github.com/Luoji-zju/Agents4PLC_release)
    and our site.³³3[https://hotbento.github.io/Agent4PLC/](https://hotbento.github.io/Agent4PLC/)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本实验中，我们系统地将我们的框架与其他基于多个基础LLM的代码生成框架进行比较，以生成可靠的ST代码。我们的评估基于一组基准测试用例，旨在反映不同复杂度的水平，从相对简单的控制序列（标记为“Easy”）到更复杂的逻辑过程（标记为“Medium”）。需要注意的是，LLM4PLC设计为一个半自动化框架，包含人工交互，我们编写了额外的自动化程序来驱动LLM4PLC框架的组件。更多实验细节请参见我们的github链接²²2[https://github.com/Luoji-zju/Agents4PLC_release](https://github.com/Luoji-zju/Agents4PLC_release)和我们的网站³³3[https://hotbento.github.io/Agent4PLC/](https://hotbento.github.io/Agent4PLC/)
- en: The models evaluated in this experiment include CodeLlama 34B, GPT-4o, GPT-4o-mini,
    and DeepSeek V2.5\. Among these, the CodeLlama 34B model is run on a single NVIDIA
    A800 80GB PCIe GPU with pre-trained LoRAs from the LLM4PLC framework, while the
    other models are tested via their respective online APIs. Each model is provided
    with user requirements, code skeletons, and natural language specifications to
    generate ST code. This setup mirrors real-world coding scenarios where the models
    function as code generation agents without detailed control over the underlying
    logic design. Additionally, to assess the potential of non-specialized models
    for PLC code generation, we also evaluated the performance of the ChatDev framework[[40](https://arxiv.org/html/2410.14209v2#bib.bib40)]
    with GPT-4o base model on our benchmark.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 本次实验评估的模型包括 CodeLlama 34B、GPT-4o、GPT-4o-mini 和 DeepSeek V2.5。 在这些模型中，CodeLlama
    34B 模型在单个 NVIDIA A800 80GB PCIe GPU 上运行，并使用来自 LLM4PLC 框架的预训练 LoRA，而其他模型则通过各自的在线
    API 进行测试。每个模型都会提供用户需求、代码框架和自然语言规范，以生成 ST 代码。该设置模拟了真实世界的编码场景，其中模型作为代码生成代理工作，而无需详细控制底层逻辑设计。此外，为了评估非专用模型在
    PLC 代码生成中的潜力，我们还评估了基于 GPT-4o 基础模型的 ChatDev 框架[[40](https://arxiv.org/html/2410.14209v2#bib.bib40)]在我们基准测试中的表现。
- en: 'The experiment results is shown in Table [III](https://arxiv.org/html/2410.14209v2#S5.T3
    "Table III ‣ V-D RQ4: Case study in practical control environment ‣ V Results
    ‣ Agents4PLC: Automating Closed-loop PLC Code Generation and Verification in Industrial
    Control Systems using LLM-based Agents"), which illustrates the performance of
    different frameworks based on different models across both “Easy” and “Medium”
    benchmark levels. The table presents the pass rates for both compilation and verification
    stages, with the format X Y Z%, where X represents the number of successful passes
    on corresponding metrics, Y indicates the total number of programming problems,
    and Z% denotes the pass rate percentage. For instance, LLM4PLC/GPT-4o achieves
    a syntax compilation pass rate of 14 16 87.5%, meaning the generated result of
    LLM4PLC on the GPT-4o model successfully compiles for 14 out of 16 programming
    problems, yielding an 87.5% success rate. We record syntax compilation success
    rate, verifiable rate and pass rate for both systems, where “verifiable rate”
    means the framework can generate verifiable model for at least 80% of the given
    properties, and “pass rate” means that least 80% of the generated code can compile.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '实验结果如表 [III](https://arxiv.org/html/2410.14209v2#S5.T3 "Table III ‣ V-D RQ4:
    Case study in practical control environment ‣ V Results ‣ Agents4PLC: Automating
    Closed-loop PLC Code Generation and Verification in Industrial Control Systems
    using LLM-based Agents") 所示，表中展示了不同模型在“简单”和“中等”基准水平上的表现。该表列出了编译和验证阶段的通过率，格式为 X
    Y Z%，其中 X 表示在相应指标上成功通过的次数，Y 表示编程问题的总数，Z% 表示通过率。例如，LLM4PLC/GPT-4o 的语法编译通过率为 14
    16 87.5%，意味着 LLM4PLC 在 GPT-4o 模型上生成的结果成功编译了 16 个编程问题中的 14 个，成功率为 87.5%。我们记录了语法编译成功率、可验证率和通过率，其中“可验证率”表示框架能够生成可验证模型，且至少
    80% 的给定属性能够得到验证，“通过率”表示生成的代码至少 80% 能够编译。'
- en: The results highlight the effectiveness of our Agents4PLC framework which outperforms
    other software development frameworks across different benchmark levels. In the
    “Easy” category, the performance of LLM4PLC on different models demonstrates notable
    variability. The GPT-4o-mini model achieves the highest syntax compilation pass
    rate of 93.8%, successfully compiling 15 out of 16 code segments. In contrast,
    the CodeLlama 34B model, based on the original experimental setting has the lowest
    performance, with a syntax compilation pass rate of only 68.8%. Notably, the verifiable
    rate and pass rate for all LLM4PLC models are significantly low, with both GPT-4o
    and DeepSeek V2.5 recording a verifiable rate of 12.5% on the Easy problems. Only
    DeepSeek V2.5 achieves a pass rate of 12.5% on these problems, indicating that
    the LLM-based automative generation of SMV models requires further improvement.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 结果突出了我们的 Agents4PLC 框架的有效性，它在不同基准水平上超越了其他软件开发框架。在“简单”类别中，LLM4PLC 在不同模型上的表现展现了显著的差异性。GPT-4o-mini
    模型实现了最高的语法编译通过率 93.8%，成功编译了 16 个代码段中的 15 个。相比之下，基于原始实验设置的 CodeLlama 34B 模型表现最差，语法编译通过率仅为
    68.8%。值得注意的是，所有 LLM4PLC 模型的可验证率和通过率都显著较低，其中 GPT-4o 和 DeepSeek V2.5 在简单问题上的可验证率为
    12.5%。仅有 DeepSeek V2.5 在这些问题上达到了 12.5% 的通过率，这表明基于 LLM 的 SMV 模型自动生成仍需进一步改进。
- en: On the contrary, Agents4PLC framework exhibits more consistent performance across
    different models in the Easy category. Except for CodeLlama 34B, they all achieve
    a syntax compilation pass rate of 100%, successfully compiling all generated code
    for the programming problems. Our Agents4PLC framework across different models
    achieves a maximum verifiable rate of 68% and a pass rate of 50% with the GPT-4o
    model, indicating the superior capability of our framework in generating verifiable
    code.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，Agents4PLC 框架在 Easy 类别中展示了不同模型间更为一致的表现。除了 CodeLlama 34B 外，其余模型均实现了 100% 的语法编译通过率，成功编译了所有生成的编程问题代码。我们的
    Agents4PLC 框架在不同模型中达到了 68% 的最大可验证率，并且 GPT-4o 模型的通过率为 50%，表明我们的框架在生成可验证代码方面具有优越的能力。
- en: For the Medium benchmark level, both systems maintain their respective performance
    patterns, with *Agents4PLC consistently outperforming LLM4PLC*. All models from
    Agents4PLC manage to achieve a syntax compilation rate of 100% on “Medium” problems,
    contrasting sharply with the variable results from LLM4PLC, where the highest
    syntax compilation pass rate is again recorded by GPT-4o and GPT-4o-mini at 57.1%.
    Our Agents4PLC framework achieves a maximum verifiable rate of 42.3% with GPT-4o
    and DeepSeek V2.5, and a maximum pass rate of 28.6% with GPT-4o, demonstrating
    that our framework can effectively handle tasks involving complex coding problems.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Medium 基准级别，两个系统均维持各自的表现模式，*Agents4PLC 一直优于 LLM4PLC*。Agents4PLC 的所有模型都能在“Medium”问题上实现
    100% 的语法编译通过率，而 LLM4PLC 的结果则较为不稳定，其中 GPT-4o 和 GPT-4o-mini 的语法编译通过率最高为 57.1%。我们的
    Agents4PLC 框架在 GPT-4o 和 DeepSeek V2.5 上实现了最大 42.3% 的可验证率，并且在 GPT-4o 上的最大通过率为 28.6%，这表明我们的框架能够有效处理涉及复杂编码问题的任务。
- en: We also conduct experiments on ST code generation using ChatDev, a general-purpose
    software development platform based on multi-agent systems. This software development
    framework achieve 43.8% syntax compilation, 43.8% verifiable rate, 43.8% pass
    rate on the Easy category and 28.6% syntax compilation, 14.3% verifiable rate,
    and 28.6% pass rate on medium category, showing that most compilable code from
    ChatDev are correct in semantics. However, it is also worth noting that despite
    explicitly prompting the ChatDev framework to generate ST code, it occasionally
    produces code in unrelated languages, such as Python or C++. This highlights a
    limitation of general-purpose code generation frameworks in specialized industrial
    domains.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用 ChatDev 进行了 ST 代码生成实验，ChatDev 是一个基于多智能体系统的通用软件开发平台。该软件开发框架在 Easy 类别中达到了
    43.8% 的语法编译通过率、43.8% 的可验证率和 43.8% 的通过率，在 Medium 类别中则达到了 28.6% 的语法编译通过率、14.3% 的可验证率和
    28.6% 的通过率，表明 ChatDev 生成的大部分可编译代码在语义上是正确的。然而，值得注意的是，尽管明确提示 ChatDev 框架生成 ST 代码，它偶尔会生成与问题无关的代码，如
    Python 或 C++，这突显了通用代码生成框架在特定行业领域中的局限性。
- en: 'TABLE I: Efficiency evaluation: ST code generation times over all attempts
    passing syntactic compilation'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 表 I：效率评估：所有尝试通过语法编译的 ST 代码生成次数
- en: '| Benchmark Level | Easy Problems | Medium Problems |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 基准级别 | 简单问题 | 中等问题 |'
- en: '| Framework | Base Model | 1 time | 2 time | 3 or more | 1 time | 2 time |
    3 or more |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 框架 | 基础模型 | 1 次 | 2 次 | 3 次及以上 | 1 次 | 2 次 | 3 次及以上 |'
- en: '| LLM4PLC | CodeLlama 34B | 8  11  72.7% | 0  11  0.0% | 3  11  27.3% | 2  4
     50.0% | 2  4  50.0% | 0  4  0.0% |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| LLM4PLC | CodeLlama 34B | 8  11  72.7% | 0  11  0.0% | 3  11  27.3% | 2  4  50.0%
    | 2  4  50.0% | 0  4  0.0% |'
- en: '| DeepSeek V2.5 | 12  13  92.3% | 1  13  7.7% | 0  13  0.0% | 6  7  85.7% |
    1  7  14.3% | 0  7  0.0% |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| DeepSeek V2.5 | 12  13  92.3% | 1  13  7.7% | 0  13  0.0% | 6  7  85.7% |
    1  7  14.3% | 0  7  0.0% |'
- en: '| GPT-4o | 13  14  92.9% | 1  14  7.1% | 0  14  0.0% | 3  4  75.0% | 1  4  25.0%
    | 0  4  0.0% |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| GPT-4o | 13  14  92.9% | 1  14  7.1% | 0  14  0.0% | 3  4  75.0% | 1  4  25.0%
    | 0  4  0.0% |'
- en: '| GPT-4o-mini | 15  15  100.0% | 0  15  0.0% | 0  15  0.0% | 3  4  75.0% |
    0  4  0.0% | 1  4  25.0% |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| GPT-4o-mini | 15  15  100.0% | 0  15  0.0% | 0  15  0.0% | 3  4  75.0% |
    0  4  0.0% | 1  4  25.0% |'
- en: '| Agents4PLC | CodeLlama 34B | 4  5  80.0% | 1  5  20.0% | 0  5  0.0% | 1  1
     100.0% | 0  1  0.0% | 0  1  0.0% |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| Agents4PLC | CodeLlama 34B | 4  5  80.0% | 1  5  20.0% | 0  5  0.0% | 1  1  100.0%
    | 0  1  0.0% | 0  1  0.0% |'
- en: '| DeepSeek V2.5 | 16  16  100.0% | 0  16  0.0% | 0  16  0.0% | 7  7  100.0%
    | 0  7  0.0% | 0  7  0.0% |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| DeepSeek V2.5 | 16  16  100.0% | 0  16  0.0% | 0  16  0.0% | 7  7  100.0%
    | 0  7  0.0% | 0  7  0.0% |'
- en: '| GPT-4o | 16  16  100.0% | 0  16  0.0% | 0  16  0.0% | 7  7  100.0% | 0  7
     0.0% | 0  7  0.0% |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| GPT-4o | 16  16  100.0% | 0  16  0.0% | 0  16  0.0% | 7  7  100.0% | 0  7  0.0%
    | 0  7  0.0% |'
- en: '| GPT-4o-mini | 16  16  100.0% | 0  16  0.0% | 0  16  0.0% | 7  7  100.0% |
    0  7  0.0% | 0  7  0.0% |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| GPT-4o-mini | 16  16  100.0% | 0  16  0.0% | 0  16  0.0% | 7  7  100.0% |
    0  7  0.0% | 0  7  0.0% |'
- en: 'Note: The format of data represents the number for corresponding generation
    times / total cases passing syntactic compilation / ratio.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：数据格式表示对应生成次数的编号 / 通过语法编译的总案例数 / 比率。
- en: 'TABLE II: Ablation Experiment with Designs on Coding and Fixing Agents'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 表 II：编码和修复代理设计的消融实验
- en: '| Benchmark Level | Easy Problems | Medium Problems |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 基准水平 | 简单问题 | 中等问题 |'
- en: '| Framework | Base Model | Syntax Compilation | Pass Rate | Verifiable Rate
    | Syntax Compilation | Pass Rate | Verifiable Rate |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| 框架 | 基础模型 | 语法编译 | 通过率 | 可验证率 | 语法编译 | 通过率 | 可验证率 |'
- en: '| Coding Agent | One-shot + RAG + Syntax Hint | 16  16  100.0% | 8  16  50.0%
    | 11  16  68.8% | 7  7  100.0% | 2  7  28.6% | 3  7  42.9% |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| 编码代理 | 一次性 + RAG + 语法提示 | 16  16  100.0% | 8  16  50.0% | 11  16  68.8% |
    7  7  100.0% | 2  7  28.6% | 3  7  42.9% |'
- en: '| One-shot + Syntax Hint | 16  16  100.0% | 11  16  68.8% | 12  16  75.0% |
    7  7  100.0% | 1  7  14.3% | 3  7  42.9% |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| 一次性 + 语法提示 | 16  16  100.0% | 11  16  68.8% | 12  16  75.0% | 7  7  100.0%
    | 1  7  14.3% | 3  7  42.9% |'
- en: '| One-shot + RAG | 16  16  100.0% | 6  16  37.5% | 9  16  56.2% | 7  7  100.0%
    | 1  7  14.3% | 1  7  14.3% |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| 一次性 + RAG | 16  16  100.0% | 6  16  37.5% | 9  16  56.2% | 7  7  100.0% |
    1  7  14.3% | 1  7  14.3% |'
- en: '| One-shot | 16  16  100.0% | 6  16  37.5% | 9  16  56.2% | 7  7  100.0% |
    0  7  0.0% | 1  7  14.3% |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 一次性 | 16  16  100.0% | 6  16  37.5% | 9  16  56.2% | 7  7  100.0% | 0  7  0.0%
    | 1  7  14.3% |'
- en: '| Zero-shot | 16  16  100.0% | 7  16  43.8% | 8  16  50.0% | 7  7  100.0% |
    0  7  0.0% | 1  7  14.3% |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| 零次尝试 | 16  16  100.0% | 7  16  43.8% | 8  16  50.0% | 7  7  100.0% | 0  7  0.0%
    | 1  7  14.3% |'
- en: '| Debugging Agent | Without CoT / Patch Template | 16  16  100.0% | 10  16
     62.5% | 10  16  50.0% | 7  7  100.0% | 0  7  0.0% | 1  7  14.3% |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| 调试代理 | 无 CoT / 补丁模板 | 16  16  100.0% | 10  16  62.5% | 10  16  50.0% | 7  7  100.0%
    | 0  7  0.0% | 1  7  14.3% |'
- en: 'Note: The format of data represents number of successful passes on corresponding
    metrics / total number of programming problems / passing rate.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：数据格式表示对应指标上成功通过的次数 / 编程问题的总数 / 通过率。
- en: 'V-B RQ2: Efficiency study'
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'V-B RQ2: 效率研究'
- en: 'To evaluate the efficiency of our framework in generating verifiable st code,
    we measured the time taken for each model to successfully generate a syntactically
    correct and semantically verified ST code. Considering in our validation process,
    PLCverif is not supported for efficiency evaluation, we categorize the results
    based on how many attempts it takes for each model to pass the syntactic compilation
    stage. The categories are as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了评估我们框架在生成可验证 ST 代码方面的效率，我们衡量了每个模型成功生成语法正确且语义验证通过的 ST 代码所需的时间。考虑到在我们的验证过程中，PLCverif
    不支持效率评估，我们根据每个模型通过语法编译阶段所需的尝试次数对结果进行了分类。分类如下：
- en: •
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: '1 Attempt: The code passes syntactic compilation stage on the first try.'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1 次尝试：代码在第一次尝试中通过语法编译阶段。
- en: •
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: '2 Attempts: The code passes syntactic compilation stage on the second attempt
    after a failure.'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2 次尝试：代码在失败后第二次尝试通过语法编译阶段。
- en: •
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: '3 or more than 3 Attempts: The framework takes more than three attempts to
    succeed.'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 3 次或更多次尝试：框架需要超过三次尝试才能成功。
- en: 'The experimental results are presented in Table [I](https://arxiv.org/html/2410.14209v2#S5.T1
    "Table I ‣ V-A RQ1: Effectiveness study ‣ V Results ‣ Agents4PLC: Automating Closed-loop
    PLC Code Generation and Verification in Industrial Control Systems using LLM-based
    Agents"), where the data format represents the number of generation attempts required
    / total cases passing syntactic compilation / ratio. The experimental setup is
    identical to that of Experiment 1.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '实验结果见表 [I](https://arxiv.org/html/2410.14209v2#S5.T1 "Table I ‣ V-A RQ1: Effectiveness
    study ‣ V Results ‣ Agents4PLC: Automating Closed-loop PLC Code Generation and
    Verification in Industrial Control Systems using LLM-based Agents")，其中数据格式表示所需的生成尝试次数
    / 通过语法编译的总案例数 / 比率。实验设置与实验 1 相同。'
- en: The results demonstrate that our framework, when paired with the base models
    DeepSeek V2.5, GPT-4o, and GPT-4o-mini, consistently achieved successful ST code
    generation in a single attempt, regardless of whether the problems are classified
    as easy or medium. In contrast, the CodeLlama 34B model within our framework exhibited
    instances of requiring code repair after the initial attempt. In comparison, the
    LLM4PLC framework showed multiple instances across all tested models where two
    or more attempts are necessary to produce compilable code. This stark contrast
    in performance underscores that our Agents4PLC framework not only delivers higher
    code generation success rates but also significantly improves efficiency, particularly
    when compared to LLM4PLC, which required more frequent code corrections.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表明，当我们的框架与基础模型DeepSeek V2.5、GPT-4o和GPT-4o-mini配合使用时，无论问题被分类为简单还是中等，均能在单次尝试中成功生成ST代码。相比之下，我们框架中的CodeLlama
    34B模型在首次尝试后出现需要修复代码的情况。而LLM4PLC框架在所有测试模型中，出现了多个实例，要求进行两次或更多尝试才能生成可编译的代码。这种明显的性能差异凸显了我们的Agents4PLC框架不仅提供更高的代码生成成功率，还显著提高了效率，尤其是与LLM4PLC相比，后者需要更多频繁的代码修正。
- en: 'V-C RQ3: Ablation study'
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: V-C RQ3：消融研究
- en: 'The ablation study aims to evaluate the influence of specific design choices
    within our framework on the performance of code generation. Our ablation experiments
    are organized around two primary domains:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 消融研究旨在评估框架中特定设计选择对代码生成性能的影响。我们的消融实验围绕两个主要领域组织：
- en: •
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'Coding Agent: We investigate the effects of three significant enhancements:
    syntax hints in prompts, retrieval-augmented generation (RAG), and one-shot prompting
    on the ST code generation process. The following configurations are examined,
    with each enhancement systematically removed to assess its impact on the pass
    rates:'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编码代理：我们调查了三个重要增强功能对ST代码生成过程的影响：提示中的语法提示、基于检索的生成（RAG）和单次提示。我们检查了以下配置，逐一去除每个增强功能，以评估其对通过率的影响：
- en: –
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: –
- en: 'Full Configuration: The complete framework incorporating syntax hints, RAG,
    and one-shot prompting.'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完整配置：包含语法提示、RAG和单次提示的完整框架。
- en: –
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: –
- en: 'Intermediate Configuration without RAG: The framework utilizing one-shot prompting
    and syntax hints, but excluding RAG.'
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 无RAG的中间配置：该框架使用单次提示和语法提示，但不包括RAG。
- en: –
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: –
- en: 'Intermediate Configuration without Syntax hint: The framework utilizing simple
    one-shot prompting and RAG, but excluding syntax hints.'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 无语法提示的中间配置：该框架使用简单的单次提示和RAG，但不包括语法提示。
- en: –
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: –
- en: 'Simplified Configuration: A streamlined version using only plain one-shot prompting.'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简化配置：仅使用普通单次提示的简化版本。
- en: –
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: –
- en: 'Baseline Configuration: The foundational setup with zero-shot prompting and
    no supplementary aids (syntax hints and RAG).'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基准配置：基础设置，采用零次提示且没有补充辅助（语法提示和RAG）。
- en: •
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •
- en: 'Debugging Agent: In this segment, we assess the importance of two critical
    components of the Debugging agent: chain-of-thought (CoT) reasoning and patch
    templates. We compare the framework’s performance when both components are disabled,
    effectively operating without CoT reasoning and patch templates. This allows us
    to quantify the degradation in code correction capabilities resulting from their
    absence.'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调试代理：在此部分，我们评估调试代理两个关键组件的重要性：链式思维（CoT）推理和补丁模板。我们比较了禁用这两个组件时框架的表现，即在没有CoT推理和补丁模板的情况下操作。这使我们能够量化由于缺少这些组件而导致的代码修正能力的下降。
- en: 'Table [II](https://arxiv.org/html/2410.14209v2#S5.T2 "Table II ‣ V-A RQ1: Effectiveness
    study ‣ V Results ‣ Agents4PLC: Automating Closed-loop PLC Code Generation and
    Verification in Industrial Control Systems using LLM-based Agents") summarizes
    the findings from this ablation study, showcasing the ST code verification pass
    rates and compilation pass rates across various configurations. The configuration
    of experiment and table content is similar to those in effectiveness study, including
    metrics and data format. The configuration that on Easy Problem set, the setting
    combining One-shot and Syntax Hint yields the highest overall pass rates (68.8%)
    and verifiable rates (75.0%). However, the results for medium problems mirror
    the full configuration, One-shot + RAG + Syntax Hint configuration, demonstrate
    superior performance with 28.6% pass rate and 42.9% verifiable rate). The impact
    for each configuration analysis is:'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '表[II](https://arxiv.org/html/2410.14209v2#S5.T2 "表II ‣ V-A RQ1: 效果研究 ‣ V 结果
    ‣ Agents4PLC: 基于LLM的代理在工业控制系统中自动化闭环PLC代码生成与验证")总结了这项消融研究的结果，展示了不同配置下的ST代码验证通过率和编译通过率。实验配置和表格内容与效果研究中的类似，包括指标和数据格式。在简单问题集上的配置中，结合一次性提示和语法提示的设置产生了最高的整体通过率（68.8%）和可验证通过率（75.0%）。然而，中等难度问题的结果与完整配置相似，使用一次性提示
    + RAG + 语法提示的配置展示了更优秀的表现，具有28.6%的通过率和42.9%的可验证通过率。每个配置分析的影响如下：'
- en: –
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: –
- en: 'RAG: The application of RAG provides noticeable improvements for medium-level
    problems, but its impact on easy problems is less pronounced, and in some cases,
    it may even have unintended negative effects.'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: RAG：RAG的应用对中等难度问题有显著的改进，但对简单问题的影响较小，在某些情况下，甚至可能产生意想不到的负面效果。
- en: –
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: –
- en: 'Syntax Hint: Detailed syntax hints significantly enhance the effectiveness
    of code generation, especially for easy problems. The provision of syntax guidance
    helps improve both the syntactical correctness and the overall quality of generated
    code.'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语法提示：详细的语法提示显著提高了代码生成的效果，尤其是对于简单问题。提供语法指导有助于提高语法正确性和生成代码的整体质量。
- en: –
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: –
- en: 'One shot: In our experiments, we observe that one-shot prompting do not lead
    to a substantial improvement in performance. This is likely because the one-shot
    method merely provides a reference ST code template, which has limited effectiveness
    in improving the overall quality of code generation.'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一次性提示：在我们的实验中，我们观察到一次性提示并未显著提升性能。这可能是因为一次性方法仅提供了一个参考的ST代码模板，其在提高代码生成整体质量方面的效果有限。
- en: –
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: –
- en: 'CoT in Debugging agent: For easy problems, the results show no significant
    difference between using the standard debugging agent and that with CoT. However,
    for medium-level problems, the removal of CoT noticeably reduce the framework’s
    performance, indicating that CoT is crucial for handling more complex debugging
    tasks.'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调试代理中的CoT：对于简单问题，结果表明使用标准调试代理和带有CoT的调试代理之间没有显著差异。然而，对于中等难度的问题，移除CoT明显降低了框架的性能，表明CoT对于处理更复杂的调试任务至关重要。
- en: 'The results indicate that the inclusion of syntax hints improves performance
    across all metrics, while the impact of one-shot prompting remains unclear. However,
    the effects of more advanced optimization techniques, such as RAG and CoT, warrant
    further investigation. These methods significantly enhance the framework’s ability
    to handle complex problems, but when not carefully designed, they may interfere
    with the reasoning process on simpler tasks. Additionally, considering Section
    [V-B](https://arxiv.org/html/2410.14209v2#S5.SS2 "V-B RQ2: Efficiency study ‣
    V Results ‣ Agents4PLC: Automating Closed-loop PLC Code Generation and Verification
    in Industrial Control Systems using LLM-based Agents"), our framework can often
    generate correct code in a single attempt. As a result, the current experiments
    may not fully capture the effectiveness of the debugging agent.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '结果表明，加入语法提示提高了所有指标的性能，而一次性提示的影响仍不明确。然而，更高级优化技术（如RAG和CoT）的效果值得进一步研究。这些方法显著提升了框架处理复杂问题的能力，但如果设计不当，它们可能会干扰简易任务的推理过程。此外，参见[章节V-B](https://arxiv.org/html/2410.14209v2#S5.SS2
    "V-B RQ2: 效率研究 ‣ V 结果 ‣ Agents4PLC: 基于LLM的代理在工业控制系统中自动化闭环PLC代码生成与验证")，我们的框架通常能够在一次尝试中生成正确的代码。因此，目前的实验可能并未完全捕捉到调试代理的效果。'
- en: 'V-D RQ4: Case study in practical control environment'
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: V-D RQ4：实际控制环境中的案例研究
- en: To evaluate how Agent4PLC performs in practical industrial control environment,
    we conduct case studies utilizing the UWinTech Control Engineering Application
    Software Platform, developed by Hangzhou UWNTEK Automation System Co., Ltd. UWinTech
    is a software package designed for using the UW series control system [[1](https://arxiv.org/html/2410.14209v2#bib.bib1)].
    It integrates a wide range of functionalities, including on-site data collection,
    algorithm execution, real-time and historical data processing, alarm and safety
    mechanisms, process control, animation display, trend curve analysis, report generation,
    and network monitoring. The engineer station configuration software, operator
    station real-time monitoring software, and on-site control station real-time control
    software operate on different levels of hardware platforms. Its components interact
    via control networks and system networks, coordinating the exchange of data, management,
    and control information to ensure the successful execution of various functions
    within the control system.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 为了评估Agent4PLC在实际工业控制环境中的表现，我们进行了案例研究，利用了由杭州UWNTEK自动化系统有限公司开发的UWinTech控制工程应用软件平台。UWinTech是一个针对UW系列控制系统设计的软件包[[1](https://arxiv.org/html/2410.14209v2#bib.bib1)]。它集成了广泛的功能，包括现场数据采集、算法执行、实时和历史数据处理、报警和安全机制、过程控制、动画显示、趋势曲线分析、报告生成以及网络监控。工程师站配置软件、操作员站实时监控软件和现场控制站实时控制软件在不同的硬件平台上运行。其组件通过控制网络和系统网络进行交互，协调数据、管理和控制信息的交换，以确保控制系统中各种功能的成功执行。
- en: 'Our experiments involve several steps: first, we constructed the operation
    station and the control station, then we configured the attributes of the monitoring
    and control points. These points are linked to the simulation model, and the generated
    ST code from Agent4PLC were uploaded to the control station to conduct the experiment.
    We perform four control tasks: site monitoring and alarm light flashing, low voltage
    limit and motor start/stop, temperature and pressure monitoring, and specific
    node delay monitoring.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的实验包括几个步骤：首先，我们构建了操作站和控制站，然后配置了监控和控制点的属性。这些点与仿真模型连接，Agent4PLC生成的ST代码上传到控制站进行实验。我们执行了四个控制任务：现场监控和报警灯闪烁、低电压限值和电机启动/停止、温度和压力监控，以及特定节点延迟监控。
- en: 'Figure [4](https://arxiv.org/html/2410.14209v2#S5.F4 "Figure 4 ‣ V-D RQ4: Case
    study in practical control environment ‣ V Results ‣ Agents4PLC: Automating Closed-loop
    PLC Code Generation and Verification in Industrial Control Systems using LLM-based
    Agents") denotes an LED Control task. The prompt is: design a PLC function block
    named LED-Control using structured text (ST) code. The function block should contain
    two Boolean input variables (PB1 and PB2) and one Boolean output variable (LED).
    Implement logical operations such that LED is assigned the value resulting from
    a logical AND operation between PB1 and the negation of PB2\. The function block
    should represent a simple control system where PB1 and PB2 determine whether LED
    is on or off based on the specified logic. The results show that with the generated
    ST code uploaded, when PB1 is true ($1$) and PB2 is false ($0$), namely the the
    AND operation between PB1 and the negation of PB2 output $1$, the light is green,
    and otherwise, it is red. This complies with the requirement in the prompt.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '图[4](https://arxiv.org/html/2410.14209v2#S5.F4 "图 4 ‣ V-D RQ4: 实际控制环境中的案例研究
    ‣ V 结果 ‣ Agents4PLC：利用基于LLM的智能体自动化闭环PLC代码生成与验证")表示一个LED控制任务。提示是：使用结构化文本（ST）代码设计一个名为LED-Control的PLC功能块。该功能块应包含两个布尔输入变量（PB1和PB2）和一个布尔输出变量（LED）。实现逻辑操作，使LED的值由PB1和PB2的否定之间的逻辑与运算结果赋值。该功能块应表示一个简单的控制系统，其中PB1和PB2根据指定的逻辑决定LED是否开启。实验结果表明，当上传生成的ST代码后，当PB1为真（$1$）且PB2为假（$0$），即PB1与PB2的否定之间的与运算结果为$1$时，LED为绿色，否则为红色。这符合提示中的要求。'
- en: 'Figure [5](https://arxiv.org/html/2410.14209v2#S5.F5 "Figure 5 ‣ V-D RQ4: Case
    study in practical control environment ‣ V Results ‣ Agents4PLC: Automating Closed-loop
    PLC Code Generation and Verification in Industrial Control Systems using LLM-based
    Agents") denotes a motor control task. The Prompt is: Design a PLC function block
    in Structured Text (ST) that evaluates whether the critical motor should be triggered
    based on the given low pressure value compared to a threshold of $36464$. The
    state of Motor-Critical is determined based on this evaluation. The results show
    that when the input voltage is below the threshold 36464, the motor stops; otherwise,
    the motor starts.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '图[5](https://arxiv.org/html/2410.14209v2#S5.F5 "图5 ‣ V-D RQ4: 实际控制环境中的案例研究
    ‣ V 结果 ‣ Agents4PLC: 使用基于LLM的智能体自动化闭环PLC代码生成与验证")表示电机控制任务。提示是：设计一个结构化文本（ST）中的PLC功能块，评估给定的低压值与$36464$阈值比较后，是否触发关键电机。Motor-Critical的状态是根据该评估结果来决定的。结果显示，当输入电压低于阈值36464时，电机停止；否则，电机启动。'
- en: 'Figure [6](https://arxiv.org/html/2410.14209v2#S5.F6 "Figure 6 ‣ V-D RQ4: Case
    study in practical control environment ‣ V Results ‣ Agents4PLC: Automating Closed-loop
    PLC Code Generation and Verification in Industrial Control Systems using LLM-based
    Agents") denotes a temperature and relay update task. The prompt is: Design a
    PLC program using structured text (ST code) that incorporates pressure sensors,
    temperature sensors, relays, counters, error codes, and error flags as inputs.
    The program must loop through the pressure sensor, adjust the temperature sensor
    based on specific conditions, and update the relay status according to the value
    of GT1-OUT. Ensure that the program checks for conditions to avoid overflow and
    maintains the error flag state. Return a Boolean value indicating the completion
    of the operation. The results show that low or high limit alarms and different
    error codes are provided when pressure and temperature are abnormal. When an abnormality
    occurs, the alarm light will flash. If the pressure exceeds the upper limit, the
    error code is 1. If the temperature is above the high limit, the error code is
    3\. If the temperature is below the lower limit, the error code is 4. These comply
    with the requirements in the prompt.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '图[6](https://arxiv.org/html/2410.14209v2#S5.F6 "图6 ‣ V-D RQ4: 实际控制环境中的案例研究
    ‣ V 结果 ‣ Agents4PLC: 使用基于LLM的智能体自动化闭环PLC代码生成与验证")表示温度和继电器更新任务。提示是：设计一个使用结构化文本（ST代码）的PLC程序，结合压力传感器、温度传感器、继电器、计数器、错误代码和错误标志作为输入。该程序必须循环检查压力传感器，根据特定条件调整温度传感器，并根据GT1-OUT的值更新继电器状态。确保程序检查条件以避免溢出并保持错误标志状态。返回一个布尔值，表示操作是否完成。结果表明，当压力和温度异常时，提供低限或高限报警和不同的错误代码。当发生异常时，报警灯会闪烁。如果压力超过上限，则错误代码为1。如果温度超过高限，则错误代码为3。如果温度低于低限，则错误代码为4。这些都符合提示中的要求。'
- en: '![Refer to caption](img/77a6fb9f40a52c3a496df3719f7c3abe.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明文字](img/77a6fb9f40a52c3a496df3719f7c3abe.png)'
- en: 'Figure 4: LED control with Agents4PLC.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图4：使用Agents4PLC进行LED控制。
- en: '![Refer to caption](img/77bf575ffa5feb4705fb0862bb15f7f6.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明文字](img/77bf575ffa5feb4705fb0862bb15f7f6.png)'
- en: 'Figure 5: Motor triggering control with Agents4PLC.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图5：使用Agents4PLC进行电机触发控制。
- en: '![Refer to caption](img/0d8f82f0d6a45b8174f58291d0c69707.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![参见说明文字](img/0d8f82f0d6a45b8174f58291d0c69707.png)'
- en: 'Figure 6: Temperature update with Agents4PLC.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图6：使用Agents4PLC进行温度更新。
- en: 'TABLE III: Compilation and Verification Metrics for Different Models'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 表III：不同模型的编译和验证指标
- en: '| Benchmark Level | Easy Problems | Medium Problems |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| 基准级别 | 简单问题 | 中等问题 |'
- en: '| Framework | Base Model | Syntax Compilation | Verifiable Rate | Pass Rate
    | Syntax Compilation | Verifiable Rate | Pass Rate |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 框架 | 基础模型 | 语法编译 | 可验证率 | 通过率 | 语法编译 | 可验证率 | 通过率 |'
- en: '| LLM4PLC | CodeLlama 34B | 11  16   68.8% | 0  16   0.0% | 0  16   0.0% |
    4  7  57.1% | 0  7  0.0% | 0  7  0.0% |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| LLM4PLC | CodeLlama 34B | 11  16   68.8% | 0  16   0.0% | 0  16   0.0% |
    4  7  57.1% | 0  7  0.0% | 0  7  0.0% |'
- en: '| DeepSeek V2.5 | 13  16  81.3% | 2  16  12.5% | 2  16  12.5% | 7  7  100.0%
    | 0  7  0.0% | 0  7  0.0% |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| DeepSeek V2.5 | 13  16  81.3% | 2  16  12.5% | 2  16  12.5% | 7  7  100.0%
    | 0  7  0.0% | 0  7  0.0% |'
- en: '| GPT-4o | 14  16  87.5% | 0  16  0.0% | 2  16  12.5% | 4  7  57.1% | 0  7
     0.0% | 0  7  0.0% |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| GPT-4o | 14  16  87.5% | 0  16  0.0% | 2  16  12.5% | 4  7  57.1% | 0  7
     0.0% | 0  7  0.0% |'
- en: '| GPT-4o-mini | 15  16  93.8% | 0  16  0.0% | 0  16  0.0% | 4  7  57.1% | 0
     7  0.0% | 0  7  0.0% |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| GPT-4o-mini | 15  16  93.8% | 0  16  0.0% | 0  16  0.0% | 4  7  57.1% | 0
     7  0.0% | 0  7  0.0% |'
- en: '| Agents4PLC | CodeLlama 34B | 5  16    31.3% | 2  16  12.5% | 1  16  6.3%
    | 1  7  14.3% | 0  7  0.0% | 0  7  0.0% |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| Agents4PLC | CodeLlama 34B | 5  16    31.3% | 2  16  12.5% | 1  16  6.3%
    | 1  7  14.3% | 0  7  0.0% | 0  7  0.0% |'
- en: '| DeepSeek V2.5 | 16  16  100.0% | 10  16  62.5% | 7  16  43.8% | 7  7  100.0%
    | 3  7  42.9% | 1  7  14.3% |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| DeepSeek V2.5 | 16  16  100.0% | 10  16  62.5% | 7  16  43.8% | 7  7  100.0%
    | 3  7  42.9% | 1  7  14.3% |'
- en: '| GPT-4o | 16  16  100.0% | 11  16  68.8% | 8  16  50.0% | 7  7  100.0% | 3
     7  42.9% | 2  7  28.6% |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| GPT-4o | 16  16  100.0% | 11  16  68.8% | 8  16  50.0% | 7  7  100.0% | 3
     7  42.9% | 2  7  28.6% |'
- en: '| GPT-4o-mini | 16  16  100.0% | 8  16  50.0% | 7  16  43.8% | 7  7  100.0%
    | 1  7  14.3% | 0  7  0.0% |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| GPT-4o-mini | 16  16  100.0% | 8  16  50.0% | 7  16  43.8% | 7  7  100.0%
    | 1  7  14.3% | 0  7  0.0% |'
- en: '| ChatDev | GPT-4o | 7  16  43.8% | NA | NA | 2  7  28.6% | NA | NA |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| ChatDev | GPT-4o | 7  16  43.8% | NA | NA | 2  7  28.6% | NA | NA |'
- en: 'Note: The format of data represents number of successful passes on corresponding
    metrics / total number of programming problems / passing rate.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 注：数据格式表示对应指标的成功通过次数 / 编程问题的总数 / 通过率。
- en: VI Related works
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VI 相关工作
- en: There are significantly increasing interests from both the industry and academia
    in LLM-based code generation, including those LLMs specifically designed for code
    generation such as DeepSeek-Coder[[16](https://arxiv.org/html/2410.14209v2#bib.bib16)],
    StarCoder [[32](https://arxiv.org/html/2410.14209v2#bib.bib32)], and CodeLlama
    [[42](https://arxiv.org/html/2410.14209v2#bib.bib42)]. However, most of them focus
    on high-level languages such as C, Python and only a very small portion considers
    PLC code in control engineering. Here, we mainly review those works considering
    PLC code from the aspects of its generation, testing and verification. We also
    seperatly review the existing LLM-based multi-agent frameworks for code generation.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 来自工业界和学术界对基于LLM的代码生成的兴趣显著增加，其中包括一些专门为代码生成设计的LLM，例如DeepSeek-Coder[[16](https://arxiv.org/html/2410.14209v2#bib.bib16)]、StarCoder[[32](https://arxiv.org/html/2410.14209v2#bib.bib32)]和CodeLlama[[42](https://arxiv.org/html/2410.14209v2#bib.bib42)]。然而，大多数LLM关注的是高级语言，如C、Python，只有极少部分考虑到控制工程中的PLC代码。本文主要从生成、测试和验证的角度回顾了那些考虑PLC代码的相关工作。我们还分别回顾了现有的基于LLM的多智能体框架在代码生成中的应用。
- en: VI-A LLM-based Automated PLC Code Generation
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: VI-A 基于LLM的自动化PLC代码生成
- en: There exist a few works studying the LLM-based generation of PLC programming
    code like ST. For instance, Koziolek et al. [[26](https://arxiv.org/html/2410.14209v2#bib.bib26)]
    create 100 prompts across 10 categories to evaluate the ability of the existing
    LLMs to produce syntactically correct control logic code in ST language. Later,
    they introduce a retrieval-augmented generation method [[27](https://arxiv.org/html/2410.14209v2#bib.bib27)]
    and an image-recognition-based generation method [[28](https://arxiv.org/html/2410.14209v2#bib.bib28)].
    These methods integrate proprietary function blocks into the generated code and
    utilize GPT-4 Vision to generate control logic code for industrial automation
    from Piping-and-Instrumentation Diagrams (P&IDs), respectively. However, they
    do not consider testing or verification of the generated code, and thus cannot
    ensure code correctness. Fakih et al. [[14](https://arxiv.org/html/2410.14209v2#bib.bib14)]
    introduce an LLM-based PLC code generation pipeline named LLM4PLC, which integrates
    the fine-tuned LLMs with external verification tools. Though it takes formal verification
    into consideration, it only achieves design-level verification (instead of the
    ST code level) and the generation process can not achieve full automation. Witnessing
    these limitations of existing works, we aim to achieve closed-loop and fully automated
    PLC code generation and verification with our designed multi-agent system Agents4PLC,
    paving a way for evolving, efficient, trustworthy and intelligent coding for industrial
    control systems.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 已有一些研究探讨了基于LLM的PLC编程代码生成，如ST语言。例如，Koziolek等人[[26](https://arxiv.org/html/2410.14209v2#bib.bib26)]创建了100个跨越10个类别的提示，用以评估现有LLM生成ST语言中语法正确的控制逻辑代码的能力。随后，他们引入了一个检索增强生成方法[[27](https://arxiv.org/html/2410.14209v2#bib.bib27)]和一个基于图像识别的生成方法[[28](https://arxiv.org/html/2410.14209v2#bib.bib28)]。这些方法将专有功能块集成到生成的代码中，并利用GPT-4
    Vision从管道和仪表图（P&ID）中生成工业自动化控制逻辑代码。然而，他们没有考虑生成代码的测试或验证，因此无法确保代码的正确性。Fakih等人[[14](https://arxiv.org/html/2410.14209v2#bib.bib14)]提出了一种基于LLM的PLC代码生成管道，名为LLM4PLC，该管道将微调的LLM与外部验证工具结合。尽管它考虑了形式化验证，但仅实现了设计级别的验证（而不是ST代码级别），并且生成过程无法实现完全自动化。鉴于现有工作的这些局限性，我们的目标是通过设计的多代理系统Agents4PLC实现封闭循环和完全自动化的PLC代码生成与验证，为工业控制系统的进化、高效、可信赖和智能编码铺平道路。
- en: Our work is also inspired by the recent trend in code generation approaches
    which rely on the cooperation of LLM-based agents. ChatDev [[18](https://arxiv.org/html/2410.14209v2#bib.bib18)],
    a virtual software development company composed of multiple agents, features clearly
    defined roles and divisions of labor, aiming to collaboratively generate high-quality
    software code. However, ChatDev still shows limitations when it comes to generating
    software code for industrial control systems without formal verification support.
    Mapcoder [[22](https://arxiv.org/html/2410.14209v2#bib.bib22)] consists of four
    LLM-based agents for the tasks of recalling relevant examples, planning, code
    generation, and debugging respectively, relying on multi-agent prompting for code
    generation. AutoSafeCoder [[37](https://arxiv.org/html/2410.14209v2#bib.bib37)]
    consists of three agents responsible for code generation, static analysis and
    fuzzing to detect runtime errors respectively. AgentCoder [[19](https://arxiv.org/html/2410.14209v2#bib.bib19)]
    consists of three agents responsible for code generation and refinement, test
    case generation, test execution and feedback reporting respectively. These approaches
    all focus on Python language which is fundamentally different to ST for PLC. Agents4PLC
    is the first LLM-agent-based system covering the whole lifecycle of ST control
    engineering.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的工作也受到最近依赖基于LLM的代理合作的代码生成方法的启发。ChatDev [[18](https://arxiv.org/html/2410.14209v2#bib.bib18)]
    是一个由多个代理组成的虚拟软件开发公司，具有明确定义的角色和劳动分工，旨在协作生成高质量的软件代码。然而，ChatDev 在生成没有正式验证支持的工业控制系统软件代码时仍然存在局限性。Mapcoder
    [[22](https://arxiv.org/html/2410.14209v2#bib.bib22)] 由四个基于LLM的代理组成，分别负责回忆相关示例、规划、代码生成和调试，依赖于多代理提示进行代码生成。AutoSafeCoder
    [[37](https://arxiv.org/html/2410.14209v2#bib.bib37)] 由三个代理组成，分别负责代码生成、静态分析和模糊测试以检测运行时错误。AgentCoder
    [[19](https://arxiv.org/html/2410.14209v2#bib.bib19)] 由三个代理组成，分别负责代码生成和优化、测试用例生成、测试执行和反馈报告。这些方法都专注于Python语言，而Python与PLC的ST语言有本质的不同。Agents4PLC是第一个基于LLM代理的系统，覆盖ST控制工程的整个生命周期。
- en: VI-B PLC Code Testing and Verification
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: VI-B PLC代码测试与验证
- en: Due to the fact that PLC programming is often performed in low-level programming
    languages, which typically use bitwise and boolean operations, it becomes very
    difficult to understand and debug PLC programs. This increases the need for testing
    and verification of PLC programs [[38](https://arxiv.org/html/2410.14209v2#bib.bib38),
    [46](https://arxiv.org/html/2410.14209v2#bib.bib46)]. Existing methods for the
    automated generation of PLC test cases mainly include symbolic execution [[44](https://arxiv.org/html/2410.14209v2#bib.bib44)],
    concolic testing [[7](https://arxiv.org/html/2410.14209v2#bib.bib7)] and search-based
    techniques [[13](https://arxiv.org/html/2410.14209v2#bib.bib13)]. However, these
    approaches can produce test cases that are difficult to maintain, making them
    challenging to use. Koziolek et al. [[25](https://arxiv.org/html/2410.14209v2#bib.bib25)]
    propose to automatically generate PLC test cases as a csv file by querying an
    LLM with a prompt to synthesize code test cases. And they found in experiments
    that many generated test cases contain incorrect assertions and require manual
    correction. The multi-agent based generation approaches Mapcoder [[22](https://arxiv.org/html/2410.14209v2#bib.bib22)],
    AutoSafeCoder[[37](https://arxiv.org/html/2410.14209v2#bib.bib37)] and AgentCoder [[19](https://arxiv.org/html/2410.14209v2#bib.bib19)]
    all consider code testing, but ignore formal verification of the generated code.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 由于PLC编程通常使用低级编程语言，通常涉及按位和布尔操作，这使得理解和调试PLC程序变得非常困难。因此，PLC程序的测试和验证需求增加 [[38](https://arxiv.org/html/2410.14209v2#bib.bib38),
    [46](https://arxiv.org/html/2410.14209v2#bib.bib46)]。现有的PLC测试用例自动生成方法主要包括符号执行
    [[44](https://arxiv.org/html/2410.14209v2#bib.bib44)]、混合测试 [[7](https://arxiv.org/html/2410.14209v2#bib.bib7)]
    和基于搜索的技术 [[13](https://arxiv.org/html/2410.14209v2#bib.bib13)]。然而，这些方法生成的测试用例可能难以维护，使用起来具有挑战性。Koziolek等人
    [[25](https://arxiv.org/html/2410.14209v2#bib.bib25)] 提出通过向LLM查询提示，自动生成PLC测试用例并以csv文件格式输出，并在实验中发现，许多生成的测试用例包含错误的断言，需要手动修正。基于多智能体的生成方法如Mapcoder
    [[22](https://arxiv.org/html/2410.14209v2#bib.bib22)]、AutoSafeCoder[[37](https://arxiv.org/html/2410.14209v2#bib.bib37)]
    和AgentCoder [[19](https://arxiv.org/html/2410.14209v2#bib.bib19)] 都考虑了代码测试，但忽略了生成代码的形式验证。
- en: In terms of PLC code verification, there exist tools like nuXmv [[8](https://arxiv.org/html/2410.14209v2#bib.bib8)]
    and PLCverif [[12](https://arxiv.org/html/2410.14209v2#bib.bib12)] applicable
    for functional verification of ST code, which are serving as the backend verifier
    in Agents4PLC. Besides, several recent works aim to establish formal semantics
    for IEC 61131-3 languages like ST with more recent language framework like K framework
    [[49](https://arxiv.org/html/2410.14209v2#bib.bib49), [30](https://arxiv.org/html/2410.14209v2#bib.bib30)],
    facilitating testing or verification of ST code [[31](https://arxiv.org/html/2410.14209v2#bib.bib31)].
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在PLC代码验证方面，已有如nuXmv [[8](https://arxiv.org/html/2410.14209v2#bib.bib8)] 和PLCverif
    [[12](https://arxiv.org/html/2410.14209v2#bib.bib12)] 等工具，适用于ST代码的功能验证，它们作为Agents4PLC的后端验证器。此外，几项近期的研究旨在为IEC
    61131-3语言（如ST）建立形式语义，并采用像K框架这样的新型语言框架 [[49](https://arxiv.org/html/2410.14209v2#bib.bib49),
    [30](https://arxiv.org/html/2410.14209v2#bib.bib30)]，以促进ST代码的测试或验证 [[31](https://arxiv.org/html/2410.14209v2#bib.bib31)]。
- en: VII Conclusion and Future Works
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 七、结论与未来工作
- en: In this paper, we presented Agents4PLC, the first LLM-based multi-agent framework
    that addresses the critical challenges of automated Programmable Logic Controller
    (PLC) code generation and verification. By establishing a comprehensive benchmark
    that transitions from natural language requirements to formal specifications,
    we laid the groundwork for future research in the field of PLC code generation.
    Our framework not only emphasizes code-level verification and full automation,
    but also is flexible to incorporate various base code generation models and development
    modules. Extensive evaluation demonstrates that Agents4PLC significantly outperforms
    the previous approaches, achieving high automation and verifiability for PLC code
    generation.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们提出了Agents4PLC，这是首个基于大语言模型（LLM）的多智能体框架，旨在解决自动化可编程逻辑控制器（PLC）代码生成和验证的关键挑战。通过建立一个全面的基准，从自然语言需求到正式规格的转化，我们为未来PLC代码生成领域的研究奠定了基础。我们的框架不仅强调代码级验证和完全自动化，而且具有灵活性，可以整合各种基础代码生成模型和开发模块。广泛的评估表明，Agents4PLC显著优于以往的方法，在PLC代码生成方面实现了高度的自动化和可验证性。
- en: In the future, we plan to expand the framework to support additional PLC programming
    languages and standards to enhance its applicability across various industrial
    contexts. Moreover, we will explore user feedback mechanisms within the multi-agent
    system to help refine the generated code and the agents based on real-world usage,
    thereby further enhancing its usability and reliability.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来，我们计划扩展该框架，以支持更多的PLC编程语言和标准，从而增强其在各种工业背景下的适用性。此外，我们还将探索多智能体系统中的用户反馈机制，以根据实际使用情况优化生成的代码和智能体，从而进一步提升其可用性和可靠性。
- en: References
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] “Uwintech control engineering application software platform,” [https://www.uwntek.com/product/2.html](https://www.uwntek.com/product/2.html),
    accessed: 2024-10-10.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[1] “Uwintech控制工程应用软件平台，” [https://www.uwntek.com/product/2.html](https://www.uwntek.com/product/2.html)，访问时间：2024-10-10。'
- en: '[2] “Matiec,” 2017\. [Online]. Available: [https://github.com/nucleron/matiec](https://github.com/nucleron/matiec)'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2] “Matiec,” 2017\. [在线]. 可用链接: [https://github.com/nucleron/matiec](https://github.com/nucleron/matiec)'
- en: '[3] “Gpt-4o,” 2024\. [Online]. Available: [https://platform.openai.com/docs/models/gpt-4o](https://platform.openai.com/docs/models/gpt-4o)'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3] “Gpt-4o,” 2024\. [在线]. 可用链接: [https://platform.openai.com/docs/models/gpt-4o](https://platform.openai.com/docs/models/gpt-4o)'
- en: '[4] “Gpt-4o-mini,” 2024\. [Online]. Available: [https://platform.openai.com/docs/models/gpt-4o-mini](https://platform.openai.com/docs/models/gpt-4o-mini)'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[4] “Gpt-4o-mini,” 2024\. [在线]. 可用链接: [https://platform.openai.com/docs/models/gpt-4o-mini](https://platform.openai.com/docs/models/gpt-4o-mini)'
- en: '[5] “Langgraph,” 2024\. [Online]. Available: [https://github.com/langchain-ai/langgraph](https://github.com/langchain-ai/langgraph)'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5] “Langgraph,” 2024\. [在线]. 可用链接: [https://github.com/langchain-ai/langgraph](https://github.com/langchain-ai/langgraph)'
- en: '[6] “Rusty,” 2024\. [Online]. Available: [https://github.com/PLC-lang/rusty](https://github.com/PLC-lang/rusty)'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[6] “Rusty,” 2024\. [在线]. 可用链接: [https://github.com/PLC-lang/rusty](https://github.com/PLC-lang/rusty)'
- en: '[7] D. Bohlender, H. Simon, N. Friedrich, S. Kowalewski, and S. Hauck-Stattelmann,
    “Concolic test generation for plc programs using coverage metrics,” in *2016 13th
    International Workshop on Discrete Event Systems (WODES)*.   IEEE, 2016, pp. 432–437.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[7] D. Bohlender, H. Simon, N. Friedrich, S. Kowalewski, 和 S. Hauck-Stattelmann,
    “基于覆盖度度量的PLC程序的符号测试生成，” 收录于 *2016年第13届离散事件系统国际研讨会(WODES)*。IEEE，2016年，页码432–437。'
- en: '[8] R. Cavada, A. Cimatti, M. Dorigatti, A. Griggio, A. Mariotti, A. Micheli,
    S. Mover, M. Roveri, and S. Tonetta, “The nuxmv symbolic model checker,” in *Computer
    Aided Verification: 26th International Conference, CAV 2014, Held as Part of the
    Vienna Summer of Logic, VSL 2014, Vienna, Austria, July 18-22, 2014\. Proceedings
    26*.   Springer, 2014, pp. 334–342.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[8] R. Cavada, A. Cimatti, M. Dorigatti, A. Griggio, A. Mariotti, A. Micheli,
    S. Mover, M. Roveri, 和 S. Tonetta, “Nuxmv符号模型检查器，” 收录于 *计算机辅助验证：第26届国际会议，CAV 2014，作为维也纳逻辑夏季会的一部分，VSL
    2014，维也纳，奥地利，2014年7月18-22日，论文集26*。Springer，2014年，页码334–342。'
- en: '[9] M. Chen, J. Tworek, H. Jun, Q. Yuan, H. P. D. O. Pinto, J. Kaplan, H. Edwards,
    Y. Burda, N. Joseph, G. Brockman *et al.*, “Evaluating large language models trained
    on code,” *arXiv preprint arXiv:2107.03374*, 2021.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[9] M. Chen, J. Tworek, H. Jun, Q. Yuan, H. P. D. O. Pinto, J. Kaplan, H. Edwards,
    Y. Burda, N. Joseph, G. Brockman *等*，“评估在代码上训练的大型语言模型，” *arXiv预印本arXiv:2107.03374*，2021年。'
- en: '[10] Z. Chen, S. Fang, and M. Monperrus, “Supersonic: Learning to generate
    source code optimizations in c/c++,” *IEEE Transactions on Software Engineering*,
    2024.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[10] Z. Chen, S. Fang, 和 M. Monperrus, “Supersonic: 学习在C/C++中生成源代码优化，” *IEEE软件工程学报*，2024年。'
- en: '[11] V. Corso, L. Mariani, D. Micucci, and O. Riganelli, “Generating java methods:
    An empirical assessment of four ai-based code assistants,” in *Proceedings of
    the 32nd IEEE/ACM International Conference on Program Comprehension*, 2024, pp.
    13–23.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[11] V. Corso, L. Mariani, D. Micucci, 和 O. Riganelli, “生成Java方法：四种基于AI的代码助手的经验评估，”
    收录于 *第32届IEEE/ACM程序理解国际会议论文集*，2024年，页码13–23。'
- en: '[12] D. Darvas, E. Blanco Vinuela, and B. Fernández Adiego, “Plcverif: A tool
    to verify plc programs based on model checking techniques,” in *Proceedings of
    the 15th International Conference on Accelerator and Large Experimental Physics
    Control Systems*.   IEEE, 2015, pp. 1–6.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[12] D. Darvas, E. Blanco Vinuela, 和 B. Fernández Adiego, “Plcverif: 基于模型检测技术验证PLC程序的工具，”
    收录于 *第15届加速器与大型实验物理控制系统国际会议论文集*。IEEE，2015年，页码1–6。'
- en: '[13] M. Ebrahimi Salari, E. P. Enoiu, W. Afzal, and C. Seceleanu, “Pylc: A
    framework for transforming and validating plc software using python and pynguin
    test generator,” in *Proceedings of the 38th ACM/SIGAPP Symposium on Applied Computing*,
    2023, pp. 1476–1485.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[13] M. Ebrahimi Salari, E. P. Enoiu, W. Afzal 和 C. Seceleanu, “Pylc：一个使用Python和Pynguin测试生成器转换和验证PLC软件的框架，”收录于
    *第38届ACM/SIGAPP应用计算研讨会论文集*，2023年，页码1476–1485。'
- en: '[14] M. Fakih, R. Dharmaji, Y. Moghaddas, G. Quiros, O. Ogundare, and M. A.
    Al Faruque, “Llm4plc: Harnessing large language models for verifiable programming
    of plcs in industrial control systems,” in *Proceedings of the 46th International
    Conference on Software Engineering: Software Engineering in Practice*, 2024, pp.
    192–203.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[14] M. Fakih, R. Dharmaji, Y. Moghaddas, G. Quiros, O. Ogundare 和 M. A. Al
    Faruque, “LLM4PLC：利用大语言模型为工业控制系统中的PLC编程提供可验证的解决方案，”收录于 *第46届国际软件工程大会：实践中的软件工程*，2024年，页码192–203。'
- en: '[15] E. First and Y. Brun, “Diversity-driven automated formal verification,”
    in *Proceedings of the 44th International Conference on Software Engineering*,
    2022, pp. 749–761.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[15] E. First 和 Y. Brun, “基于多样性驱动的自动化形式化验证，”收录于 *第44届国际软件工程大会论文集*，2022年，页码749–761。'
- en: '[16] D. Guo, Q. Zhu, D. Yang, Z. Xie, K. Dong, W. Zhang, G. Chen, X. Bi, Y. Wu,
    Y. Li *et al.*, “Deepseek-coder: When the large language model meets programming–the
    rise of code intelligence,” *arXiv preprint arXiv:2401.14196*, 2024.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[16] D. Guo, Q. Zhu, D. Yang, Z. Xie, K. Dong, W. Zhang, G. Chen, X. Bi, Y.
    Wu, Y. Li *等*， “Deepseek-coder：当大语言模型遇到编程——代码智能的崛起，” *arXiv 预印本 arXiv:2401.14196*，2024年。'
- en: '[17] S. Hong, X. Zheng, J. Chen, Y. Cheng, J. Wang, C. Zhang, Z. Wang, S. K. S.
    Yau, Z. Lin, L. Zhou *et al.*, “Metagpt: Meta programming for multi-agent collaborative
    framework,” *arXiv preprint arXiv:2308.00352*, 2023.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[17] S. Hong, X. Zheng, J. Chen, Y. Cheng, J. Wang, C. Zhang, Z. Wang, S. K.
    S. Yau, Z. Lin, L. Zhou *等*， “Metagpt：面向多智能体协作框架的元编程，” *arXiv 预印本 arXiv:2308.00352*，2023年。'
- en: '[18] X. Hou, Y. Zhao, Y. Liu, Z. Yang, K. Wang, L. Li, X. Luo, D. Lo, J. Grundy,
    and H. Wang, “Large language models for software engineering: A systematic literature
    review,” *ACM Transactions on Software Engineering and Methodology*, 2023.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[18] X. Hou, Y. Zhao, Y. Liu, Z. Yang, K. Wang, L. Li, X. Luo, D. Lo, J. Grundy
    和 H. Wang, “大语言模型在软件工程中的应用：一项系统的文献综述，” *ACM 软件工程与方法学学报*，2023年。'
- en: '[19] D. Huang, Q. Bu, J. M. Zhang, M. Luck, and H. Cui, “Agentcoder: Multi-agent-based
    code generation with iterative testing and optimisation,” *arXiv preprint arXiv:2312.13010*,
    2023.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[19] D. Huang, Q. Bu, J. M. Zhang, M. Luck 和 H. Cui, “Agentcoder：基于多智能体的代码生成与迭代测试与优化，”
    *arXiv 预印本 arXiv:2312.13010*，2023年。'
- en: '[20] International Electrotechnical Commission (IEC), “IEC 61131-3:2013 Programmable
    controllers - Part 3: Programming languages,” [https://webstore.iec.ch/en/publication/4552](https://webstore.iec.ch/en/publication/4552),
    2013, edition 3.0, ISBN: 9782832206614.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[20] 国际电工委员会（IEC），“IEC 61131-3:2013 可编程控制器 - 第3部分：编程语言，”[https://webstore.iec.ch/en/publication/4552](https://webstore.iec.ch/en/publication/4552)，2013年，3.0版，ISBN：9782832206614。'
- en: '[21] C. Isbell, C. R. Shelton, M. Kearns, S. Singh, and P. Stone, “A social
    reinforcement learning agent,” in *Proceedings of the fifth international conference
    on Autonomous agents*, 2001, pp. 377–384.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[21] C. Isbell, C. R. Shelton, M. Kearns, S. Singh 和 P. Stone, “社会强化学习智能体，”收录于
    *第五届国际自主代理大会论文集*，2001年，页码377–384。'
- en: '[22] M. A. Islam, M. E. Ali, and M. R. Parvez, “Mapcoder: Multi-agent code
    generation for competitive problem solving,” *arXiv preprint arXiv:2405.11403*,
    2024.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[22] M. A. Islam, M. E. Ali 和 M. R. Parvez, “Mapcoder：用于竞争性问题解决的多智能体代码生成，”
    *arXiv 预印本 arXiv:2405.11403*，2024年。'
- en: '[23] L. P. Kaelbling, M. L. Littman, and A. W. Moore, “Reinforcement learning:
    A survey,” *Journal of artificial intelligence research*, vol. 4, pp. 237–285,
    1996.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[23] L. P. Kaelbling, M. L. Littman 和 A. W. Moore, “强化学习：一项综述，” *人工智能研究学报*，第4卷，页码237–285，1996年。'
- en: '[24] M. Kornaszewski, “The use of programmable logic controllers in railway
    signaling systems,” in *ICTE in Transportation and Logistics 2019*.   Springer,
    2020, pp. 104–111.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[24] M. Kornaszewski, “可编程逻辑控制器在铁路信号系统中的应用，”收录于 *2019年交通与物流ICTE研讨会论文集*，Springer，2020年，页码104–111。'
- en: '[25] H. Koziolek, V. Ashiwal, S. Bandyopadhyay *et al.*, “Automated control
    logic test case generation using large language models,” *arXiv preprint arXiv:2405.01874*,
    2024.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[25] H. Koziolek, V. Ashiwal, S. Bandyopadhyay *等*， “基于大语言模型的自动化控制逻辑测试用例生成，”
    *arXiv 预印本 arXiv:2405.01874*，2024年。'
- en: '[26] H. Koziolek, S. Gruener, and V. Ashiwal, “Chatgpt for plc/dcs control
    logic generation,” in *2023 IEEE 28th International Conference on Emerging Technologies
    and Factory Automation (ETFA)*.   IEEE, 2023, pp. 1–8.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[26] H. Koziolek, S. Gruener, 和 V. Ashiwal, “ChatGPT用于PLC/DCS控制逻辑生成，” *2023年IEEE第28届国际新兴技术与工厂自动化会议（ETFA）论文集*。IEEE，2023年，第1–8页。'
- en: '[27] H. Koziolek, S. Grüner, R. Hark, V. Ashiwal, S. Linsbauer, and N. Eskandani,
    “Llm-based and retrieval-augmented control code generation,” in *Proceedings of
    the 1st International Workshop on Large Language Models for Code*, 2024, pp. 22–29.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[27] H. Koziolek, S. Grüner, R. Hark, V. Ashiwal, S. Linsbauer, 和 N. Eskandani,
    “基于LLM和检索增强的控制代码生成，” *2024年第1届国际大型语言模型代码研讨会论文集*，2024年，第22–29页。'
- en: '[28] H. Koziolek and A. Koziolek, “Llm-based control code generation using
    image recognition,” in *Proceedings of the 1st International Workshop on Large
    Language Models for Code*, 2024, pp. 38–45.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[28] H. Koziolek 和 A. Koziolek, “基于LLM的控制代码生成与图像识别，” *2024年第1届国际大型语言模型代码研讨会论文集*，2024年，第38–45页。'
- en: '[29] D. Kroening and M. Tautschnig, “Cbmc–c bounded model checker: (competition
    contribution),” in *Tools and Algorithms for the Construction and Analysis of
    Systems: 20th International Conference, TACAS 2014, Held as Part of the European
    Joint Conferences on Theory and Practice of Software, ETAPS 2014, Grenoble, France,
    April 5-13, 2014\. Proceedings 20*.   Springer, 2014, pp. 389–391.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[29] D. Kroening 和 M. Tautschnig, “Cbmc–c有界模型检查器：（竞赛贡献），” *系统构建与分析工具与算法：第20届国际会议，TACAS
    2014，作为欧洲联合软件理论与实践会议ETAPS 2014的一部分，于2014年4月5日至13日在法国格勒诺布尔举行，论文集第20*。Springer，2014年，第389–391页。'
- en: '[30] J. Lee and K. Bae, “Formal semantics and analysis of multitask plc st
    programs with preemption,” in *International Symposium on Formal Methods*.   Springer,
    2024, pp. 425–442.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[30] J. Lee 和 K. Bae, “多任务PLC ST程序的形式化语义与分析（带抢占），” *国际形式化方法研讨会论文集*。Springer，2024年，第425–442页。'
- en: '[31] J. Lee, S. Kim, and K. Bae, “Bounded model checking of plc st programs
    using rewriting modulo smt,” in *Proceedings of the 8th ACM SIGPLAN International
    Workshop on Formal Techniques for Safety-Critical Systems*, 2022, pp. 56–67.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[31] J. Lee, S. Kim, 和 K. Bae, “使用模糊重写进行PLC ST程序的有界模型检查，” *第8届ACM SIGPLAN国际形式化安全关键系统技术研讨会论文集*，2022年，第56–67页。'
- en: '[32] R. Li, L. B. Allal, Y. Zi, N. Muennighoff, D. Kocetkov, C. Mou, M. Marone,
    C. Akiki, J. Li, J. Chim *et al.*, “Starcoder: may the source be with you!” *arXiv
    preprint arXiv:2305.06161*, 2023.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[32] R. Li, L. B. Allal, Y. Zi, N. Muennighoff, D. Kocetkov, C. Mou, M. Marone,
    C. Akiki, J. Li, J. Chim *等*，“Starcoder：愿源代码与你同在！” *arXiv预印本arXiv:2305.06161*，2023年。'
- en: '[33] Y. Li, D. Choi, J. Chung, N. Kushman, J. Schrittwieser, R. Leblond, T. Eccles,
    J. Keeling, F. Gimeno, A. Dal Lago *et al.*, “Competition-level code generation
    with alphacode,” *Science*, vol. 378, no. 6624, pp. 1092–1097, 2022.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[33] Y. Li, D. Choi, J. Chung, N. Kushman, J. Schrittwieser, R. Leblond, T.
    Eccles, J. Keeling, F. Gimeno, A. Dal Lago *等*，“AlphaCode的竞赛级代码生成，” *科学*，第378卷，第6624期，第1092–1097页，2022年。'
- en: '[34] J. Liu, K. Wang, Y. Chen, X. Peng, Z. Chen, L. Zhang, and Y. Lou, “Large
    language model-based agents for software engineering: A survey,” *arXiv preprint
    arXiv:2409.02977*, 2024.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[34] J. Liu, K. Wang, Y. Chen, X. Peng, Z. Chen, L. Zhang, 和 Y. Lou, “基于大型语言模型的软件工程代理：一项综述，”
    *arXiv预印本arXiv:2409.02977*，2024年。'
- en: '[35] M. Minsky, “Steps toward artificial intelligence,” *Proceedings of the
    IRE*, vol. 49, no. 1, pp. 8–30, 1961.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[35] M. Minsky, “迈向人工智能的步骤，” *IRE会议录*，第49卷，第1期，第8–30页，1961年。'
- en: '[36] Mordor Intelligence, “Programmable logic controller (plc) market - share,
    size & growth,” 2024, accessed: 2024-10-08\. [Online]. Available: [https://www.mordorintelligence.com/industry-reports/programmable-logic-controller-plc-market](https://www.mordorintelligence.com/industry-reports/programmable-logic-controller-plc-market)'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[36] Mordor Intelligence, “可编程逻辑控制器（PLC）市场 - 市场份额、规模与增长，” 2024年，访问日期：2024-10-08。
    [在线]。可用链接：[https://www.mordorintelligence.com/industry-reports/programmable-logic-controller-plc-market](https://www.mordorintelligence.com/industry-reports/programmable-logic-controller-plc-market)'
- en: '[37] A. Nunez, N. T. Islam, S. K. Jha, and P. Najafirad, “Autosafecoder: A
    multi-agent framework for securing llm code generation through static analysis
    and fuzz testing,” *arXiv preprint arXiv:2409.10737*, 2024.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[37] A. Nunez, N. T. Islam, S. K. Jha, 和 P. Najafirad, “Autosafecoder：通过静态分析和模糊测试保护LLM代码生成的多代理框架，”
    *arXiv预印本arXiv:2409.10737*，2024年。'
- en: '[38] T. Ovatman, A. Aral, D. Polat, and A. O. Ünver, “An overview of model
    checking practices on verification of plc software,” *Software & Systems Modeling*,
    vol. 15, no. 4, pp. 937–960, 2016.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[38] T. Ovatman, A. Aral, D. Polat, 和 A. O. Ünver, “PLC软件验证模型检查实践概述，” *软件与系统建模*，第15卷，第4期，第937–960页，2016年。'
- en: '[39] C. Qian, W. Liu, H. Liu, N. Chen, Y. Dang, J. Li, C. Yang, W. Chen, Y. Su,
    X. Cong *et al.*, “Chatdev: Communicative agents for software development,” in
    *Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics
    (Volume 1: Long Papers)*, 2024, pp. 15 174–15 186.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[39] C. Qian, W. Liu, H. Liu, N. Chen, Y. Dang, J. Li, C. Yang, W. Chen, Y.
    Su, X. Cong *等*，“Chatdev：用于软件开发的交流代理，”发表于*第62届计算语言学协会年会论文集（卷1：长篇论文）*，2024年，页码15 174–15 186。'
- en: '[40] C. Qian, W. Liu, H. Liu, N. Chen, Y. Dang, J. Li, C. Yang, W. Chen, Y. Su,
    X. Cong, J. Xu, D. Li, Z. Liu, and M. Sun, “Chatdev: Communicative agents for
    software development,” *arXiv preprint arXiv:2307.07924*, 2023\. [Online]. Available:
    [https://arxiv.org/abs/2307.07924](https://arxiv.org/abs/2307.07924)'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[40] C. Qian, W. Liu, H. Liu, N. Chen, Y. Dang, J. Li, C. Yang, W. Chen, Y.
    Su, X. Cong, J. Xu, D. Li, Z. Liu, 和 M. Sun，“Chatdev：用于软件开发的交流代理，”*arXiv预印本arXiv:2307.07924*，2023年。[在线]。可用链接：[https://arxiv.org/abs/2307.07924](https://arxiv.org/abs/2307.07924)'
- en: '[41] C. Ribeiro, “Reinforcement learning agents,” *Artificial intelligence
    review*, vol. 17, pp. 223–250, 2002.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[41] C. Ribeiro，“强化学习代理，”*人工智能评论*，第17卷，页码223–250，2002年。'
- en: '[42] B. Roziere, J. Gehring, F. Gloeckle, S. Sootla, I. Gat, X. E. Tan, Y. Adi,
    J. Liu, R. Sauvestre, T. Remez *et al.*, “Code llama: Open foundation models for
    code,” *arXiv preprint arXiv:2308.12950*, 2023.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[42] B. Roziere, J. Gehring, F. Gloeckle, S. Sootla, I. Gat, X. E. Tan, Y.
    Adi, J. Liu, R. Sauvestre, T. Remez *等*，“Code Llama：开源基础模型用于代码，”*arXiv预印本arXiv:2308.12950*，2023年。'
- en: '[43] M. Schreyer and M. M. Tseng, “Design framework of plc-based control for
    reconfigurable manufacturing systems,” in *Proceedings of international conference
    on flexible automation and intelligent manufacturing (FAIM 2000)*, vol. 1, 2000,
    pp. 33–42.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[43] M. Schreyer 和 M. M. Tseng，“基于PLC控制的可重构制造系统设计框架，”发表于*国际柔性自动化与智能制造会议（FAIM
    2000）论文集*，第1卷，2000年，页码33–42。'
- en: '[44] J. Shi, Y. Chen, Q. Li, Y. Huang, Y. Yang, and M. Zhao, “Automated test
    cases generator for iec 61131-3 structured text based dynamic symbolic execution,”
    *IEEE Transactions on Computers*, 2024.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[44] J. Shi, Y. Chen, Q. Li, Y. Huang, Y. Yang, 和 M. Zhao，“基于IEC 61131-3结构化文本的动态符号执行自动化测试用例生成器，”*IEEE计算机学报*，2024年。'
- en: '[45] M. L. Siddiq, B. Casey, and J. Santos, “A lightweight framework for high-quality
    code generation,” *arXiv preprint arXiv:2307.08220*, 2023.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[45] M. L. Siddiq, B. Casey, 和 J. Santos，“高质量代码生成的轻量级框架，”*arXiv预印本arXiv:2307.08220*，2023年。'
- en: '[46] A. Singh, “Taxonomy of machine learning techniques in test case generation,”
    in *2023 7th International Conference on Intelligent Computing and Control Systems
    (ICICCS)*.   IEEE, 2023, pp. 474–481.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[46] A. Singh，“测试用例生成中的机器学习技术分类，”发表于*2023年第七届智能计算与控制系统国际会议（ICICCS）*，IEEE，2023年，页码474–481。'
- en: '[47] D. Tang, Z. Chen, K. Kim, Y. Song, H. Tian, S. Ezzini, Y. Huang, and J. K.
    T. F. Bissyande, “Collaborative agents for software engineering,” *arXiv preprint
    arXiv:2402.02172*, 2024.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[47] D. Tang, Z. Chen, K. Kim, Y. Song, H. Tian, S. Ezzini, Y. Huang, 和 J.
    K. T. F. Bissyande，“软件工程的协作代理，”*arXiv预印本arXiv:2402.02172*，2024年。'
- en: '[48] Technavio, “Programmable logic controller (plc) market analysis apac,
    north america, europe, middle east and africa, south america - us, china, japan,
    germany, uk - size and forecast 2024-2028,” 2024, accessed: 2024-10-08\. [Online].
    Available: [https://www.technavio.com/report/programmable-logic-controller-plc-market-industry-analysis](https://www.technavio.com/report/programmable-logic-controller-plc-market-industry-analysis)'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[48] Technavio，“可编程逻辑控制器（PLC）市场分析：亚太地区、北美、欧洲、中东和非洲、南美—美国、中国、日本、德国、英国—规模与预测2024-2028，”2024年，访问日期：2024-10-08。[在线]。可用链接：[https://www.technavio.com/report/programmable-logic-controller-plc-market-industry-analysis](https://www.technavio.com/report/programmable-logic-controller-plc-market-industry-analysis)'
- en: '[49] K. Wang, J. Wang, C. M. Poskitt, X. Chen, J. Sun, and P. Cheng, “K-st:
    A formal executable semantics of the structured text language for plcs,” *IEEE
    Transactions on Software Engineering*, 2023.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[49] K. Wang, J. Wang, C. M. Poskitt, X. Chen, J. Sun, 和 P. Cheng，“K-st：PLC结构化文本语言的形式可执行语义，”*IEEE软件工程学报*，2023年。'
- en: '[50] L. Wang, C. Ma, X. Feng, Z. Zhang, H. Yang, J. Zhang, Z. Chen, J. Tang,
    X. Chen, Y. Lin *et al.*, “A survey on large language model based autonomous agents,”
    *Frontiers of Computer Science*, vol. 18, no. 6, p. 186345, 2024.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[50] L. Wang, C. Ma, X. Feng, Z. Zhang, H. Yang, J. Zhang, Z. Chen, J. Tang,
    X. Chen, Y. Lin *等*，“基于大型语言模型的自主代理调查，”*计算机科学前沿*，第18卷，第6期，页码186345，2024年。'
- en: '[51] M. Wang, “Application of plc technology in electrical engineering and
    automation control,” in *Application of Intelligent Systems in Multi-modal Information
    Analytics: Proceedings of the 2020 International Conference on Multi-model Information
    Analytics (MMIA2020), Volume 2*.   Springer, 2021, pp. 131–135.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[51] M. Wang，"PLC技术在电气工程和自动化控制中的应用"，载于*多模态信息分析中的智能系统应用：2020年多模态信息分析国际会议（MMIA2020）论文集，第2卷*，Springer，2021，第131-135页。'
- en: '[52] Q. Wu, G. Bansal, J. Zhang, Y. Wu, B. Li, E. Zhu, L. Jiang, X. Zhang,
    S. Zhang, J. Liu, A. H. Awadallah, R. W. White, D. Burger, and C. Wang, “Autogen:
    Enabling next-gen llm applications via multi-agent conversation framework,” in
    *COLM*, 2024.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[52] Q. Wu, G. Bansal, J. Zhang, Y. Wu, B. Li, E. Zhu, L. Jiang, X. Zhang,
    S. Zhang, J. Liu, A. H. Awadallah, R. W. White, D. Burger, 和 C. Wang，"Autogen：通过多智能体对话框架实现下一代LLM应用"，载于*COLM*，2024。'
- en: '[53] Z. Xi, W. Chen, X. Guo, W. He, Y. Ding, B. Hong, M. Zhang, J. Wang, S. Jin,
    E. Zhou *et al.*, “The rise and potential of large language model based agents:
    A survey,” *arXiv preprint arXiv:2309.07864*, 2023.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[53] Z. Xi, W. Chen, X. Guo, W. He, Y. Ding, B. Hong, M. Zhang, J. Wang, S.
    Jin, E. Zhou *等*，"基于大型语言模型的智能体的崛起与潜力：一项调查"，*arXiv预印本 arXiv:2309.07864*，2023。'
- en: '[54] C. S. Xia and L. Zhang, “Keep the conversation going: Fixing 162 out of
    337 bugs for $0.42 each using chatgpt,” *arXiv preprint arXiv:2304.00385*, 2023.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[54] C. S. Xia 和 L. Zhang，"保持对话：通过chatgpt以每个$0.42修复337个错误中的162个"，*arXiv预印本
    arXiv:2304.00385*，2023。'
- en: '[55] K. Xu, G. L. Zhang, X. Yin, C. Zhuo, U. Schlichtmann, and B. Li, “Automated
    c/c++ program repair for high-level synthesis via large language models,” in *Proceedings
    of the 2024 ACM/IEEE International Symposium on Machine Learning for CAD*, 2024,
    pp. 1–9.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[55] K. Xu, G. L. Zhang, X. Yin, C. Zhuo, U. Schlichtmann, 和 B. Li，"通过大型语言模型进行高层次综合的自动化C/C++程序修复"，载于*2024年ACM/IEEE国际计算机辅助设计机器学习研讨会论文集*，2024，第1-9页。'
- en: '[56] K. Zhang, J. Li, G. Li, X. Shi, and Z. Jin, “Codeagent: Enhancing code
    generation with tool-integrated agent systems for real-world repo-level coding
    challenges,” *arXiv preprint arXiv:2401.07339*, 2024.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[56] K. Zhang, J. Li, G. Li, X. Shi, 和 Z. Jin，"Codeagent：通过工具集成智能体系统增强代码生成，解决现实世界仓库级别的编码挑战"，*arXiv预印本
    arXiv:2401.07339*，2024。'
- en: '[57] Z. Zhang, X. Bo, C. Ma, R. Li, X. Chen, Q. Dai, J. Zhu, Z. Dong, and J.-R.
    Wen, “A survey on the memory mechanism of large language model based agents,”
    *arXiv preprint arXiv:2404.13501*, 2024.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[57] Z. Zhang, X. Bo, C. Ma, R. Li, X. Chen, Q. Dai, J. Zhu, Z. Dong, 和 J.-R.
    Wen，"基于大型语言模型的智能体的记忆机制调查"，*arXiv预印本 arXiv:2404.13501*，2024。'
