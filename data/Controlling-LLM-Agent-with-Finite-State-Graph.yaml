- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2025-01-11 12:02:35'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2025-01-11 12:02:35'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Controlling LLM Agent with Finite State Graph
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用有限状态图控制LLM代理
- en: 来源：[https://arxiv.org/html/2410.18528/](https://arxiv.org/html/2410.18528/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://arxiv.org/html/2410.18528/](https://arxiv.org/html/2410.18528/)
- en: zhiweiliu(April 2024)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: zhiweiliu(2024年4月)
- en: 1 Introduction
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1 引言
- en: Firstly, we formulate the LLM agent behavior principle as a state graph, where
    node is state, and edge is transition between states. Each state node is a pre-defined
    agent execution and can be considered as a deterministic execution. The transition
    between states is then formulated as a decision making, from one state to another
    state. In this way, each state is connected to one or few possible next state.
    Hence, the agent execution is controlled as the state transition process.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将LLM代理的行为原则表述为一个状态图，其中节点是状态，边是状态之间的转换。每个状态节点是一个预定义的代理执行，可以视为一个确定性执行。状态之间的转换则被表述为一种决策过程，从一个状态到另一个状态。通过这种方式，每个状态连接到一个或几个可能的下一个状态。因此，代理执行被控制为状态转换过程。
- en: 'Secondly, we design the transition module from three perspectives: 1) heuristics/rules,
    2) machine learning (ML) models and 3) LLM reasoning. Heuristic-based transition
    is directly using some simple conditional rules like context matching to make
    a transition from one state to another. ML-based transition is to train a simple
    classification from one state to its neighbor states. LLM-based transition is
    to using the reasoning ability of LLM to decide the next states.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们从三个角度设计转换模块：1) 启发式/规则，2) 机器学习（ML）模型，3) LLM推理。基于启发式的转换是直接使用一些简单的条件规则，如上下文匹配，来实现从一个状态到另一个状态的转换。基于机器学习的转换是训练一个简单的分类器，将一个状态映射到其邻近状态。基于LLM的转换是利用LLM的推理能力来决定下一个状态。
- en: Lastly, the state graph is defined in three ways. 1) Hand-crafted state graph.
    The state and transition is fully designed by a human expert. 2) Data-based state
    graph. The state graph can be trained from large agent execution data. 3) LLM-based
    refinement. We could use LLM to add/delete the node in a state graph and we could
    also use LLM to add or delete the edges in the state graph.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，状态图有三种定义方式。1) 手工设计的状态图。状态和转换完全由人工专家设计。2) 基于数据的状态图。状态图可以从大量的代理执行数据中训练得到。3)
    基于LLM的优化。我们可以使用LLM来添加/删除状态图中的节点，也可以使用LLM来添加或删除状态图中的边。
